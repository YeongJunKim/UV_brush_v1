
neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000004  08002ae0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002ae0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d82  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013c0  00000000  00000000  00026dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  00028170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  00028980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ff66  00000000  00000000  000290d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000656f  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063139  00000000  00000000  0003f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a26e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000a2764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002aa0 	.word	0x08002aa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002aa0 	.word	0x08002aa0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f002 fa65 	bl	8002718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f8fa 	bl	800047a <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8c7 	bl	8000430 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000088 	.word	0x20000088

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000088 	.word	0x20000088

080002e0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	001a      	movs	r2, r3
 80002f2:	231f      	movs	r3, #31
 80002f4:	401a      	ands	r2, r3
 80002f6:	4b04      	ldr	r3, [pc, #16]	; (8000308 <NVIC_EnableIRQ+0x28>)
 80002f8:	2101      	movs	r1, #1
 80002fa:	4091      	lsls	r1, r2
 80002fc:	000a      	movs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b002      	add	sp, #8
 8000306:	bd80      	pop	{r7, pc}
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	0002      	movs	r2, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b7f      	cmp	r3, #127	; 0x7f
 8000320:	d932      	bls.n	8000388 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4a2f      	ldr	r2, [pc, #188]	; (80003e0 <NVIC_SetPriority+0xd4>)
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	0019      	movs	r1, r3
 800032a:	230f      	movs	r3, #15
 800032c:	400b      	ands	r3, r1
 800032e:	3b08      	subs	r3, #8
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	3306      	adds	r3, #6
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	18d3      	adds	r3, r2, r3
 8000338:	3304      	adds	r3, #4
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1dfa      	adds	r2, r7, #7
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	0011      	movs	r1, r2
 8000342:	2203      	movs	r2, #3
 8000344:	400a      	ands	r2, r1
 8000346:	00d2      	lsls	r2, r2, #3
 8000348:	21ff      	movs	r1, #255	; 0xff
 800034a:	4091      	lsls	r1, r2
 800034c:	000a      	movs	r2, r1
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	019b      	lsls	r3, r3, #6
 8000358:	22ff      	movs	r2, #255	; 0xff
 800035a:	401a      	ands	r2, r3
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	0018      	movs	r0, r3
 8000362:	2303      	movs	r3, #3
 8000364:	4003      	ands	r3, r0
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800036a:	481d      	ldr	r0, [pc, #116]	; (80003e0 <NVIC_SetPriority+0xd4>)
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	001c      	movs	r4, r3
 8000372:	230f      	movs	r3, #15
 8000374:	4023      	ands	r3, r4
 8000376:	3b08      	subs	r3, #8
 8000378:	089b      	lsrs	r3, r3, #2
 800037a:	430a      	orrs	r2, r1
 800037c:	3306      	adds	r3, #6
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	18c3      	adds	r3, r0, r3
 8000382:	3304      	adds	r3, #4
 8000384:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000386:	e027      	b.n	80003d8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <NVIC_SetPriority+0xd8>)
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b25b      	sxtb	r3, r3
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	33c0      	adds	r3, #192	; 0xc0
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	589b      	ldr	r3, [r3, r2]
 8000398:	1dfa      	adds	r2, r7, #7
 800039a:	7812      	ldrb	r2, [r2, #0]
 800039c:	0011      	movs	r1, r2
 800039e:	2203      	movs	r2, #3
 80003a0:	400a      	ands	r2, r1
 80003a2:	00d2      	lsls	r2, r2, #3
 80003a4:	21ff      	movs	r1, #255	; 0xff
 80003a6:	4091      	lsls	r1, r2
 80003a8:	000a      	movs	r2, r1
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	401a      	ands	r2, r3
 80003ae:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	019b      	lsls	r3, r3, #6
 80003b4:	22ff      	movs	r2, #255	; 0xff
 80003b6:	401a      	ands	r2, r3
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	0018      	movs	r0, r3
 80003be:	2303      	movs	r3, #3
 80003c0:	4003      	ands	r3, r0
 80003c2:	00db      	lsls	r3, r3, #3
 80003c4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <NVIC_SetPriority+0xd8>)
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	430a      	orrs	r2, r1
 80003d2:	33c0      	adds	r3, #192	; 0xc0
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	501a      	str	r2, [r3, r0]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b003      	add	sp, #12
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	e000ed00 	.word	0xe000ed00
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <SysTick_Config+0x40>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d901      	bls.n	80003fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2301      	movs	r3, #1
 80003fc:	e010      	b.n	8000420 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <SysTick_Config+0x44>)
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	3a01      	subs	r2, #1
 8000404:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000406:	2301      	movs	r3, #1
 8000408:	425b      	negs	r3, r3
 800040a:	2103      	movs	r1, #3
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff ff7d 	bl	800030c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <SysTick_Config+0x44>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <SysTick_Config+0x44>)
 800041a:	2207      	movs	r2, #7
 800041c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800041e:	2300      	movs	r3, #0
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	00ffffff 	.word	0x00ffffff
 800042c:	e000e010 	.word	0xe000e010

08000430 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
 800043a:	210f      	movs	r1, #15
 800043c:	187b      	adds	r3, r7, r1
 800043e:	1c02      	adds	r2, r0, #0
 8000440:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	187b      	adds	r3, r7, r1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b25b      	sxtb	r3, r3
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <NVIC_SetPriority>
}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b004      	add	sp, #16
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	0002      	movs	r2, r0
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b25b      	sxtb	r3, r3
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ff37 	bl	80002e0 <NVIC_EnableIRQ>
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ffaf 	bl	80003e8 <SysTick_Config>
 800048a:	0003      	movs	r3, r0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d101      	bne.n	80004a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e061      	b.n	800056a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a32      	ldr	r2, [pc, #200]	; (8000574 <HAL_DMA_Init+0xe0>)
 80004ac:	4694      	mov	ip, r2
 80004ae:	4463      	add	r3, ip
 80004b0:	2114      	movs	r1, #20
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff fe28 	bl	8000108 <__udivsi3>
 80004b8:	0003      	movs	r3, r0
 80004ba:	009a      	lsls	r2, r3, #2
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a2d      	ldr	r2, [pc, #180]	; (8000578 <HAL_DMA_Init+0xe4>)
 80004c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2225      	movs	r2, #37	; 0x25
 80004ca:	2102      	movs	r1, #2
 80004cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4a28      	ldr	r2, [pc, #160]	; (800057c <HAL_DMA_Init+0xe8>)
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80004e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	691b      	ldr	r3, [r3, #16]
 80004ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	4313      	orrs	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689a      	ldr	r2, [r3, #8]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	01db      	lsls	r3, r3, #7
 800051c:	429a      	cmp	r2, r3
 800051e:	d018      	beq.n	8000552 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <HAL_DMA_Init+0xec>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000528:	211c      	movs	r1, #28
 800052a:	400b      	ands	r3, r1
 800052c:	210f      	movs	r1, #15
 800052e:	4099      	lsls	r1, r3
 8000530:	000b      	movs	r3, r1
 8000532:	43d9      	mvns	r1, r3
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_DMA_Init+0xec>)
 8000536:	400a      	ands	r2, r1
 8000538:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_DMA_Init+0xec>)
 800053c:	6819      	ldr	r1, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000546:	201c      	movs	r0, #28
 8000548:	4003      	ands	r3, r0
 800054a:	409a      	lsls	r2, r3
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_DMA_Init+0xec>)
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2225      	movs	r2, #37	; 0x25
 800055c:	2101      	movs	r1, #1
 800055e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2224      	movs	r2, #36	; 0x24
 8000564:	2100      	movs	r1, #0
 8000566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	0018      	movs	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	bffdfff8 	.word	0xbffdfff8
 8000578:	40020000 	.word	0x40020000
 800057c:	ffff800f 	.word	0xffff800f
 8000580:	400200a8 	.word	0x400200a8

08000584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000592:	2317      	movs	r3, #23
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2224      	movs	r2, #36	; 0x24
 800059e:	5c9b      	ldrb	r3, [r3, r2]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d101      	bne.n	80005a8 <HAL_DMA_Start_IT+0x24>
 80005a4:	2302      	movs	r3, #2
 80005a6:	e04f      	b.n	8000648 <HAL_DMA_Start_IT+0xc4>
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2224      	movs	r2, #36	; 0x24
 80005ac:	2101      	movs	r1, #1
 80005ae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2225      	movs	r2, #37	; 0x25
 80005b4:	5c9b      	ldrb	r3, [r3, r2]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d13a      	bne.n	8000632 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2225      	movs	r2, #37	; 0x25
 80005c0:	2102      	movs	r1, #2
 80005c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	438a      	bics	r2, r1
 80005d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f8e3 	bl	80007ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	210e      	movs	r1, #14
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e00f      	b.n	8000620 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2104      	movs	r1, #4
 800060c:	438a      	bics	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	210a      	movs	r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	430a      	orrs	r2, r1
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e007      	b.n	8000642 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2224      	movs	r2, #36	; 0x24
 8000636:	2100      	movs	r1, #0
 8000638:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800063a:	2317      	movs	r3, #23
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2202      	movs	r2, #2
 8000640:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000642:	2317      	movs	r3, #23
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	781b      	ldrb	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b006      	add	sp, #24
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066c:	221c      	movs	r2, #28
 800066e:	4013      	ands	r3, r2
 8000670:	2204      	movs	r2, #4
 8000672:	409a      	lsls	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4013      	ands	r3, r2
 800067a:	d026      	beq.n	80006ca <HAL_DMA_IRQHandler+0x7a>
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	d022      	beq.n	80006ca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2220      	movs	r2, #32
 800068c:	4013      	ands	r3, r2
 800068e:	d107      	bne.n	80006a0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2104      	movs	r1, #4
 800069c:	438a      	bics	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a4:	221c      	movs	r2, #28
 80006a6:	401a      	ands	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	2104      	movs	r1, #4
 80006ae:	4091      	lsls	r1, r2
 80006b0:	000a      	movs	r2, r1
 80006b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d100      	bne.n	80006be <HAL_DMA_IRQHandler+0x6e>
 80006bc:	e071      	b.n	80007a2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	0010      	movs	r0, r2
 80006c6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80006c8:	e06b      	b.n	80007a2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	221c      	movs	r2, #28
 80006d0:	4013      	ands	r3, r2
 80006d2:	2202      	movs	r2, #2
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0013      	movs	r3, r2
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4013      	ands	r3, r2
 80006dc:	d02d      	beq.n	800073a <HAL_DMA_IRQHandler+0xea>
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2202      	movs	r2, #2
 80006e2:	4013      	ands	r3, r2
 80006e4:	d029      	beq.n	800073a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2220      	movs	r2, #32
 80006ee:	4013      	ands	r3, r2
 80006f0:	d10b      	bne.n	800070a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	210a      	movs	r1, #10
 80006fe:	438a      	bics	r2, r1
 8000700:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2225      	movs	r2, #37	; 0x25
 8000706:	2101      	movs	r1, #1
 8000708:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	221c      	movs	r2, #28
 8000710:	401a      	ands	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	2102      	movs	r1, #2
 8000718:	4091      	lsls	r1, r2
 800071a:	000a      	movs	r2, r1
 800071c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2224      	movs	r2, #36	; 0x24
 8000722:	2100      	movs	r1, #0
 8000724:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d039      	beq.n	80007a2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	0010      	movs	r0, r2
 8000736:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000738:	e033      	b.n	80007a2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	221c      	movs	r2, #28
 8000740:	4013      	ands	r3, r2
 8000742:	2208      	movs	r2, #8
 8000744:	409a      	lsls	r2, r3
 8000746:	0013      	movs	r3, r2
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4013      	ands	r3, r2
 800074c:	d02a      	beq.n	80007a4 <HAL_DMA_IRQHandler+0x154>
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	2208      	movs	r2, #8
 8000752:	4013      	ands	r3, r2
 8000754:	d026      	beq.n	80007a4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	210e      	movs	r1, #14
 8000762:	438a      	bics	r2, r1
 8000764:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	221c      	movs	r2, #28
 800076c:	401a      	ands	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	2101      	movs	r1, #1
 8000774:	4091      	lsls	r1, r2
 8000776:	000a      	movs	r2, r1
 8000778:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2225      	movs	r2, #37	; 0x25
 8000784:	2101      	movs	r1, #1
 8000786:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000794:	2b00      	cmp	r3, #0
 8000796:	d005      	beq.n	80007a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	0010      	movs	r0, r2
 80007a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46c0      	nop			; (mov r8, r8)
}
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b004      	add	sp, #16
 80007aa:	bd80      	pop	{r7, pc}

080007ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	221c      	movs	r2, #28
 80007c0:	401a      	ands	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2101      	movs	r1, #1
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b10      	cmp	r3, #16
 80007dc:	d108      	bne.n	80007f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80007ee:	e007      	b.n	8000800 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	60da      	str	r2, [r3, #12]
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b004      	add	sp, #16
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800081e:	e149      	b.n	8000ab4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <HAL_GPIO_Init+0x30>
 8000836:	e13a      	b.n	8000aae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x40>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b12      	cmp	r3, #18
 8000846:	d123      	bne.n	8000890 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	08da      	lsrs	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	58d3      	ldr	r3, [r2, r3]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2207      	movs	r2, #7
 800085a:	4013      	ands	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	220f      	movs	r2, #15
 8000860:	409a      	lsls	r2, r3
 8000862:	0013      	movs	r3, r2
 8000864:	43da      	mvns	r2, r3
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	2107      	movs	r1, #7
 8000874:	400b      	ands	r3, r1
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	409a      	lsls	r2, r3
 800087a:	0013      	movs	r3, r2
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	6939      	ldr	r1, [r7, #16]
 800088e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00b      	beq.n	80008b0 <HAL_GPIO_Init+0xa8>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d007      	beq.n	80008b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a4:	2b11      	cmp	r3, #17
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	409a      	lsls	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	43da      	mvns	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	409a      	lsls	r2, r3
 80008d2:	0013      	movs	r3, r2
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
 80008ec:	0013      	movs	r3, r2
 80008ee:	43da      	mvns	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	2201      	movs	r2, #1
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
 8000904:	0013      	movs	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	43da      	mvns	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2203      	movs	r2, #3
 8000930:	401a      	ands	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	409a      	lsls	r2, r3
 8000938:	0013      	movs	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	055b      	lsls	r3, r3, #21
 800097e:	4013      	ands	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_GPIO_Init+0x17c>
 8000982:	e094      	b.n	8000aae <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b51      	ldr	r3, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x2c4>)
 8000986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000988:	4b50      	ldr	r3, [pc, #320]	; (8000acc <HAL_GPIO_Init+0x2c4>)
 800098a:	2101      	movs	r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000990:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <HAL_GPIO_Init+0x2c8>)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	3302      	adds	r3, #2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	589b      	ldr	r3, [r3, r2]
 800099c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	409a      	lsls	r2, r3
 80009aa:	0013      	movs	r3, r2
 80009ac:	43da      	mvns	r2, r3
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x1de>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a44      	ldr	r2, [pc, #272]	; (8000ad4 <HAL_GPIO_Init+0x2cc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x1da>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a43      	ldr	r2, [pc, #268]	; (8000ad8 <HAL_GPIO_Init+0x2d0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x1d6>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a42      	ldr	r2, [pc, #264]	; (8000adc <HAL_GPIO_Init+0x2d4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x1d2>
 80009d6:	2305      	movs	r3, #5
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009da:	2306      	movs	r3, #6
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009de:	2302      	movs	r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x1e0>
 80009e6:	2300      	movs	r3, #0
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	2103      	movs	r1, #3
 80009ec:	400a      	ands	r2, r1
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4093      	lsls	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f8:	4935      	ldr	r1, [pc, #212]	; (8000ad0 <HAL_GPIO_Init+0x2c8>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a06:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	029b      	lsls	r3, r3, #10
 8000a48:	4013      	ands	r3, r2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	035b      	lsls	r3, r3, #13
 8000a72:	4013      	ands	r3, r2
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	039b      	lsls	r3, r3, #14
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_GPIO_Init+0x2d8>)
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	40da      	lsrs	r2, r3
 8000abc:	1e13      	subs	r3, r2, #0
 8000abe:	d000      	beq.n	8000ac2 <HAL_GPIO_Init+0x2ba>
 8000ac0:	e6ae      	b.n	8000820 <HAL_GPIO_Init+0x18>
  }
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b006      	add	sp, #24
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	50000400 	.word	0x50000400
 8000ad8:	50000800 	.word	0x50000800
 8000adc:	50001c00 	.word	0x50001c00
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	0008      	movs	r0, r1
 8000aee:	0011      	movs	r1, r2
 8000af0:	1cbb      	adds	r3, r7, #2
 8000af2:	1c02      	adds	r2, r0, #0
 8000af4:	801a      	strh	r2, [r3, #0]
 8000af6:	1c7b      	adds	r3, r7, #1
 8000af8:	1c0a      	adds	r2, r1, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000afc:	1c7b      	adds	r3, r7, #1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b04:	1cbb      	adds	r3, r7, #2
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000b0c:	e003      	b.n	8000b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000b0e:	1cbb      	adds	r3, r7, #2
 8000b10:	881a      	ldrh	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	000a      	movs	r2, r1
 8000b28:	1cbb      	adds	r3, r7, #2
 8000b2a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	1cbb      	adds	r3, r7, #2
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	405a      	eors	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	615a      	str	r2, [r3, #20]
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f000 fb6a 	bl	800122c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b58:	4bc7      	ldr	r3, [pc, #796]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b62:	4bc5      	ldr	r3, [pc, #788]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	d100      	bne.n	8000b7a <HAL_RCC_OscConfig+0x36>
 8000b78:	e07d      	b.n	8000c76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d007      	beq.n	8000b90 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d112      	bne.n	8000bac <HAL_RCC_OscConfig+0x68>
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d10d      	bne.n	8000bac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b90:	4bb9      	ldr	r3, [pc, #740]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	029b      	lsls	r3, r3, #10
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <HAL_RCC_OscConfig+0x5a>
 8000b9c:	e06a      	b.n	8000c74 <HAL_RCC_OscConfig+0x130>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d166      	bne.n	8000c74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f000 fb40 	bl	800122c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d107      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x84>
 8000bb8:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4bae      	ldr	r3, [pc, #696]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	0249      	lsls	r1, r1, #9
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e027      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	23a0      	movs	r3, #160	; 0xa0
 8000bce:	02db      	lsls	r3, r3, #11
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d10e      	bne.n	8000bf2 <HAL_RCC_OscConfig+0xae>
 8000bd4:	4ba8      	ldr	r3, [pc, #672]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4ba7      	ldr	r3, [pc, #668]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	02c9      	lsls	r1, r1, #11
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4ba5      	ldr	r3, [pc, #660]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4ba4      	ldr	r3, [pc, #656]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0249      	lsls	r1, r1, #9
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e012      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bf2:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4ba0      	ldr	r3, [pc, #640]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000bf8:	49a0      	ldr	r1, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x338>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	4b9e      	ldr	r3, [pc, #632]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	4013      	ands	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c12:	499b      	ldr	r1, [pc, #620]	; (8000e80 <HAL_RCC_OscConfig+0x33c>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d014      	beq.n	8000c4a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fb54 	bl	80002cc <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c28:	e008      	b.n	8000c3c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2a:	f7ff fb4f 	bl	80002cc <HAL_GetTick>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b64      	cmp	r3, #100	; 0x64
 8000c36:	d901      	bls.n	8000c3c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e2f7      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c3c:	4b8e      	ldr	r3, [pc, #568]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	d0f0      	beq.n	8000c2a <HAL_RCC_OscConfig+0xe6>
 8000c48:	e015      	b.n	8000c76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fb3f 	bl	80002cc <HAL_GetTick>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c54:	f7ff fb3a 	bl	80002cc <HAL_GetTick>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b64      	cmp	r3, #100	; 0x64
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e2e2      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c66:	4b84      	ldr	r3, [pc, #528]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	029b      	lsls	r3, r3, #10
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x110>
 8000c72:	e000      	b.n	8000c76 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d100      	bne.n	8000c82 <HAL_RCC_OscConfig+0x13e>
 8000c80:	e098      	b.n	8000db4 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d009      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000c90:	4b79      	ldr	r3, [pc, #484]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000c96:	2120      	movs	r1, #32
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	4393      	bics	r3, r2
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	2b0c      	cmp	r3, #12
 8000cae:	d13d      	bne.n	8000d2c <HAL_RCC_OscConfig+0x1e8>
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d13a      	bne.n	8000d2c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d004      	beq.n	8000cca <HAL_RCC_OscConfig+0x186>
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e2b0      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b6b      	ldr	r3, [pc, #428]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a6d      	ldr	r2, [pc, #436]	; (8000e84 <HAL_RCC_OscConfig+0x340>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	021a      	lsls	r2, r3, #8
 8000cda:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	4393      	bics	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	4b63      	ldr	r3, [pc, #396]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cf2:	f000 fbcb 	bl	800148c <HAL_RCC_GetSysClockFreq>
 8000cf6:	0001      	movs	r1, r0
 8000cf8:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	220f      	movs	r2, #15
 8000d00:	4013      	ands	r3, r2
 8000d02:	4a61      	ldr	r2, [pc, #388]	; (8000e88 <HAL_RCC_OscConfig+0x344>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	000a      	movs	r2, r1
 8000d08:	40da      	lsrs	r2, r3
 8000d0a:	4b60      	ldr	r3, [pc, #384]	; (8000e8c <HAL_RCC_OscConfig+0x348>)
 8000d0c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d0e:	2513      	movs	r5, #19
 8000d10:	197c      	adds	r4, r7, r5
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff faa4 	bl	8000260 <HAL_InitTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000d1c:	197b      	adds	r3, r7, r5
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d047      	beq.n	8000db4 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8000d24:	2313      	movs	r3, #19
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	e27f      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d027      	beq.n	8000d82 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2209      	movs	r2, #9
 8000d38:	4393      	bics	r3, r2
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fac2 	bl	80002cc <HAL_GetTick>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fabd 	bl	80002cc <HAL_GetTick>
 8000d52:	0002      	movs	r2, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e265      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d60:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2204      	movs	r2, #4
 8000d66:	4013      	ands	r3, r2
 8000d68:	d0f1      	beq.n	8000d4e <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_RCC_OscConfig+0x340>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	0019      	movs	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	021a      	lsls	r2, r3, #8
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	e018      	b.n	8000db4 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	438a      	bics	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fa9d 	bl	80002cc <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fa98 	bl	80002cc <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e240      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2204      	movs	r2, #4
 8000db0:	4013      	ands	r3, r2
 8000db2:	d1f1      	bne.n	8000d98 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2210      	movs	r2, #16
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d100      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x27c>
 8000dbe:	e09e      	b.n	8000efe <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d13f      	bne.n	8000e46 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d005      	beq.n	8000dde <HAL_RCC_OscConfig+0x29a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e226      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a2b      	ldr	r2, [pc, #172]	; (8000e90 <HAL_RCC_OscConfig+0x34c>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	0019      	movs	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000dee:	430a      	orrs	r2, r1
 8000df0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	0a19      	lsrs	r1, r3, #8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	061a      	lsls	r2, r3, #24
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000e02:	430a      	orrs	r2, r1
 8000e04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	0b5b      	lsrs	r3, r3, #13
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	0212      	lsls	r2, r2, #8
 8000e12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	491a      	ldr	r1, [pc, #104]	; (8000e88 <HAL_RCC_OscConfig+0x344>)
 8000e20:	5ccb      	ldrb	r3, [r1, r3]
 8000e22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_RCC_OscConfig+0x348>)
 8000e26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e28:	2513      	movs	r5, #19
 8000e2a:	197c      	adds	r4, r7, r5
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fa17 	bl	8000260 <HAL_InitTick>
 8000e32:	0003      	movs	r3, r0
 8000e34:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000e36:	197b      	adds	r3, r7, r5
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d05f      	beq.n	8000efe <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8000e3e:	2313      	movs	r3, #19
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	e1f2      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d03d      	beq.n	8000eca <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_RCC_OscConfig+0x334>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0049      	lsls	r1, r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fa36 	bl	80002cc <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e64:	e016      	b.n	8000e94 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fa31 	bl	80002cc <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d90f      	bls.n	8000e94 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1d9      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	fffeffff 	.word	0xfffeffff
 8000e80:	fffbffff 	.word	0xfffbffff
 8000e84:	ffffe0ff 	.word	0xffffe0ff
 8000e88:	08002ab8 	.word	0x08002ab8
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e94:	4bca      	ldr	r3, [pc, #808]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d0e2      	beq.n	8000e66 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea0:	4bc7      	ldr	r3, [pc, #796]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4ac7      	ldr	r2, [pc, #796]	; (80011c4 <HAL_RCC_OscConfig+0x680>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	4bc4      	ldr	r3, [pc, #784]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb4:	4bc2      	ldr	r3, [pc, #776]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	0a19      	lsrs	r1, r3, #8
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	061a      	lsls	r2, r3, #24
 8000ec2:	4bbf      	ldr	r3, [pc, #764]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	e019      	b.n	8000efe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eca:	4bbd      	ldr	r3, [pc, #756]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4bbc      	ldr	r3, [pc, #752]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ed0:	49bd      	ldr	r1, [pc, #756]	; (80011c8 <HAL_RCC_OscConfig+0x684>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff f9f9 	bl	80002cc <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee0:	f7ff f9f4 	bl	80002cc <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e19c      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ef2:	4bb3      	ldr	r3, [pc, #716]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2208      	movs	r2, #8
 8000f04:	4013      	ands	r3, r2
 8000f06:	d036      	beq.n	8000f76 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d019      	beq.n	8000f44 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f10:	4bab      	ldr	r3, [pc, #684]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f14:	4baa      	ldr	r3, [pc, #680]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff f9d6 	bl	80002cc <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f26:	f7ff f9d1 	bl	80002cc <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e179      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f38:	4ba1      	ldr	r3, [pc, #644]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d0f1      	beq.n	8000f26 <HAL_RCC_OscConfig+0x3e2>
 8000f42:	e018      	b.n	8000f76 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f44:	4b9e      	ldr	r3, [pc, #632]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f48:	4b9d      	ldr	r3, [pc, #628]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	438a      	bics	r2, r1
 8000f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff f9bc 	bl	80002cc <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5a:	f7ff f9b7 	bl	80002cc <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e15f      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f6c:	4b94      	ldr	r3, [pc, #592]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d1f1      	bne.n	8000f5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <HAL_RCC_OscConfig+0x43e>
 8000f80:	e0af      	b.n	80010e2 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f82:	2323      	movs	r3, #35	; 0x23
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8a:	4b8d      	ldr	r3, [pc, #564]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	055b      	lsls	r3, r3, #21
 8000f92:	4013      	ands	r3, r2
 8000f94:	d10a      	bne.n	8000fac <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b8a      	ldr	r3, [pc, #552]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f9a:	4b89      	ldr	r3, [pc, #548]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0549      	lsls	r1, r1, #21
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000fa4:	2323      	movs	r3, #35	; 0x23
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	4b87      	ldr	r3, [pc, #540]	; (80011cc <HAL_RCC_OscConfig+0x688>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d11a      	bne.n	8000fee <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <HAL_RCC_OscConfig+0x688>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b83      	ldr	r3, [pc, #524]	; (80011cc <HAL_RCC_OscConfig+0x688>)
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	0049      	lsls	r1, r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff f981 	bl	80002cc <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd0:	f7ff f97c 	bl	80002cc <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e124      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x688>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4013      	ands	r3, r2
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d107      	bne.n	800100a <HAL_RCC_OscConfig+0x4c6>
 8000ffa:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8000ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ffe:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0049      	lsls	r1, r1, #1
 8001004:	430a      	orrs	r2, r1
 8001006:	651a      	str	r2, [r3, #80]	; 0x50
 8001008:	e031      	b.n	800106e <HAL_RCC_OscConfig+0x52a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x4e8>
 8001012:	4b6b      	ldr	r3, [pc, #428]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001016:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001018:	496b      	ldr	r1, [pc, #428]	; (80011c8 <HAL_RCC_OscConfig+0x684>)
 800101a:	400a      	ands	r2, r1
 800101c:	651a      	str	r2, [r3, #80]	; 0x50
 800101e:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001022:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001024:	496a      	ldr	r1, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x68c>)
 8001026:	400a      	ands	r2, r1
 8001028:	651a      	str	r2, [r3, #80]	; 0x50
 800102a:	e020      	b.n	800106e <HAL_RCC_OscConfig+0x52a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	429a      	cmp	r2, r3
 8001036:	d10e      	bne.n	8001056 <HAL_RCC_OscConfig+0x512>
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800103a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	00c9      	lsls	r1, r1, #3
 8001042:	430a      	orrs	r2, r1
 8001044:	651a      	str	r2, [r3, #80]	; 0x50
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0049      	lsls	r1, r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	651a      	str	r2, [r3, #80]	; 0x50
 8001054:	e00b      	b.n	800106e <HAL_RCC_OscConfig+0x52a>
 8001056:	4b5a      	ldr	r3, [pc, #360]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800105c:	495a      	ldr	r1, [pc, #360]	; (80011c8 <HAL_RCC_OscConfig+0x684>)
 800105e:	400a      	ands	r2, r1
 8001060:	651a      	str	r2, [r3, #80]	; 0x50
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001068:	4959      	ldr	r1, [pc, #356]	; (80011d0 <HAL_RCC_OscConfig+0x68c>)
 800106a:	400a      	ands	r2, r1
 800106c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d015      	beq.n	80010a2 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff f929 	bl	80002cc <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800107e:	e009      	b.n	8001094 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001080:	f7ff f924 	bl	80002cc <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_RCC_OscConfig+0x690>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e0cb      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0ef      	beq.n	8001080 <HAL_RCC_OscConfig+0x53c>
 80010a0:	e014      	b.n	80010cc <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a2:	f7ff f913 	bl	80002cc <HAL_GetTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010aa:	e009      	b.n	80010c0 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff f90e 	bl	80002cc <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <HAL_RCC_OscConfig+0x690>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e0b5      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 80010c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d1ef      	bne.n	80010ac <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010cc:	2323      	movs	r3, #35	; 0x23
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d105      	bne.n	80010e2 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 80010d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 80010dc:	493e      	ldr	r1, [pc, #248]	; (80011d8 <HAL_RCC_OscConfig+0x694>)
 80010de:	400a      	ands	r2, r1
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d100      	bne.n	80010ec <HAL_RCC_OscConfig+0x5a8>
 80010ea:	e09e      	b.n	800122a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d100      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5b0>
 80010f2:	e077      	b.n	80011e4 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d145      	bne.n	8001188 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001102:	4936      	ldr	r1, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x698>)
 8001104:	400a      	ands	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff f8e0 	bl	80002cc <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff f8db 	bl	80002cc <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e083      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	049b      	lsls	r3, r3, #18
 800112c:	4013      	ands	r3, r2
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x69c>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	431a      	orrs	r2, r3
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800114c:	430a      	orrs	r2, r1
 800114e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0449      	lsls	r1, r1, #17
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff f8b5 	bl	80002cc <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff f8b0 	bl	80002cc <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e058      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	049b      	lsls	r3, r3, #18
 8001182:	4013      	ands	r3, r2
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x624>
 8001186:	e050      	b.n	800122a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 800118e:	4913      	ldr	r1, [pc, #76]	; (80011dc <HAL_RCC_OscConfig+0x698>)
 8001190:	400a      	ands	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff f89a 	bl	80002cc <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff f895 	bl	80002cc <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e03d      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_RCC_OscConfig+0x67c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	049b      	lsls	r3, r3, #18
 80011b8:	4013      	ands	r3, r2
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x65a>
 80011bc:	e035      	b.n	800122a <HAL_RCC_OscConfig+0x6e6>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40021000 	.word	0x40021000
 80011c4:	ffff1fff 	.word	0xffff1fff
 80011c8:	fffffeff 	.word	0xfffffeff
 80011cc:	40007000 	.word	0x40007000
 80011d0:	fffffbff 	.word	0xfffffbff
 80011d4:	00001388 	.word	0x00001388
 80011d8:	efffffff 	.word	0xefffffff
 80011dc:	feffffff 	.word	0xfeffffff
 80011e0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_RCC_OscConfig+0x6f0>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	401a      	ands	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	429a      	cmp	r2, r3
 8001204:	d10f      	bne.n	8001226 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	23f0      	movs	r3, #240	; 0xf0
 800120a:	039b      	lsls	r3, r3, #14
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	401a      	ands	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b00a      	add	sp, #40	; 0x28
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e10d      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d911      	bls.n	800127e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4393      	bics	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126c:	4b80      	ldr	r3, [pc, #512]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d001      	beq.n	800127e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0f4      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d009      	beq.n	800129c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	22f0      	movs	r2, #240	; 0xf0
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b77      	ldr	r3, [pc, #476]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001298:	430a      	orrs	r2, r1
 800129a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4013      	ands	r3, r2
 80012a4:	d100      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x70>
 80012a6:	e089      	b.n	80013bc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b0:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	d120      	bne.n	80012fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d3      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d107      	bne.n	80012d8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	049b      	lsls	r3, r3, #18
 80012d0:	4013      	ands	r3, r2
 80012d2:	d114      	bne.n	80012fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0c7      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e0:	4b64      	ldr	r3, [pc, #400]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0bc      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012ee:	4b61      	ldr	r3, [pc, #388]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4013      	ands	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0b4      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2203      	movs	r2, #3
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b59      	ldr	r3, [pc, #356]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001312:	f7fe ffdb 	bl	80002cc <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d111      	bne.n	8001346 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001322:	e009      	b.n	8001338 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001324:	f7fe ffd2 	bl	80002cc <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_RCC_ClockConfig+0x240>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e097      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001338:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	220c      	movs	r2, #12
 800133e:	4013      	ands	r3, r2
 8001340:	2b08      	cmp	r3, #8
 8001342:	d1ef      	bne.n	8001324 <HAL_RCC_ClockConfig+0xec>
 8001344:	e03a      	b.n	80013bc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d111      	bne.n	8001372 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134e:	e009      	b.n	8001364 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7fe ffbc 	bl	80002cc <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_RCC_ClockConfig+0x240>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e081      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	220c      	movs	r2, #12
 800136a:	4013      	ands	r3, r2
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d1ef      	bne.n	8001350 <HAL_RCC_ClockConfig+0x118>
 8001370:	e024      	b.n	80013bc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d11b      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800137a:	e009      	b.n	8001390 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f7fe ffa6 	bl	80002cc <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_RCC_ClockConfig+0x240>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e06b      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	220c      	movs	r2, #12
 8001396:	4013      	ands	r3, r2
 8001398:	2b04      	cmp	r3, #4
 800139a:	d1ef      	bne.n	800137c <HAL_RCC_ClockConfig+0x144>
 800139c:	e00e      	b.n	80013bc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139e:	f7fe ff95 	bl	80002cc <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <HAL_RCC_ClockConfig+0x240>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e05a      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	220c      	movs	r2, #12
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d211      	bcs.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_ClockConfig+0x238>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e03c      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d009      	beq.n	800140c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_RCC_ClockConfig+0x244>)
 80013fe:	4013      	ands	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2208      	movs	r2, #8
 8001412:	4013      	ands	r3, r2
 8001414:	d00a      	beq.n	800142c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_RCC_ClockConfig+0x248>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00da      	lsls	r2, r3, #3
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800142c:	f000 f82e 	bl	800148c <HAL_RCC_GetSysClockFreq>
 8001430:	0001      	movs	r1, r0
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_RCC_ClockConfig+0x23c>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	220f      	movs	r2, #15
 800143a:	4013      	ands	r3, r2
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_RCC_ClockConfig+0x24c>)
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	000a      	movs	r2, r1
 8001442:	40da      	lsrs	r2, r3
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_RCC_ClockConfig+0x250>)
 8001446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001448:	250b      	movs	r5, #11
 800144a:	197c      	adds	r4, r7, r5
 800144c:	2000      	movs	r0, #0
 800144e:	f7fe ff07 	bl	8000260 <HAL_InitTick>
 8001452:	0003      	movs	r3, r0
 8001454:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001456:	197b      	adds	r3, r7, r5
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800145e:	230b      	movs	r3, #11
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	e000      	b.n	8001468 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bdb0      	pop	{r4, r5, r7, pc}
 8001470:	40022000 	.word	0x40022000
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	fffff8ff 	.word	0xfffff8ff
 8001480:	ffffc7ff 	.word	0xffffc7ff
 8001484:	08002ab8 	.word	0x08002ab8
 8001488:	20000000 	.word	0x20000000

0800148c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	220c      	movs	r2, #12
 800149c:	4013      	ands	r3, r2
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d00e      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x34>
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d00f      	beq.n	80014c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d157      	bne.n	800155a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	4013      	ands	r3, r2
 80014b2:	d002      	beq.n	80014ba <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014b6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80014b8:	e05d      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014bc:	613b      	str	r3, [r7, #16]
      break;
 80014be:	e05a      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_RCC_GetSysClockFreq+0x100>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	e057      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	220f      	movs	r2, #15
 80014cc:	4013      	ands	r3, r2
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_RCC_GetSysClockFreq+0x104>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	0d9b      	lsrs	r3, r3, #22
 80014d8:	2203      	movs	r2, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	3301      	adds	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	025b      	lsls	r3, r3, #9
 80014e8:	4013      	ands	r3, r2
 80014ea:	d00f      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	000a      	movs	r2, r1
 80014f0:	0152      	lsls	r2, r2, #5
 80014f2:	1a52      	subs	r2, r2, r1
 80014f4:	0193      	lsls	r3, r2, #6
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	185b      	adds	r3, r3, r1
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f7fe fe01 	bl	8000108 <__udivsi3>
 8001506:	0003      	movs	r3, r0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e023      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_GetSysClockFreq+0xf4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2210      	movs	r2, #16
 8001512:	4013      	ands	r3, r2
 8001514:	d00f      	beq.n	8001536 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	000a      	movs	r2, r1
 800151a:	0152      	lsls	r2, r2, #5
 800151c:	1a52      	subs	r2, r2, r1
 800151e:	0193      	lsls	r3, r2, #6
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	185b      	adds	r3, r3, r1
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fdec 	bl	8000108 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e00e      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	000a      	movs	r2, r1
 800153a:	0152      	lsls	r2, r2, #5
 800153c:	1a52      	subs	r2, r2, r1
 800153e:	0193      	lsls	r3, r2, #6
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	185b      	adds	r3, r3, r1
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	0018      	movs	r0, r3
 800154c:	f7fe fddc 	bl	8000108 <__udivsi3>
 8001550:	0003      	movs	r3, r0
 8001552:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
      break;
 8001558:	e00d      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_GetSysClockFreq+0xf4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0b5b      	lsrs	r3, r3, #13
 8001560:	2207      	movs	r2, #7
 8001562:	4013      	ands	r3, r2
 8001564:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	0212      	lsls	r2, r2, #8
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      break;
 8001574:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001576:	693b      	ldr	r3, [r7, #16]
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	003d0900 	.word	0x003d0900
 8001588:	00f42400 	.word	0x00f42400
 800158c:	007a1200 	.word	0x007a1200
 8001590:	08002ac8 	.word	0x08002ac8

08001594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01e      	b.n	80015e4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2239      	movs	r2, #57	; 0x39
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2238      	movs	r2, #56	; 0x38
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0018      	movs	r0, r3
 80015be:	f001 f8bf 	bl	8002740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2239      	movs	r2, #57	; 0x39
 80015c6:	2102      	movs	r1, #2
 80015c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	0019      	movs	r1, r3
 80015d4:	0010      	movs	r0, r2
 80015d6:	f000 fb39 	bl	8001c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2239      	movs	r2, #57	; 0x39
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e01e      	b.n	800163c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2239      	movs	r2, #57	; 0x39
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2238      	movs	r2, #56	; 0x38
 800160e:	2100      	movs	r1, #0
 8001610:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f000 f815 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2239      	movs	r2, #57	; 0x39
 800161e:	2102      	movs	r1, #2
 8001620:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	0019      	movs	r1, r3
 800162c:	0010      	movs	r0, r2
 800162e:	f000 fb0d 	bl	8001c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2239      	movs	r2, #57	; 0x39
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	001a      	movs	r2, r3
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2239      	movs	r2, #57	; 0x39
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d101      	bne.n	8001676 <HAL_TIM_PWM_Start_DMA+0x22>
  {
    return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
 8001674:	e0cc      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2239      	movs	r2, #57	; 0x39
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10c      	bne.n	800169c <HAL_TIM_PWM_Start_DMA+0x48>
  {
    if ((pData == NULL) && (Length > 0U))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_TIM_PWM_Start_DMA+0x40>
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_TIM_PWM_Start_DMA+0x40>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0bd      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2239      	movs	r2, #57	; 0x39
 8001698:	2102      	movs	r1, #2
 800169a:	5499      	strb	r1, [r3, r2]
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d02e      	beq.n	8001700 <HAL_TIM_PWM_Start_DMA+0xac>
 80016a2:	d802      	bhi.n	80016aa <HAL_TIM_PWM_Start_DMA+0x56>
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_TIM_PWM_Start_DMA+0x62>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 80016a8:	e099      	b.n	80017de <HAL_TIM_PWM_Start_DMA+0x18a>
  switch (Channel)
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d04d      	beq.n	800174a <HAL_TIM_PWM_Start_DMA+0xf6>
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d100      	bne.n	80016b4 <HAL_TIM_PWM_Start_DMA+0x60>
 80016b2:	e06f      	b.n	8001794 <HAL_TIM_PWM_Start_DMA+0x140>
      break;
 80016b4:	e093      	b.n	80017de <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a56      	ldr	r2, [pc, #344]	; (800181c <HAL_TIM_PWM_Start_DMA+0x1c8>)
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a55      	ldr	r2, [pc, #340]	; (8001820 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80016cc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a18      	ldr	r0, [r3, #32]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3334      	adds	r3, #52	; 0x34
 80016da:	001a      	movs	r2, r3
 80016dc:	1cbb      	adds	r3, r7, #2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f7fe ff50 	bl	8000584 <HAL_DMA_Start_IT>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d001      	beq.n	80016ec <HAL_TIM_PWM_Start_DMA+0x98>
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e091      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0089      	lsls	r1, r1, #2
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
      break;
 80016fe:	e06e      	b.n	80017de <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <HAL_TIM_PWM_Start_DMA+0x1c8>)
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3338      	adds	r3, #56	; 0x38
 8001724:	001a      	movs	r2, r3
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f7fe ff2b 	bl	8000584 <HAL_DMA_Start_IT>
 800172e:	1e03      	subs	r3, r0, #0
 8001730:	d001      	beq.n	8001736 <HAL_TIM_PWM_Start_DMA+0xe2>
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06c      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	00c9      	lsls	r1, r1, #3
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]
      break;
 8001748:	e049      	b.n	80017de <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_TIM_PWM_Start_DMA+0x1c8>)
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	333c      	adds	r3, #60	; 0x3c
 800176e:	001a      	movs	r2, r3
 8001770:	1cbb      	adds	r3, r7, #2
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f7fe ff06 	bl	8000584 <HAL_DMA_Start_IT>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <HAL_TIM_PWM_Start_DMA+0x12c>
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e047      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
      break;
 8001792:	e024      	b.n	80017de <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_TIM_PWM_Start_DMA+0x1c8>)
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3340      	adds	r3, #64	; 0x40
 80017b8:	001a      	movs	r2, r3
 80017ba:	1cbb      	adds	r3, r7, #2
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f7fe fee1 	bl	8000584 <HAL_DMA_Start_IT>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <HAL_TIM_PWM_Start_DMA+0x176>
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e022      	b.n	8001810 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0149      	lsls	r1, r1, #5
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
      break;
 80017dc:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	2201      	movs	r2, #1
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 fc22 	bl	8002030 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2207      	movs	r2, #7
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d007      	beq.n	800180e <HAL_TIM_PWM_Start_DMA+0x1ba>
  {
    __HAL_TIM_ENABLE(htim);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b006      	add	sp, #24
 8001816:	bd80      	pop	{r7, pc}
 8001818:	08001b67 	.word	0x08001b67
 800181c:	08001bd9 	.word	0x08001bd9
 8001820:	08001b41 	.word	0x08001b41

08001824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	5c9b      	ldrb	r3, [r3, r2]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800183a:	2302      	movs	r3, #2
 800183c:	e0a4      	b.n	8001988 <HAL_TIM_PWM_ConfigChannel+0x164>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2238      	movs	r2, #56	; 0x38
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2239      	movs	r2, #57	; 0x39
 800184a:	2102      	movs	r1, #2
 800184c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d029      	beq.n	80018a8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001854:	d802      	bhi.n	800185c <HAL_TIM_PWM_ConfigChannel+0x38>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800185a:	e08c      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800185c:	2b08      	cmp	r3, #8
 800185e:	d046      	beq.n	80018ee <HAL_TIM_PWM_ConfigChannel+0xca>
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d065      	beq.n	8001930 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8001864:	e087      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fa40 	bl	8001cf4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2108      	movs	r1, #8
 8001880:	430a      	orrs	r2, r1
 8001882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2104      	movs	r1, #4
 8001890:	438a      	bics	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6999      	ldr	r1, [r3, #24]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	619a      	str	r2, [r3, #24]
      break;
 80018a6:	e066      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fa5b 	bl	8001d6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0109      	lsls	r1, r1, #4
 80018c4:	430a      	orrs	r2, r1
 80018c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	492f      	ldr	r1, [pc, #188]	; (8001990 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6999      	ldr	r1, [r3, #24]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	021a      	lsls	r2, r3, #8
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	619a      	str	r2, [r3, #24]
      break;
 80018ec:	e043      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fa7a 	bl	8001df0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2108      	movs	r1, #8
 8001908:	430a      	orrs	r2, r1
 800190a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69d9      	ldr	r1, [r3, #28]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	61da      	str	r2, [r3, #28]
      break;
 800192e:	e022      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fa99 	bl	8001e70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0109      	lsls	r1, r1, #4
 800194c:	430a      	orrs	r2, r1
 800194e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	490d      	ldr	r1, [pc, #52]	; (8001990 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800195c:	400a      	ands	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69d9      	ldr	r1, [r3, #28]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	021a      	lsls	r2, r3, #8
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
      break;
 8001974:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2239      	movs	r2, #57	; 0x39
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2238      	movs	r2, #56	; 0x38
 8001982:	2100      	movs	r1, #0
 8001984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	fffffbff 	.word	0xfffffbff

08001994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2238      	movs	r2, #56	; 0x38
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_TIM_ConfigClockSource+0x18>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0ab      	b.n	8001b04 <HAL_TIM_ConfigClockSource+0x170>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2238      	movs	r2, #56	; 0x38
 80019b0:	2101      	movs	r1, #1
 80019b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2239      	movs	r2, #57	; 0x39
 80019b8:	2102      	movs	r1, #2
 80019ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2277      	movs	r2, #119	; 0x77
 80019c8:	4393      	bics	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a4f      	ldr	r2, [pc, #316]	; (8001b0c <HAL_TIM_ConfigClockSource+0x178>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d100      	bne.n	80019e6 <HAL_TIM_ConfigClockSource+0x52>
 80019e4:	e06b      	b.n	8001abe <HAL_TIM_ConfigClockSource+0x12a>
 80019e6:	d80e      	bhi.n	8001a06 <HAL_TIM_ConfigClockSource+0x72>
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d100      	bne.n	80019ee <HAL_TIM_ConfigClockSource+0x5a>
 80019ec:	e077      	b.n	8001ade <HAL_TIM_ConfigClockSource+0x14a>
 80019ee:	d803      	bhi.n	80019f8 <HAL_TIM_ConfigClockSource+0x64>
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d100      	bne.n	80019f6 <HAL_TIM_ConfigClockSource+0x62>
 80019f4:	e073      	b.n	8001ade <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80019f6:	e07c      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d100      	bne.n	80019fe <HAL_TIM_ConfigClockSource+0x6a>
 80019fc:	e06f      	b.n	8001ade <HAL_TIM_ConfigClockSource+0x14a>
 80019fe:	2b30      	cmp	r3, #48	; 0x30
 8001a00:	d100      	bne.n	8001a04 <HAL_TIM_ConfigClockSource+0x70>
 8001a02:	e06c      	b.n	8001ade <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001a04:	e075      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a06:	2b70      	cmp	r3, #112	; 0x70
 8001a08:	d00e      	beq.n	8001a28 <HAL_TIM_ConfigClockSource+0x94>
 8001a0a:	d804      	bhi.n	8001a16 <HAL_TIM_ConfigClockSource+0x82>
 8001a0c:	2b50      	cmp	r3, #80	; 0x50
 8001a0e:	d036      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0xea>
 8001a10:	2b60      	cmp	r3, #96	; 0x60
 8001a12:	d044      	beq.n	8001a9e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001a14:	e06d      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0152      	lsls	r2, r2, #5
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d068      	beq.n	8001af0 <HAL_TIM_ConfigClockSource+0x15c>
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0192      	lsls	r2, r2, #6
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d017      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001a26:	e064      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f000 fada 	bl	8001ff0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2277      	movs	r2, #119	; 0x77
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]
      break;
 8001a54:	e04d      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f000 fac3 	bl	8001ff0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	01c9      	lsls	r1, r1, #7
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
      break;
 8001a7c:	e039      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	f000 fa36 	bl	8001efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2150      	movs	r1, #80	; 0x50
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fa90 	bl	8001fbc <TIM_ITRx_SetConfig>
      break;
 8001a9c:	e029      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	001a      	movs	r2, r3
 8001aac:	f000 fa54 	bl	8001f58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2160      	movs	r1, #96	; 0x60
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 fa80 	bl	8001fbc <TIM_ITRx_SetConfig>
      break;
 8001abc:	e019      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	001a      	movs	r2, r3
 8001acc:	f000 fa16 	bl	8001efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fa70 	bl	8001fbc <TIM_ITRx_SetConfig>
      break;
 8001adc:	e009      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	0010      	movs	r0, r2
 8001aea:	f000 fa67 	bl	8001fbc <TIM_ITRx_SetConfig>
      break;
 8001aee:	e000      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001af0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2239      	movs	r2, #57	; 0x39
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2238      	movs	r2, #56	; 0x38
 8001afe:	2100      	movs	r1, #0
 8001b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	ffff00ff 	.word	0xffff00ff

08001b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2239      	movs	r2, #57	; 0x39
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ffe9 	bl	8001b30 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2239      	movs	r2, #57	; 0x39
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d103      	bne.n	8001b8e <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	761a      	strb	r2, [r3, #24]
 8001b8c:	e019      	b.n	8001bc2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d103      	bne.n	8001ba0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	761a      	strb	r2, [r3, #24]
 8001b9e:	e010      	b.n	8001bc2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d103      	bne.n	8001bb2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2204      	movs	r2, #4
 8001bae:	761a      	strb	r2, [r3, #24]
 8001bb0:	e007      	b.n	8001bc2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d102      	bne.n	8001bc2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff ffa3 	bl	8001b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2239      	movs	r2, #57	; 0x39
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d103      	bne.n	8001c00 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	761a      	strb	r2, [r3, #24]
 8001bfe:	e019      	b.n	8001c34 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d103      	bne.n	8001c12 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	761a      	strb	r2, [r3, #24]
 8001c10:	e010      	b.n	8001c34 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d103      	bne.n	8001c24 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	761a      	strb	r2, [r3, #24]
 8001c22:	e007      	b.n	8001c34 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d102      	bne.n	8001c34 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2208      	movs	r2, #8
 8001c32:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff ff72 	bl	8001b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	761a      	strb	r2, [r3, #24]
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d007      	beq.n	8001c76 <TIM_Base_SetConfig+0x2a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <TIM_Base_SetConfig+0x9c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d003      	beq.n	8001c76 <TIM_Base_SetConfig+0x2a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <TIM_Base_SetConfig+0xa0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d108      	bne.n	8001c88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2270      	movs	r2, #112	; 0x70
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0x56>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <TIM_Base_SetConfig+0x9c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0x56>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <TIM_Base_SetConfig+0xa0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <TIM_Base_SetConfig+0xa4>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	4393      	bics	r3, r2
 8001cba:	001a      	movs	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	615a      	str	r2, [r3, #20]
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	fffffcff 	.word	0xfffffcff

08001cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2201      	movs	r2, #1
 8001d04:	4393      	bics	r3, r2
 8001d06:	001a      	movs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2270      	movs	r2, #112	; 0x70
 8001d22:	4393      	bics	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	621a      	str	r2, [r3, #32]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b006      	add	sp, #24
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	001a      	movs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <TIM_OC2_SetConfig+0x7c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <TIM_OC2_SetConfig+0x80>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2220      	movs	r2, #32
 8001db6:	4393      	bics	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	621a      	str	r2, [r3, #32]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	ffff8fff 	.word	0xffff8fff
 8001dec:	fffffcff 	.word	0xfffffcff

08001df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <TIM_OC3_SetConfig+0x78>)
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2270      	movs	r2, #112	; 0x70
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2203      	movs	r2, #3
 8001e24:	4393      	bics	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <TIM_OC3_SetConfig+0x7c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	621a      	str	r2, [r3, #32]
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b006      	add	sp, #24
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fffffeff 	.word	0xfffffeff
 8001e6c:	fffffdff 	.word	0xfffffdff

08001e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <TIM_OC4_SetConfig+0x7c>)
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <TIM_OC4_SetConfig+0x80>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <TIM_OC4_SetConfig+0x84>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <TIM_OC4_SetConfig+0x88>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	031b      	lsls	r3, r3, #12
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	621a      	str	r2, [r3, #32]
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	ffffefff 	.word	0xffffefff
 8001ef0:	ffff8fff 	.word	0xffff8fff
 8001ef4:	fffffcff 	.word	0xfffffcff
 8001ef8:	ffffdfff 	.word	0xffffdfff

08001efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4393      	bics	r3, r2
 8001f16:	001a      	movs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	22f0      	movs	r2, #240	; 0xf0
 8001f26:	4393      	bics	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	220a      	movs	r2, #10
 8001f38:	4393      	bics	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	621a      	str	r2, [r3, #32]
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b006      	add	sp, #24
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <TIM_TI2_ConfigInputStage+0x60>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	031b      	lsls	r3, r3, #12
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	22a0      	movs	r2, #160	; 0xa0
 8001f94:	4393      	bics	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	621a      	str	r2, [r3, #32]
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b006      	add	sp, #24
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	ffff0fff 	.word	0xffff0fff

08001fbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2270      	movs	r2, #112	; 0x70
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	2207      	movs	r2, #7
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	609a      	str	r2, [r3, #8]
}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <TIM_ETR_SetConfig+0x3c>)
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	021a      	lsls	r2, r3, #8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	431a      	orrs	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	609a      	str	r2, [r3, #8]
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}
 800202c:	ffff00ff 	.word	0xffff00ff

08002030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	221f      	movs	r2, #31
 8002040:	4013      	ands	r3, r2
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	43d2      	mvns	r2, r2
 8002052:	401a      	ands	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	211f      	movs	r1, #31
 8002060:	400b      	ands	r3, r1
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4099      	lsls	r1, r3
 8002066:	000b      	movs	r3, r1
 8002068:	431a      	orrs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	621a      	str	r2, [r3, #32]
}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b006      	add	sp, #24
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800208a:	2302      	movs	r3, #2
 800208c:	e032      	b.n	80020f4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2238      	movs	r2, #56	; 0x38
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2239      	movs	r2, #57	; 0x39
 800209a:	2102      	movs	r1, #2
 800209c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2270      	movs	r2, #112	; 0x70
 80020b2:	4393      	bics	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	4393      	bics	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2239      	movs	r2, #57	; 0x39
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2238      	movs	r2, #56	; 0x38
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}

080020fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002102:	f7fe f88d 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002106:	f000 f90f 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210a:	f000 fa29 	bl	8002560 <MX_GPIO_Init>
  MX_DMA_Init();
 800210e:	f000 f9f9 	bl	8002504 <MX_DMA_Init>
  MX_TIM2_Init();
 8002112:	f000 f965 	bl	80023e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  for(int i = 0 ; i < sizeof(buffer); i++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e010      	b.n	800213e <main+0x42>
  {
	  if(i < 70)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b45      	cmp	r3, #69	; 0x45
 8002120:	dc05      	bgt.n	800212e <main+0x32>
		  buffer[i] = 40;
 8002122:	4a7e      	ldr	r2, [pc, #504]	; (800231c <main+0x220>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	18d3      	adds	r3, r2, r3
 8002128:	2228      	movs	r2, #40	; 0x28
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e004      	b.n	8002138 <main+0x3c>
	  else
		  buffer[i] = 11;
 800212e:	4a7b      	ldr	r2, [pc, #492]	; (800231c <main+0x220>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	220b      	movs	r2, #11
 8002136:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < sizeof(buffer); i++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b65      	cmp	r3, #101	; 0x65
 8002142:	d9eb      	bls.n	800211c <main+0x20>
  }
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)buffer, sizeof(buffer));
 8002144:	4a75      	ldr	r2, [pc, #468]	; (800231c <main+0x220>)
 8002146:	4876      	ldr	r0, [pc, #472]	; (8002320 <main+0x224>)
 8002148:	2366      	movs	r3, #102	; 0x66
 800214a:	2104      	movs	r1, #4
 800214c:	f7ff fa82 	bl	8001654 <HAL_TIM_PWM_Start_DMA>

  uint32_t nowtick = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  uint32_t pasttick = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	23a0      	movs	r3, #160	; 0xa0
 800215e:	05db      	lsls	r3, r3, #23
 8002160:	2201      	movs	r2, #1
 8002162:	0018      	movs	r0, r3
 8002164:	f7fe fcbe 	bl	8000ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	00d9      	lsls	r1, r3, #3
 800216c:	23a0      	movs	r3, #160	; 0xa0
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	2201      	movs	r2, #1
 8002172:	0018      	movs	r0, r3
 8002174:	f7fe fcb6 	bl	8000ae4 <HAL_GPIO_WritePin>

  uint8_t rflag = 0;
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  uint8_t gflag = 0;
 8002180:	230e      	movs	r3, #14
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
  uint8_t bflag = 0;
 8002188:	230d      	movs	r3, #13
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
  uint8_t wflag = 0;
 8002190:	230c      	movs	r3, #12
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]

  uint8_t rrrrrrrr = 0;
 8002198:	230b      	movs	r3, #11
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  uint8_t gggggggg = 0;
 80021a0:	230a      	movs	r3, #10
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  uint8_t bbbbbbbb = 0;
 80021a8:	2309      	movs	r3, #9
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  uint8_t wwwwwwww = 0;
 80021b0:	2308      	movs	r3, #8
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  nowtick = HAL_GetTick();
 80021b8:	f7fe f888 	bl	80002cc <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	607b      	str	r3, [r7, #4]

	  if(nowtick - pasttick > 50)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b32      	cmp	r3, #50	; 0x32
 80021c8:	d9f6      	bls.n	80021b8 <main+0xbc>
	  {
		  if(!rflag)
 80021ca:	230f      	movs	r3, #15
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d106      	bne.n	80021e2 <main+0xe6>
			  rrrrrrrr++;
 80021d4:	210b      	movs	r1, #11
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	3201      	adds	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e005      	b.n	80021ee <main+0xf2>
		  else
			  rrrrrrrr--;
 80021e2:	210b      	movs	r1, #11
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	3a01      	subs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
		  if(!gflag)
 80021ee:	230e      	movs	r3, #14
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <main+0x10a>
			  gggggggg+=2;
 80021f8:	220a      	movs	r2, #10
 80021fa:	18bb      	adds	r3, r7, r2
 80021fc:	18ba      	adds	r2, r7, r2
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	3202      	adds	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e005      	b.n	8002212 <main+0x116>
		  else
			  gggggggg-=2;
 8002206:	220a      	movs	r2, #10
 8002208:	18bb      	adds	r3, r7, r2
 800220a:	18ba      	adds	r2, r7, r2
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	3a02      	subs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
		  if(!bflag)
 8002212:	230d      	movs	r3, #13
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <main+0x12e>
			  bbbbbbbb+=3;
 800221c:	2209      	movs	r2, #9
 800221e:	18bb      	adds	r3, r7, r2
 8002220:	18ba      	adds	r2, r7, r2
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	3203      	adds	r2, #3
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e005      	b.n	8002236 <main+0x13a>
		  else
			  bbbbbbbb-=3;
 800222a:	2209      	movs	r2, #9
 800222c:	18bb      	adds	r3, r7, r2
 800222e:	18ba      	adds	r2, r7, r2
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	3a03      	subs	r2, #3
 8002234:	701a      	strb	r2, [r3, #0]
		  if(!wflag)
 8002236:	230c      	movs	r3, #12
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <main+0x152>
			  wwwwwwww+=6;
 8002240:	2208      	movs	r2, #8
 8002242:	18bb      	adds	r3, r7, r2
 8002244:	18ba      	adds	r2, r7, r2
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	3206      	adds	r2, #6
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e005      	b.n	800225a <main+0x15e>
		  else
			  wwwwwwww-=6;
 800224e:	2208      	movs	r2, #8
 8002250:	18bb      	adds	r3, r7, r2
 8002252:	18ba      	adds	r2, r7, r2
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	3a06      	subs	r2, #6
 8002258:	701a      	strb	r2, [r3, #0]

		  if(rrrrrrrr > 250)
 800225a:	230b      	movs	r3, #11
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2bfa      	cmp	r3, #250	; 0xfa
 8002262:	d904      	bls.n	800226e <main+0x172>
			  rflag = 1;
 8002264:	230f      	movs	r3, #15
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e008      	b.n	8002280 <main+0x184>
		  else if(rrrrrrrr < 10)
 800226e:	230b      	movs	r3, #11
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d803      	bhi.n	8002280 <main+0x184>
			  rflag = 0;
 8002278:	230f      	movs	r3, #15
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
		  if(gggggggg > 250)
 8002280:	230a      	movs	r3, #10
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2bfa      	cmp	r3, #250	; 0xfa
 8002288:	d904      	bls.n	8002294 <main+0x198>
			  gflag = 1;
 800228a:	230e      	movs	r3, #14
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e008      	b.n	80022a6 <main+0x1aa>
		  else if(gggggggg < 10)
 8002294:	230a      	movs	r3, #10
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b09      	cmp	r3, #9
 800229c:	d803      	bhi.n	80022a6 <main+0x1aa>
			  gflag = 0;
 800229e:	230e      	movs	r3, #14
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
		  if(bbbbbbbb > 250)
 80022a6:	2309      	movs	r3, #9
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2bfa      	cmp	r3, #250	; 0xfa
 80022ae:	d904      	bls.n	80022ba <main+0x1be>
			  bflag = 1;
 80022b0:	230d      	movs	r3, #13
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e008      	b.n	80022cc <main+0x1d0>
		  else if(bbbbbbbb < 10)
 80022ba:	2309      	movs	r3, #9
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d803      	bhi.n	80022cc <main+0x1d0>
			  bflag = 0;
 80022c4:	230d      	movs	r3, #13
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
		  if(wwwwwwww > 240)
 80022cc:	2308      	movs	r3, #8
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2bf0      	cmp	r3, #240	; 0xf0
 80022d4:	d904      	bls.n	80022e0 <main+0x1e4>
			  wflag = 1;
 80022d6:	230c      	movs	r3, #12
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e008      	b.n	80022f2 <main+0x1f6>
		  else if(wwwwwwww < 20)
 80022e0:	2308      	movs	r3, #8
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b13      	cmp	r3, #19
 80022e8:	d803      	bhi.n	80022f2 <main+0x1f6>
			  wflag = 0;
 80022ea:	230c      	movs	r3, #12
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
		  set_mood(rrrrrrrr,gggggggg,bbbbbbbb,0);
 80022f2:	2309      	movs	r3, #9
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	230a      	movs	r3, #10
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	7819      	ldrb	r1, [r3, #0]
 80022fe:	230b      	movs	r3, #11
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	7818      	ldrb	r0, [r3, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	f000 f98b 	bl	8002620 <set_mood>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <main+0x228>)
 800230c:	2102      	movs	r1, #2
 800230e:	0018      	movs	r0, r3
 8002310:	f7fe fc05 	bl	8000b1e <HAL_GPIO_TogglePin>
		  pasttick = nowtick;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	613b      	str	r3, [r7, #16]
	  nowtick = HAL_GetTick();
 8002318:	e74e      	b.n	80021b8 <main+0xbc>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000020 	.word	0x20000020
 8002320:	2000011c 	.word	0x2000011c
 8002324:	50000400 	.word	0x50000400

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b093      	sub	sp, #76	; 0x4c
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	2414      	movs	r4, #20
 8002330:	193b      	adds	r3, r7, r4
 8002332:	0018      	movs	r0, r3
 8002334:	2334      	movs	r3, #52	; 0x34
 8002336:	001a      	movs	r2, r3
 8002338:	2100      	movs	r1, #0
 800233a:	f000 fba9 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233e:	003b      	movs	r3, r7
 8002340:	0018      	movs	r0, r3
 8002342:	2314      	movs	r3, #20
 8002344:	001a      	movs	r2, r3
 8002346:	2100      	movs	r1, #0
 8002348:	f000 fba2 	bl	8002a90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <SystemClock_Config+0xb0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <SystemClock_Config+0xb4>)
 8002352:	401a      	ands	r2, r3
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <SystemClock_Config+0xb0>)
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	0109      	lsls	r1, r1, #4
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800235e:	0021      	movs	r1, r4
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2201      	movs	r2, #1
 800236a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2210      	movs	r2, #16
 8002370:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2202      	movs	r2, #2
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	02d2      	lsls	r2, r2, #11
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	03d2      	lsls	r2, r2, #15
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238e:	187b      	adds	r3, r7, r1
 8002390:	0018      	movs	r0, r3
 8002392:	f7fe fbd7 	bl	8000b44 <HAL_RCC_OscConfig>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800239a:	f000 f9b7 	bl	800270c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239e:	003b      	movs	r3, r7
 80023a0:	220f      	movs	r2, #15
 80023a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	003b      	movs	r3, r7
 80023a6:	2203      	movs	r2, #3
 80023a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023aa:	003b      	movs	r3, r7
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b0:	003b      	movs	r3, r7
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	003b      	movs	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023bc:	003b      	movs	r3, r7
 80023be:	2101      	movs	r1, #1
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe ff39 	bl	8001238 <HAL_RCC_ClockConfig>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023ca:	f000 f99f 	bl	800270c <Error_Handler>
  }
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b013      	add	sp, #76	; 0x4c
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40007000 	.word	0x40007000
 80023dc:	ffffe7ff 	.word	0xffffe7ff

080023e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	2318      	movs	r3, #24
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	0018      	movs	r0, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	001a      	movs	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	f000 fb4d 	bl	8002a90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f6:	2310      	movs	r3, #16
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	0018      	movs	r0, r3
 80023fc:	2308      	movs	r3, #8
 80023fe:	001a      	movs	r2, r3
 8002400:	2100      	movs	r1, #0
 8002402:	f000 fb45 	bl	8002a90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	003b      	movs	r3, r7
 8002408:	0018      	movs	r0, r3
 800240a:	2310      	movs	r3, #16
 800240c:	001a      	movs	r2, r3
 800240e:	2100      	movs	r1, #0
 8002410:	f000 fb3e 	bl	8002a90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002414:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <MX_TIM2_Init+0x120>)
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	05d2      	lsls	r2, r2, #23
 800241a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800241c:	4b38      	ldr	r3, [pc, #224]	; (8002500 <MX_TIM2_Init+0x120>)
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <MX_TIM2_Init+0x120>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <MX_TIM2_Init+0x120>)
 800242a:	2227      	movs	r2, #39	; 0x27
 800242c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <MX_TIM2_Init+0x120>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <MX_TIM2_Init+0x120>)
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <MX_TIM2_Init+0x120>)
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff f8a9 	bl	8001594 <HAL_TIM_Base_Init>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002446:	f000 f961 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	2118      	movs	r1, #24
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	0152      	lsls	r2, r2, #5
 8002452:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002454:	187a      	adds	r2, r7, r1
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <MX_TIM2_Init+0x120>)
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fa9a 	bl	8001994 <HAL_TIM_ConfigClockSource>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002464:	f000 f952 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <MX_TIM2_Init+0x120>)
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff f8be 	bl	80015ec <HAL_TIM_PWM_Init>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002474:	f000 f94a 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002478:	2110      	movs	r1, #16
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002486:	187a      	adds	r2, r7, r1
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <MX_TIM2_Init+0x120>)
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff fdf2 	bl	8002076 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002496:	f000 f939 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249a:	003b      	movs	r3, r7
 800249c:	2260      	movs	r2, #96	; 0x60
 800249e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024a0:	003b      	movs	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a6:	003b      	movs	r3, r7
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	003b      	movs	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b2:	0039      	movs	r1, r7
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_TIM2_Init+0x120>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff f9b3 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80024c2:	f000 f923 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c6:	0039      	movs	r1, r7
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <MX_TIM2_Init+0x120>)
 80024ca:	2204      	movs	r2, #4
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff f9a9 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	1e03      	subs	r3, r0, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80024d6:	f000 f919 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024da:	0039      	movs	r1, r7
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_TIM2_Init+0x120>)
 80024de:	2208      	movs	r2, #8
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff f99f 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80024ea:	f000 f90f 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <MX_TIM2_Init+0x120>)
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 f9c7 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b00a      	add	sp, #40	; 0x28
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	2000011c 	.word	0x2000011c

08002504 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_DMA_Init+0x58>)
 800250c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <MX_DMA_Init+0x58>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_DMA_Init+0x58>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2009      	movs	r0, #9
 8002528:	f7fd ff82 	bl	8000430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800252c:	2009      	movs	r0, #9
 800252e:	f7fd ff94 	bl	800045a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	200a      	movs	r0, #10
 8002538:	f7fd ff7a 	bl	8000430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800253c:	200a      	movs	r0, #10
 800253e:	f7fd ff8c 	bl	800045a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	200b      	movs	r0, #11
 8002548:	f7fd ff72 	bl	8000430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800254c:	200b      	movs	r0, #11
 800254e:	f7fd ff84 	bl	800045a <HAL_NVIC_EnableIRQ>

}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40021000 	.word	0x40021000

08002560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002566:	240c      	movs	r4, #12
 8002568:	193b      	adds	r3, r7, r4
 800256a:	0018      	movs	r0, r3
 800256c:	2314      	movs	r3, #20
 800256e:	001a      	movs	r2, r3
 8002570:	2100      	movs	r1, #0
 8002572:	f000 fa8d 	bl	8002a90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <MX_GPIO_Init+0xb8>)
 8002578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <MX_GPIO_Init+0xb8>)
 800257c:	2101      	movs	r1, #1
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <MX_GPIO_Init+0xb8>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	2201      	movs	r2, #1
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_GPIO_Init+0xb8>)
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <MX_GPIO_Init+0xb8>)
 8002594:	2102      	movs	r1, #2
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <MX_GPIO_Init+0xb8>)
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80025a6:	23d0      	movs	r3, #208	; 0xd0
 80025a8:	00d9      	lsls	r1, r3, #3
 80025aa:	23a0      	movs	r3, #160	; 0xa0
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	2200      	movs	r2, #0
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7fe fa97 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <MX_GPIO_Init+0xbc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	2102      	movs	r1, #2
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe fa91 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	22d0      	movs	r2, #208	; 0xd0
 80025c6:	00d2      	lsls	r2, r2, #3
 80025c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	2201      	movs	r2, #1
 80025ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	193a      	adds	r2, r7, r4
 80025de:	23a0      	movs	r3, #160	; 0xa0
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7fe f90f 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025ea:	0021      	movs	r1, r4
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2202      	movs	r2, #2
 80025f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2201      	movs	r2, #1
 80025f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	187b      	adds	r3, r7, r1
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <MX_GPIO_Init+0xbc>)
 8002608:	0019      	movs	r1, r3
 800260a:	0010      	movs	r0, r2
 800260c:	f7fe f8fc 	bl	8000808 <HAL_GPIO_Init>

}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b009      	add	sp, #36	; 0x24
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	50000400 	.word	0x50000400

08002620 <set_mood>:

/* USER CODE BEGIN 4 */
void set_mood(uint8_t red, uint8_t green, uint8_t blue, uint8_t white)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	0005      	movs	r5, r0
 8002628:	000c      	movs	r4, r1
 800262a:	0010      	movs	r0, r2
 800262c:	0019      	movs	r1, r3
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	1c2a      	adds	r2, r5, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	1dbb      	adds	r3, r7, #6
 8002636:	1c22      	adds	r2, r4, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	1d7b      	adds	r3, r7, #5
 800263c:	1c02      	adds	r2, r0, #0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	1c0a      	adds	r2, r1, #0
 8002644:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8 ; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e056      	b.n	80026fa <set_mood+0xda>
	{
		if((red >> i) & 0x01)
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	411a      	asrs	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d006      	beq.n	800266a <set_mood+0x4a>
			buffer[69+8-i] = 11;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	224d      	movs	r2, #77	; 0x4d
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <set_mood+0xe8>)
 8002664:	210b      	movs	r1, #11
 8002666:	54d1      	strb	r1, [r2, r3]
 8002668:	e005      	b.n	8002676 <set_mood+0x56>
		else
			buffer[69+8-i] = 30;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	224d      	movs	r2, #77	; 0x4d
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <set_mood+0xe8>)
 8002672:	211e      	movs	r1, #30
 8002674:	54d1      	strb	r1, [r2, r3]
		if((green >> i) & 0x01)
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	411a      	asrs	r2, r3
 800267e:	0013      	movs	r3, r2
 8002680:	2201      	movs	r2, #1
 8002682:	4013      	ands	r3, r2
 8002684:	d006      	beq.n	8002694 <set_mood+0x74>
			buffer[69+16-i] = 11;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2255      	movs	r2, #85	; 0x55
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <set_mood+0xe8>)
 800268e:	210b      	movs	r1, #11
 8002690:	54d1      	strb	r1, [r2, r3]
 8002692:	e005      	b.n	80026a0 <set_mood+0x80>
		else
			buffer[69+16-i] = 30;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2255      	movs	r2, #85	; 0x55
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <set_mood+0xe8>)
 800269c:	211e      	movs	r1, #30
 800269e:	54d1      	strb	r1, [r2, r3]
		if((green >> i) & 0x01)
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	411a      	asrs	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d006      	beq.n	80026be <set_mood+0x9e>
			buffer[69+24-i] = 11;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	225d      	movs	r2, #93	; 0x5d
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <set_mood+0xe8>)
 80026b8:	210b      	movs	r1, #11
 80026ba:	54d1      	strb	r1, [r2, r3]
 80026bc:	e005      	b.n	80026ca <set_mood+0xaa>
		else
			buffer[69+24-i] = 30;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	225d      	movs	r2, #93	; 0x5d
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a10      	ldr	r2, [pc, #64]	; (8002708 <set_mood+0xe8>)
 80026c6:	211e      	movs	r1, #30
 80026c8:	54d1      	strb	r1, [r2, r3]
		if((white >> i) & 0x01)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	411a      	asrs	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	2201      	movs	r2, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	d006      	beq.n	80026e8 <set_mood+0xc8>
			buffer[69+32-i] = 11;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2265      	movs	r2, #101	; 0x65
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a09      	ldr	r2, [pc, #36]	; (8002708 <set_mood+0xe8>)
 80026e2:	210b      	movs	r1, #11
 80026e4:	54d1      	strb	r1, [r2, r3]
 80026e6:	e005      	b.n	80026f4 <set_mood+0xd4>
		else
			buffer[69+32-i] = 30;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2265      	movs	r2, #101	; 0x65
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4a06      	ldr	r2, [pc, #24]	; (8002708 <set_mood+0xe8>)
 80026f0:	211e      	movs	r1, #30
 80026f2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8 ; i++)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b07      	cmp	r3, #7
 80026fe:	dda5      	ble.n	800264c <set_mood+0x2c>
	}
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bdb0      	pop	{r4, r5, r7, pc}
 8002708:	20000020 	.word	0x20000020

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_MspInit+0x24>)
 800271e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x24>)
 8002722:	2101      	movs	r1, #1
 8002724:	430a      	orrs	r2, r1
 8002726:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_MspInit+0x24>)
 800272a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_MspInit+0x24>)
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	0549      	lsls	r1, r1, #21
 8002732:	430a      	orrs	r2, r1
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	05db      	lsls	r3, r3, #23
 8002750:	429a      	cmp	r2, r3
 8002752:	d000      	beq.n	8002756 <HAL_TIM_Base_MspInit+0x16>
 8002754:	e083      	b.n	800285e <HAL_TIM_Base_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_TIM_Base_MspInit+0x128>)
 8002758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_TIM_Base_MspInit+0x128>)
 800275c:	2101      	movs	r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002764:	4a42      	ldr	r2, [pc, #264]	; (8002870 <HAL_TIM_Base_MspInit+0x130>)
 8002766:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8002768:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 800276a:	2208      	movs	r2, #8
 800276c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002770:	2210      	movs	r2, #16
 8002772:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	0052      	lsls	r2, r2, #1
 8002786:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002790:	2220      	movs	r2, #32
 8002792:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 800279c:	0018      	movs	r0, r3
 800279e:	f7fd fe79 	bl	8000494 <HAL_DMA_Init>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 80027a6:	f7ff ffb1 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 80027ae:	621a      	str	r2, [r3, #32]
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_TIM_Base_MspInit+0x12c>)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <HAL_TIM_Base_MspInit+0x138>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027be:	2208      	movs	r2, #8
 80027c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027c4:	2210      	movs	r2, #16
 80027c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027e4:	2220      	movs	r2, #32
 80027e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fe4f 	bl	8000494 <HAL_DMA_Init>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d001      	beq.n	80027fe <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 80027fa:	f7ff ff87 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_TIM_Base_MspInit+0x134>)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_TIM_Base_MspInit+0x140>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002812:	2208      	movs	r2, #8
 8002814:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002818:	2210      	movs	r2, #16
 800281a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002838:	2220      	movs	r2, #32
 800283a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002844:	0018      	movs	r0, r3
 8002846:	f7fd fe25 	bl	8000494 <HAL_DMA_Init>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d001      	beq.n	8002852 <HAL_TIM_Base_MspInit+0x112>
    {
      Error_Handler();
 800284e:	f7ff ff5d 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_TIM_Base_MspInit+0x13c>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	40021000 	.word	0x40021000
 800286c:	2000008c 	.word	0x2000008c
 8002870:	40020058 	.word	0x40020058
 8002874:	200000d4 	.word	0x200000d4
 8002878:	40020030 	.word	0x40020030
 800287c:	20000158 	.word	0x20000158
 8002880:	40020008 	.word	0x40020008

08002884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	230c      	movs	r3, #12
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	0018      	movs	r0, r3
 8002892:	2314      	movs	r3, #20
 8002894:	001a      	movs	r2, r3
 8002896:	2100      	movs	r1, #0
 8002898:	f000 f8fa 	bl	8002a90 <memset>
  if(htim->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	05db      	lsls	r3, r3, #23
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d122      	bne.n	80028ee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_TIM_MspPostInit+0x74>)
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_TIM_MspPostInit+0x74>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_TIM_MspPostInit+0x74>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	2201      	movs	r2, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80028c0:	210c      	movs	r1, #12
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	2202      	movs	r2, #2
 80028cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2202      	movs	r2, #2
 80028de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	187a      	adds	r2, r7, r1
 80028e2:	23a0      	movs	r3, #160	; 0xa0
 80028e4:	05db      	lsls	r3, r3, #23
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7fd ff8d 	bl	8000808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b008      	add	sp, #32
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000

080028fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f7fd fcc6 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <DMA1_Channel1_IRQHandler+0x14>)
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fe8a 	bl	8000650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	20000158 	.word	0x20000158

08002948 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <DMA1_Channel2_3_IRQHandler+0x14>)
 800294e:	0018      	movs	r0, r3
 8002950:	f7fd fe7e 	bl	8000650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	200000d4 	.word	0x200000d4

08002960 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8002966:	0018      	movs	r0, r3
 8002968:	f7fd fe72 	bl	8000650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	2000008c 	.word	0x2000008c

08002978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <SystemInit+0x64>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <SystemInit+0x64>)
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	0049      	lsls	r1, r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <SystemInit+0x64>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <SystemInit+0x64>)
 8002990:	4913      	ldr	r1, [pc, #76]	; (80029e0 <SystemInit+0x68>)
 8002992:	400a      	ands	r2, r1
 8002994:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <SystemInit+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <SystemInit+0x64>)
 800299c:	4911      	ldr	r1, [pc, #68]	; (80029e4 <SystemInit+0x6c>)
 800299e:	400a      	ands	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <SystemInit+0x64>)
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <SystemInit+0x64>)
 80029a8:	2101      	movs	r1, #1
 80029aa:	438a      	bics	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <SystemInit+0x64>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <SystemInit+0x64>)
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <SystemInit+0x70>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <SystemInit+0x64>)
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <SystemInit+0x64>)
 80029c0:	490a      	ldr	r1, [pc, #40]	; (80029ec <SystemInit+0x74>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <SystemInit+0x64>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <SystemInit+0x78>)
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0512      	lsls	r2, r2, #20
 80029d2:	609a      	str	r2, [r3, #8]
#endif
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	40021000 	.word	0x40021000
 80029e0:	88ff400c 	.word	0x88ff400c
 80029e4:	fef6fff6 	.word	0xfef6fff6
 80029e8:	fffbffff 	.word	0xfffbffff
 80029ec:	ff02ffff 	.word	0xff02ffff
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80029f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80029f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029fa:	e003      	b.n	8002a04 <LoopCopyDataInit>

080029fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80029fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a02:	3104      	adds	r1, #4

08002a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002a08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a0c:	d3f6      	bcc.n	80029fc <CopyDataInit>
  ldr  r2, =_sbss
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002a10:	e002      	b.n	8002a18 <LoopFillZerobss>

08002a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a12:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a14:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a16:	3204      	adds	r2, #4

08002a18 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <LoopForever+0x16>)
  cmp  r2, r3
 8002a1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a1c:	d3f9      	bcc.n	8002a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a1e:	f7ff ffab 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a22:	f000 f811 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a26:	f7ff fb69 	bl	80020fc <main>

08002a2a <LoopForever>:

LoopForever:
    b LoopForever
 8002a2a:	e7fe      	b.n	8002a2a <LoopForever>
   ldr   r0, =_estack
 8002a2c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002a30:	08002adc 	.word	0x08002adc
  ldr  r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a38:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002a3c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002a40:	200001a0 	.word	0x200001a0

08002a44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <ADC1_COMP_IRQHandler>
	...

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4d0c      	ldr	r5, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	2600      	movs	r6, #0
 8002a5a:	f000 f821 	bl	8002aa0 <_init>
 8002a5e:	4d0a      	ldr	r5, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	00b3      	lsls	r3, r6, #2
 8002a6e:	58eb      	ldr	r3, [r5, r3]
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	00b3      	lsls	r3, r6, #2
 8002a78:	58eb      	ldr	r3, [r5, r3]
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002ad4 	.word	0x08002ad4
 8002a84:	08002ad4 	.word	0x08002ad4
 8002a88:	08002ad4 	.word	0x08002ad4
 8002a8c:	08002ad8 	.word	0x08002ad8

08002a90 <memset>:
 8002a90:	0003      	movs	r3, r0
 8002a92:	1812      	adds	r2, r2, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	7019      	strb	r1, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
