
UV_brush_holder_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003980  08003980  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003980  08003980  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003980  08003980  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000004  0800398c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800398c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d1  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016d1  00000000  00000000  000281fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  000298d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002a260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010af1  00000000  00000000  0002ab18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ba5  00000000  00000000  0003b609  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00067d23  00000000  00000000  000431ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aaed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002304  00000000  00000000  000aaf4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800390c 	.word	0x0800390c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800390c 	.word	0x0800390c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fdb8 	bl	8000d9c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 f9d1 	bl	80005d8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f807 	bl	8000250 <__aeabi_fsub>
 8000242:	f000 f9c9 	bl	80005d8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fsub>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	0044      	lsls	r4, r0, #1
 8000258:	0fc2      	lsrs	r2, r0, #31
 800025a:	b580      	push	{r7, lr}
 800025c:	0247      	lsls	r7, r0, #9
 800025e:	0248      	lsls	r0, r1, #9
 8000260:	0a40      	lsrs	r0, r0, #9
 8000262:	4684      	mov	ip, r0
 8000264:	4666      	mov	r6, ip
 8000266:	0048      	lsls	r0, r1, #1
 8000268:	0a7f      	lsrs	r7, r7, #9
 800026a:	0e24      	lsrs	r4, r4, #24
 800026c:	00f6      	lsls	r6, r6, #3
 800026e:	0025      	movs	r5, r4
 8000270:	4690      	mov	r8, r2
 8000272:	00fb      	lsls	r3, r7, #3
 8000274:	0e00      	lsrs	r0, r0, #24
 8000276:	0fc9      	lsrs	r1, r1, #31
 8000278:	46b1      	mov	r9, r6
 800027a:	28ff      	cmp	r0, #255	; 0xff
 800027c:	d100      	bne.n	8000280 <__aeabi_fsub+0x30>
 800027e:	e085      	b.n	800038c <__aeabi_fsub+0x13c>
 8000280:	2601      	movs	r6, #1
 8000282:	4071      	eors	r1, r6
 8000284:	1a26      	subs	r6, r4, r0
 8000286:	4291      	cmp	r1, r2
 8000288:	d057      	beq.n	800033a <__aeabi_fsub+0xea>
 800028a:	2e00      	cmp	r6, #0
 800028c:	dd43      	ble.n	8000316 <__aeabi_fsub+0xc6>
 800028e:	2800      	cmp	r0, #0
 8000290:	d000      	beq.n	8000294 <__aeabi_fsub+0x44>
 8000292:	e07f      	b.n	8000394 <__aeabi_fsub+0x144>
 8000294:	4649      	mov	r1, r9
 8000296:	2900      	cmp	r1, #0
 8000298:	d100      	bne.n	800029c <__aeabi_fsub+0x4c>
 800029a:	e0aa      	b.n	80003f2 <__aeabi_fsub+0x1a2>
 800029c:	3e01      	subs	r6, #1
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d000      	beq.n	80002a4 <__aeabi_fsub+0x54>
 80002a2:	e0f7      	b.n	8000494 <__aeabi_fsub+0x244>
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	015a      	lsls	r2, r3, #5
 80002a8:	d400      	bmi.n	80002ac <__aeabi_fsub+0x5c>
 80002aa:	e08b      	b.n	80003c4 <__aeabi_fsub+0x174>
 80002ac:	019b      	lsls	r3, r3, #6
 80002ae:	099c      	lsrs	r4, r3, #6
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 fd7d 	bl	8000db0 <__clzsi2>
 80002b6:	3805      	subs	r0, #5
 80002b8:	4084      	lsls	r4, r0
 80002ba:	4285      	cmp	r5, r0
 80002bc:	dd00      	ble.n	80002c0 <__aeabi_fsub+0x70>
 80002be:	e0d3      	b.n	8000468 <__aeabi_fsub+0x218>
 80002c0:	1b45      	subs	r5, r0, r5
 80002c2:	0023      	movs	r3, r4
 80002c4:	2020      	movs	r0, #32
 80002c6:	3501      	adds	r5, #1
 80002c8:	40eb      	lsrs	r3, r5
 80002ca:	1b45      	subs	r5, r0, r5
 80002cc:	40ac      	lsls	r4, r5
 80002ce:	1e62      	subs	r2, r4, #1
 80002d0:	4194      	sbcs	r4, r2
 80002d2:	4323      	orrs	r3, r4
 80002d4:	2407      	movs	r4, #7
 80002d6:	2500      	movs	r5, #0
 80002d8:	401c      	ands	r4, r3
 80002da:	2201      	movs	r2, #1
 80002dc:	4641      	mov	r1, r8
 80002de:	400a      	ands	r2, r1
 80002e0:	2c00      	cmp	r4, #0
 80002e2:	d004      	beq.n	80002ee <__aeabi_fsub+0x9e>
 80002e4:	210f      	movs	r1, #15
 80002e6:	4019      	ands	r1, r3
 80002e8:	2904      	cmp	r1, #4
 80002ea:	d000      	beq.n	80002ee <__aeabi_fsub+0x9e>
 80002ec:	3304      	adds	r3, #4
 80002ee:	0159      	lsls	r1, r3, #5
 80002f0:	d400      	bmi.n	80002f4 <__aeabi_fsub+0xa4>
 80002f2:	e080      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 80002f4:	3501      	adds	r5, #1
 80002f6:	b2ec      	uxtb	r4, r5
 80002f8:	2dff      	cmp	r5, #255	; 0xff
 80002fa:	d000      	beq.n	80002fe <__aeabi_fsub+0xae>
 80002fc:	e0a3      	b.n	8000446 <__aeabi_fsub+0x1f6>
 80002fe:	24ff      	movs	r4, #255	; 0xff
 8000300:	2300      	movs	r3, #0
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	05e4      	lsls	r4, r4, #23
 8000306:	0a58      	lsrs	r0, r3, #9
 8000308:	07d2      	lsls	r2, r2, #31
 800030a:	4320      	orrs	r0, r4
 800030c:	4310      	orrs	r0, r2
 800030e:	bc0c      	pop	{r2, r3}
 8000310:	4690      	mov	r8, r2
 8000312:	4699      	mov	r9, r3
 8000314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000316:	2e00      	cmp	r6, #0
 8000318:	d174      	bne.n	8000404 <__aeabi_fsub+0x1b4>
 800031a:	1c60      	adds	r0, r4, #1
 800031c:	b2c0      	uxtb	r0, r0
 800031e:	2801      	cmp	r0, #1
 8000320:	dc00      	bgt.n	8000324 <__aeabi_fsub+0xd4>
 8000322:	e0a7      	b.n	8000474 <__aeabi_fsub+0x224>
 8000324:	464a      	mov	r2, r9
 8000326:	1a9c      	subs	r4, r3, r2
 8000328:	0162      	lsls	r2, r4, #5
 800032a:	d500      	bpl.n	800032e <__aeabi_fsub+0xde>
 800032c:	e0b6      	b.n	800049c <__aeabi_fsub+0x24c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	d1be      	bne.n	80002b0 <__aeabi_fsub+0x60>
 8000332:	2200      	movs	r2, #0
 8000334:	2400      	movs	r4, #0
 8000336:	2300      	movs	r3, #0
 8000338:	e7e3      	b.n	8000302 <__aeabi_fsub+0xb2>
 800033a:	2e00      	cmp	r6, #0
 800033c:	dc00      	bgt.n	8000340 <__aeabi_fsub+0xf0>
 800033e:	e085      	b.n	800044c <__aeabi_fsub+0x1fc>
 8000340:	2800      	cmp	r0, #0
 8000342:	d046      	beq.n	80003d2 <__aeabi_fsub+0x182>
 8000344:	2cff      	cmp	r4, #255	; 0xff
 8000346:	d049      	beq.n	80003dc <__aeabi_fsub+0x18c>
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	4648      	mov	r0, r9
 800034c:	04d2      	lsls	r2, r2, #19
 800034e:	4310      	orrs	r0, r2
 8000350:	4681      	mov	r9, r0
 8000352:	2201      	movs	r2, #1
 8000354:	2e1b      	cmp	r6, #27
 8000356:	dc09      	bgt.n	800036c <__aeabi_fsub+0x11c>
 8000358:	2020      	movs	r0, #32
 800035a:	464c      	mov	r4, r9
 800035c:	1b80      	subs	r0, r0, r6
 800035e:	4084      	lsls	r4, r0
 8000360:	464a      	mov	r2, r9
 8000362:	0020      	movs	r0, r4
 8000364:	40f2      	lsrs	r2, r6
 8000366:	1e44      	subs	r4, r0, #1
 8000368:	41a0      	sbcs	r0, r4
 800036a:	4302      	orrs	r2, r0
 800036c:	189b      	adds	r3, r3, r2
 800036e:	015a      	lsls	r2, r3, #5
 8000370:	d528      	bpl.n	80003c4 <__aeabi_fsub+0x174>
 8000372:	3501      	adds	r5, #1
 8000374:	2dff      	cmp	r5, #255	; 0xff
 8000376:	d100      	bne.n	800037a <__aeabi_fsub+0x12a>
 8000378:	e0a8      	b.n	80004cc <__aeabi_fsub+0x27c>
 800037a:	2201      	movs	r2, #1
 800037c:	2407      	movs	r4, #7
 800037e:	4994      	ldr	r1, [pc, #592]	; (80005d0 <__aeabi_fsub+0x380>)
 8000380:	401a      	ands	r2, r3
 8000382:	085b      	lsrs	r3, r3, #1
 8000384:	400b      	ands	r3, r1
 8000386:	4313      	orrs	r3, r2
 8000388:	401c      	ands	r4, r3
 800038a:	e7a6      	b.n	80002da <__aeabi_fsub+0x8a>
 800038c:	2e00      	cmp	r6, #0
 800038e:	d000      	beq.n	8000392 <__aeabi_fsub+0x142>
 8000390:	e778      	b.n	8000284 <__aeabi_fsub+0x34>
 8000392:	e775      	b.n	8000280 <__aeabi_fsub+0x30>
 8000394:	2cff      	cmp	r4, #255	; 0xff
 8000396:	d054      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	4649      	mov	r1, r9
 800039c:	04d2      	lsls	r2, r2, #19
 800039e:	4311      	orrs	r1, r2
 80003a0:	4689      	mov	r9, r1
 80003a2:	2201      	movs	r2, #1
 80003a4:	2e1b      	cmp	r6, #27
 80003a6:	dc09      	bgt.n	80003bc <__aeabi_fsub+0x16c>
 80003a8:	2120      	movs	r1, #32
 80003aa:	4648      	mov	r0, r9
 80003ac:	1b89      	subs	r1, r1, r6
 80003ae:	4088      	lsls	r0, r1
 80003b0:	464a      	mov	r2, r9
 80003b2:	0001      	movs	r1, r0
 80003b4:	40f2      	lsrs	r2, r6
 80003b6:	1e48      	subs	r0, r1, #1
 80003b8:	4181      	sbcs	r1, r0
 80003ba:	430a      	orrs	r2, r1
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	015a      	lsls	r2, r3, #5
 80003c0:	d500      	bpl.n	80003c4 <__aeabi_fsub+0x174>
 80003c2:	e773      	b.n	80002ac <__aeabi_fsub+0x5c>
 80003c4:	2201      	movs	r2, #1
 80003c6:	4641      	mov	r1, r8
 80003c8:	400a      	ands	r2, r1
 80003ca:	0759      	lsls	r1, r3, #29
 80003cc:	d000      	beq.n	80003d0 <__aeabi_fsub+0x180>
 80003ce:	e789      	b.n	80002e4 <__aeabi_fsub+0x94>
 80003d0:	e011      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 80003d2:	4648      	mov	r0, r9
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d158      	bne.n	800048a <__aeabi_fsub+0x23a>
 80003d8:	2cff      	cmp	r4, #255	; 0xff
 80003da:	d10c      	bne.n	80003f6 <__aeabi_fsub+0x1a6>
 80003dc:	08db      	lsrs	r3, r3, #3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d100      	bne.n	80003e4 <__aeabi_fsub+0x194>
 80003e2:	e78c      	b.n	80002fe <__aeabi_fsub+0xae>
 80003e4:	2080      	movs	r0, #128	; 0x80
 80003e6:	03c0      	lsls	r0, r0, #15
 80003e8:	4303      	orrs	r3, r0
 80003ea:	025b      	lsls	r3, r3, #9
 80003ec:	0a5b      	lsrs	r3, r3, #9
 80003ee:	24ff      	movs	r4, #255	; 0xff
 80003f0:	e787      	b.n	8000302 <__aeabi_fsub+0xb2>
 80003f2:	2cff      	cmp	r4, #255	; 0xff
 80003f4:	d025      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	2dff      	cmp	r5, #255	; 0xff
 80003fa:	d0f0      	beq.n	80003de <__aeabi_fsub+0x18e>
 80003fc:	025b      	lsls	r3, r3, #9
 80003fe:	0a5b      	lsrs	r3, r3, #9
 8000400:	b2ec      	uxtb	r4, r5
 8000402:	e77e      	b.n	8000302 <__aeabi_fsub+0xb2>
 8000404:	2c00      	cmp	r4, #0
 8000406:	d04d      	beq.n	80004a4 <__aeabi_fsub+0x254>
 8000408:	28ff      	cmp	r0, #255	; 0xff
 800040a:	d018      	beq.n	800043e <__aeabi_fsub+0x1ee>
 800040c:	2480      	movs	r4, #128	; 0x80
 800040e:	04e4      	lsls	r4, r4, #19
 8000410:	4272      	negs	r2, r6
 8000412:	4323      	orrs	r3, r4
 8000414:	2a1b      	cmp	r2, #27
 8000416:	dd00      	ble.n	800041a <__aeabi_fsub+0x1ca>
 8000418:	e0c4      	b.n	80005a4 <__aeabi_fsub+0x354>
 800041a:	001c      	movs	r4, r3
 800041c:	2520      	movs	r5, #32
 800041e:	40d4      	lsrs	r4, r2
 8000420:	1aaa      	subs	r2, r5, r2
 8000422:	4093      	lsls	r3, r2
 8000424:	1e5a      	subs	r2, r3, #1
 8000426:	4193      	sbcs	r3, r2
 8000428:	4323      	orrs	r3, r4
 800042a:	464a      	mov	r2, r9
 800042c:	0005      	movs	r5, r0
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	4688      	mov	r8, r1
 8000432:	e738      	b.n	80002a6 <__aeabi_fsub+0x56>
 8000434:	1c72      	adds	r2, r6, #1
 8000436:	d0f8      	beq.n	800042a <__aeabi_fsub+0x1da>
 8000438:	43f2      	mvns	r2, r6
 800043a:	28ff      	cmp	r0, #255	; 0xff
 800043c:	d1ea      	bne.n	8000414 <__aeabi_fsub+0x1c4>
 800043e:	000a      	movs	r2, r1
 8000440:	464b      	mov	r3, r9
 8000442:	25ff      	movs	r5, #255	; 0xff
 8000444:	e7d7      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 8000446:	019b      	lsls	r3, r3, #6
 8000448:	0a5b      	lsrs	r3, r3, #9
 800044a:	e75a      	b.n	8000302 <__aeabi_fsub+0xb2>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d141      	bne.n	80004d4 <__aeabi_fsub+0x284>
 8000450:	1c65      	adds	r5, r4, #1
 8000452:	b2e9      	uxtb	r1, r5
 8000454:	2901      	cmp	r1, #1
 8000456:	dd45      	ble.n	80004e4 <__aeabi_fsub+0x294>
 8000458:	2dff      	cmp	r5, #255	; 0xff
 800045a:	d100      	bne.n	800045e <__aeabi_fsub+0x20e>
 800045c:	e74f      	b.n	80002fe <__aeabi_fsub+0xae>
 800045e:	2407      	movs	r4, #7
 8000460:	444b      	add	r3, r9
 8000462:	085b      	lsrs	r3, r3, #1
 8000464:	401c      	ands	r4, r3
 8000466:	e738      	b.n	80002da <__aeabi_fsub+0x8a>
 8000468:	2207      	movs	r2, #7
 800046a:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <__aeabi_fsub+0x384>)
 800046c:	1a2d      	subs	r5, r5, r0
 800046e:	4023      	ands	r3, r4
 8000470:	4014      	ands	r4, r2
 8000472:	e732      	b.n	80002da <__aeabi_fsub+0x8a>
 8000474:	2c00      	cmp	r4, #0
 8000476:	d11d      	bne.n	80004b4 <__aeabi_fsub+0x264>
 8000478:	2b00      	cmp	r3, #0
 800047a:	d17a      	bne.n	8000572 <__aeabi_fsub+0x322>
 800047c:	464b      	mov	r3, r9
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fsub+0x234>
 8000482:	e091      	b.n	80005a8 <__aeabi_fsub+0x358>
 8000484:	000a      	movs	r2, r1
 8000486:	2500      	movs	r5, #0
 8000488:	e7b5      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 800048a:	3e01      	subs	r6, #1
 800048c:	2e00      	cmp	r6, #0
 800048e:	d119      	bne.n	80004c4 <__aeabi_fsub+0x274>
 8000490:	444b      	add	r3, r9
 8000492:	e76c      	b.n	800036e <__aeabi_fsub+0x11e>
 8000494:	2cff      	cmp	r4, #255	; 0xff
 8000496:	d184      	bne.n	80003a2 <__aeabi_fsub+0x152>
 8000498:	25ff      	movs	r5, #255	; 0xff
 800049a:	e7ac      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 800049c:	464a      	mov	r2, r9
 800049e:	4688      	mov	r8, r1
 80004a0:	1ad4      	subs	r4, r2, r3
 80004a2:	e705      	b.n	80002b0 <__aeabi_fsub+0x60>
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1c5      	bne.n	8000434 <__aeabi_fsub+0x1e4>
 80004a8:	000a      	movs	r2, r1
 80004aa:	28ff      	cmp	r0, #255	; 0xff
 80004ac:	d0c8      	beq.n	8000440 <__aeabi_fsub+0x1f0>
 80004ae:	0005      	movs	r5, r0
 80004b0:	464b      	mov	r3, r9
 80004b2:	e7a0      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d149      	bne.n	800054c <__aeabi_fsub+0x2fc>
 80004b8:	464b      	mov	r3, r9
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d077      	beq.n	80005ae <__aeabi_fsub+0x35e>
 80004be:	000a      	movs	r2, r1
 80004c0:	25ff      	movs	r5, #255	; 0xff
 80004c2:	e798      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 80004c4:	2cff      	cmp	r4, #255	; 0xff
 80004c6:	d000      	beq.n	80004ca <__aeabi_fsub+0x27a>
 80004c8:	e743      	b.n	8000352 <__aeabi_fsub+0x102>
 80004ca:	e787      	b.n	80003dc <__aeabi_fsub+0x18c>
 80004cc:	000a      	movs	r2, r1
 80004ce:	24ff      	movs	r4, #255	; 0xff
 80004d0:	2300      	movs	r3, #0
 80004d2:	e716      	b.n	8000302 <__aeabi_fsub+0xb2>
 80004d4:	2c00      	cmp	r4, #0
 80004d6:	d115      	bne.n	8000504 <__aeabi_fsub+0x2b4>
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d157      	bne.n	800058c <__aeabi_fsub+0x33c>
 80004dc:	28ff      	cmp	r0, #255	; 0xff
 80004de:	d1e6      	bne.n	80004ae <__aeabi_fsub+0x25e>
 80004e0:	464b      	mov	r3, r9
 80004e2:	e77b      	b.n	80003dc <__aeabi_fsub+0x18c>
 80004e4:	2c00      	cmp	r4, #0
 80004e6:	d120      	bne.n	800052a <__aeabi_fsub+0x2da>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d057      	beq.n	800059c <__aeabi_fsub+0x34c>
 80004ec:	4649      	mov	r1, r9
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d053      	beq.n	800059a <__aeabi_fsub+0x34a>
 80004f2:	444b      	add	r3, r9
 80004f4:	015a      	lsls	r2, r3, #5
 80004f6:	d568      	bpl.n	80005ca <__aeabi_fsub+0x37a>
 80004f8:	2407      	movs	r4, #7
 80004fa:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <__aeabi_fsub+0x384>)
 80004fc:	401c      	ands	r4, r3
 80004fe:	2501      	movs	r5, #1
 8000500:	4013      	ands	r3, r2
 8000502:	e6ea      	b.n	80002da <__aeabi_fsub+0x8a>
 8000504:	28ff      	cmp	r0, #255	; 0xff
 8000506:	d0eb      	beq.n	80004e0 <__aeabi_fsub+0x290>
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	04d2      	lsls	r2, r2, #19
 800050c:	4276      	negs	r6, r6
 800050e:	4313      	orrs	r3, r2
 8000510:	2e1b      	cmp	r6, #27
 8000512:	dc53      	bgt.n	80005bc <__aeabi_fsub+0x36c>
 8000514:	2520      	movs	r5, #32
 8000516:	1bad      	subs	r5, r5, r6
 8000518:	001a      	movs	r2, r3
 800051a:	40ab      	lsls	r3, r5
 800051c:	40f2      	lsrs	r2, r6
 800051e:	1e5c      	subs	r4, r3, #1
 8000520:	41a3      	sbcs	r3, r4
 8000522:	4313      	orrs	r3, r2
 8000524:	444b      	add	r3, r9
 8000526:	0005      	movs	r5, r0
 8000528:	e721      	b.n	800036e <__aeabi_fsub+0x11e>
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0d8      	beq.n	80004e0 <__aeabi_fsub+0x290>
 800052e:	4649      	mov	r1, r9
 8000530:	2900      	cmp	r1, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fsub+0x2e6>
 8000534:	e752      	b.n	80003dc <__aeabi_fsub+0x18c>
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	03c9      	lsls	r1, r1, #15
 800053a:	420f      	tst	r7, r1
 800053c:	d100      	bne.n	8000540 <__aeabi_fsub+0x2f0>
 800053e:	e74d      	b.n	80003dc <__aeabi_fsub+0x18c>
 8000540:	4660      	mov	r0, ip
 8000542:	4208      	tst	r0, r1
 8000544:	d000      	beq.n	8000548 <__aeabi_fsub+0x2f8>
 8000546:	e749      	b.n	80003dc <__aeabi_fsub+0x18c>
 8000548:	464b      	mov	r3, r9
 800054a:	e747      	b.n	80003dc <__aeabi_fsub+0x18c>
 800054c:	4648      	mov	r0, r9
 800054e:	25ff      	movs	r5, #255	; 0xff
 8000550:	2800      	cmp	r0, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fsub+0x306>
 8000554:	e74f      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	03d2      	lsls	r2, r2, #15
 800055a:	4217      	tst	r7, r2
 800055c:	d004      	beq.n	8000568 <__aeabi_fsub+0x318>
 800055e:	4660      	mov	r0, ip
 8000560:	4210      	tst	r0, r2
 8000562:	d101      	bne.n	8000568 <__aeabi_fsub+0x318>
 8000564:	464b      	mov	r3, r9
 8000566:	4688      	mov	r8, r1
 8000568:	2201      	movs	r2, #1
 800056a:	4641      	mov	r1, r8
 800056c:	25ff      	movs	r5, #255	; 0xff
 800056e:	400a      	ands	r2, r1
 8000570:	e741      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 8000572:	4648      	mov	r0, r9
 8000574:	2800      	cmp	r0, #0
 8000576:	d01f      	beq.n	80005b8 <__aeabi_fsub+0x368>
 8000578:	1a1a      	subs	r2, r3, r0
 800057a:	0150      	lsls	r0, r2, #5
 800057c:	d520      	bpl.n	80005c0 <__aeabi_fsub+0x370>
 800057e:	464a      	mov	r2, r9
 8000580:	2407      	movs	r4, #7
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	401c      	ands	r4, r3
 8000586:	4688      	mov	r8, r1
 8000588:	2500      	movs	r5, #0
 800058a:	e6a6      	b.n	80002da <__aeabi_fsub+0x8a>
 800058c:	1c74      	adds	r4, r6, #1
 800058e:	d0c9      	beq.n	8000524 <__aeabi_fsub+0x2d4>
 8000590:	43f6      	mvns	r6, r6
 8000592:	28ff      	cmp	r0, #255	; 0xff
 8000594:	d1bc      	bne.n	8000510 <__aeabi_fsub+0x2c0>
 8000596:	464b      	mov	r3, r9
 8000598:	e720      	b.n	80003dc <__aeabi_fsub+0x18c>
 800059a:	4699      	mov	r9, r3
 800059c:	464b      	mov	r3, r9
 800059e:	2500      	movs	r5, #0
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	e72b      	b.n	80003fc <__aeabi_fsub+0x1ac>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e740      	b.n	800042a <__aeabi_fsub+0x1da>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	e6a9      	b.n	8000302 <__aeabi_fsub+0xb2>
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	2200      	movs	r2, #0
 80005b2:	03db      	lsls	r3, r3, #15
 80005b4:	24ff      	movs	r4, #255	; 0xff
 80005b6:	e6a4      	b.n	8000302 <__aeabi_fsub+0xb2>
 80005b8:	2500      	movs	r5, #0
 80005ba:	e71c      	b.n	80003f6 <__aeabi_fsub+0x1a6>
 80005bc:	2301      	movs	r3, #1
 80005be:	e7b1      	b.n	8000524 <__aeabi_fsub+0x2d4>
 80005c0:	2a00      	cmp	r2, #0
 80005c2:	d0f1      	beq.n	80005a8 <__aeabi_fsub+0x358>
 80005c4:	0013      	movs	r3, r2
 80005c6:	2500      	movs	r5, #0
 80005c8:	e6fc      	b.n	80003c4 <__aeabi_fsub+0x174>
 80005ca:	2500      	movs	r5, #0
 80005cc:	e6fa      	b.n	80003c4 <__aeabi_fsub+0x174>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	7dffffff 	.word	0x7dffffff
 80005d4:	fbffffff 	.word	0xfbffffff

080005d8 <__aeabi_f2iz>:
 80005d8:	0241      	lsls	r1, r0, #9
 80005da:	0042      	lsls	r2, r0, #1
 80005dc:	0fc3      	lsrs	r3, r0, #31
 80005de:	0a49      	lsrs	r1, r1, #9
 80005e0:	0e12      	lsrs	r2, r2, #24
 80005e2:	2000      	movs	r0, #0
 80005e4:	2a7e      	cmp	r2, #126	; 0x7e
 80005e6:	d90d      	bls.n	8000604 <__aeabi_f2iz+0x2c>
 80005e8:	2a9d      	cmp	r2, #157	; 0x9d
 80005ea:	d80c      	bhi.n	8000606 <__aeabi_f2iz+0x2e>
 80005ec:	2080      	movs	r0, #128	; 0x80
 80005ee:	0400      	lsls	r0, r0, #16
 80005f0:	4301      	orrs	r1, r0
 80005f2:	2a95      	cmp	r2, #149	; 0x95
 80005f4:	dc0a      	bgt.n	800060c <__aeabi_f2iz+0x34>
 80005f6:	2096      	movs	r0, #150	; 0x96
 80005f8:	1a82      	subs	r2, r0, r2
 80005fa:	40d1      	lsrs	r1, r2
 80005fc:	4248      	negs	r0, r1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d100      	bne.n	8000604 <__aeabi_f2iz+0x2c>
 8000602:	0008      	movs	r0, r1
 8000604:	4770      	bx	lr
 8000606:	4a03      	ldr	r2, [pc, #12]	; (8000614 <__aeabi_f2iz+0x3c>)
 8000608:	1898      	adds	r0, r3, r2
 800060a:	e7fb      	b.n	8000604 <__aeabi_f2iz+0x2c>
 800060c:	3a96      	subs	r2, #150	; 0x96
 800060e:	4091      	lsls	r1, r2
 8000610:	e7f4      	b.n	80005fc <__aeabi_f2iz+0x24>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	7fffffff 	.word	0x7fffffff

08000618 <__aeabi_i2f>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	2800      	cmp	r0, #0
 800061c:	d03d      	beq.n	800069a <__aeabi_i2f+0x82>
 800061e:	17c3      	asrs	r3, r0, #31
 8000620:	18c5      	adds	r5, r0, r3
 8000622:	405d      	eors	r5, r3
 8000624:	0fc4      	lsrs	r4, r0, #31
 8000626:	0028      	movs	r0, r5
 8000628:	f000 fbc2 	bl	8000db0 <__clzsi2>
 800062c:	229e      	movs	r2, #158	; 0x9e
 800062e:	1a12      	subs	r2, r2, r0
 8000630:	2a96      	cmp	r2, #150	; 0x96
 8000632:	dc07      	bgt.n	8000644 <__aeabi_i2f+0x2c>
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	2808      	cmp	r0, #8
 8000638:	dd33      	ble.n	80006a2 <__aeabi_i2f+0x8a>
 800063a:	3808      	subs	r0, #8
 800063c:	4085      	lsls	r5, r0
 800063e:	0268      	lsls	r0, r5, #9
 8000640:	0a40      	lsrs	r0, r0, #9
 8000642:	e023      	b.n	800068c <__aeabi_i2f+0x74>
 8000644:	2a99      	cmp	r2, #153	; 0x99
 8000646:	dd0b      	ble.n	8000660 <__aeabi_i2f+0x48>
 8000648:	2305      	movs	r3, #5
 800064a:	0029      	movs	r1, r5
 800064c:	1a1b      	subs	r3, r3, r0
 800064e:	40d9      	lsrs	r1, r3
 8000650:	0003      	movs	r3, r0
 8000652:	331b      	adds	r3, #27
 8000654:	409d      	lsls	r5, r3
 8000656:	002b      	movs	r3, r5
 8000658:	1e5d      	subs	r5, r3, #1
 800065a:	41ab      	sbcs	r3, r5
 800065c:	4319      	orrs	r1, r3
 800065e:	000d      	movs	r5, r1
 8000660:	2805      	cmp	r0, #5
 8000662:	dd01      	ble.n	8000668 <__aeabi_i2f+0x50>
 8000664:	1f43      	subs	r3, r0, #5
 8000666:	409d      	lsls	r5, r3
 8000668:	002b      	movs	r3, r5
 800066a:	490f      	ldr	r1, [pc, #60]	; (80006a8 <__aeabi_i2f+0x90>)
 800066c:	400b      	ands	r3, r1
 800066e:	076e      	lsls	r6, r5, #29
 8000670:	d009      	beq.n	8000686 <__aeabi_i2f+0x6e>
 8000672:	260f      	movs	r6, #15
 8000674:	4035      	ands	r5, r6
 8000676:	2d04      	cmp	r5, #4
 8000678:	d005      	beq.n	8000686 <__aeabi_i2f+0x6e>
 800067a:	3304      	adds	r3, #4
 800067c:	015d      	lsls	r5, r3, #5
 800067e:	d502      	bpl.n	8000686 <__aeabi_i2f+0x6e>
 8000680:	229f      	movs	r2, #159	; 0x9f
 8000682:	400b      	ands	r3, r1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	019b      	lsls	r3, r3, #6
 8000688:	0a58      	lsrs	r0, r3, #9
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	0240      	lsls	r0, r0, #9
 800068e:	05d2      	lsls	r2, r2, #23
 8000690:	0a40      	lsrs	r0, r0, #9
 8000692:	07e4      	lsls	r4, r4, #31
 8000694:	4310      	orrs	r0, r2
 8000696:	4320      	orrs	r0, r4
 8000698:	bd70      	pop	{r4, r5, r6, pc}
 800069a:	2400      	movs	r4, #0
 800069c:	2200      	movs	r2, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	e7f4      	b.n	800068c <__aeabi_i2f+0x74>
 80006a2:	0268      	lsls	r0, r5, #9
 80006a4:	0a40      	lsrs	r0, r0, #9
 80006a6:	e7f1      	b.n	800068c <__aeabi_i2f+0x74>
 80006a8:	fbffffff 	.word	0xfbffffff

080006ac <__aeabi_dmul>:
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	4657      	mov	r7, sl
 80006b0:	46de      	mov	lr, fp
 80006b2:	464e      	mov	r6, r9
 80006b4:	4645      	mov	r5, r8
 80006b6:	b5e0      	push	{r5, r6, r7, lr}
 80006b8:	4683      	mov	fp, r0
 80006ba:	0006      	movs	r6, r0
 80006bc:	030f      	lsls	r7, r1, #12
 80006be:	0048      	lsls	r0, r1, #1
 80006c0:	b087      	sub	sp, #28
 80006c2:	4692      	mov	sl, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	0b3f      	lsrs	r7, r7, #12
 80006c8:	0d40      	lsrs	r0, r0, #21
 80006ca:	0fcc      	lsrs	r4, r1, #31
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dmul+0x26>
 80006d0:	e06f      	b.n	80007b2 <__aeabi_dmul+0x106>
 80006d2:	4bde      	ldr	r3, [pc, #888]	; (8000a4c <__aeabi_dmul+0x3a0>)
 80006d4:	4298      	cmp	r0, r3
 80006d6:	d038      	beq.n	800074a <__aeabi_dmul+0x9e>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	00ff      	lsls	r7, r7, #3
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	431f      	orrs	r7, r3
 80006e0:	0f73      	lsrs	r3, r6, #29
 80006e2:	433b      	orrs	r3, r7
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4bda      	ldr	r3, [pc, #872]	; (8000a50 <__aeabi_dmul+0x3a4>)
 80006e8:	2700      	movs	r7, #0
 80006ea:	4699      	mov	r9, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	469b      	mov	fp, r3
 80006f0:	00f6      	lsls	r6, r6, #3
 80006f2:	4481      	add	r9, r0
 80006f4:	032b      	lsls	r3, r5, #12
 80006f6:	0069      	lsls	r1, r5, #1
 80006f8:	0b1b      	lsrs	r3, r3, #12
 80006fa:	4652      	mov	r2, sl
 80006fc:	4698      	mov	r8, r3
 80006fe:	0d49      	lsrs	r1, r1, #21
 8000700:	0fed      	lsrs	r5, r5, #31
 8000702:	2900      	cmp	r1, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_dmul+0x5c>
 8000706:	e085      	b.n	8000814 <__aeabi_dmul+0x168>
 8000708:	4bd0      	ldr	r3, [pc, #832]	; (8000a4c <__aeabi_dmul+0x3a0>)
 800070a:	4299      	cmp	r1, r3
 800070c:	d100      	bne.n	8000710 <__aeabi_dmul+0x64>
 800070e:	e073      	b.n	80007f8 <__aeabi_dmul+0x14c>
 8000710:	4643      	mov	r3, r8
 8000712:	00da      	lsls	r2, r3, #3
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	041b      	lsls	r3, r3, #16
 8000718:	4313      	orrs	r3, r2
 800071a:	4652      	mov	r2, sl
 800071c:	48cc      	ldr	r0, [pc, #816]	; (8000a50 <__aeabi_dmul+0x3a4>)
 800071e:	0f52      	lsrs	r2, r2, #29
 8000720:	4684      	mov	ip, r0
 8000722:	4313      	orrs	r3, r2
 8000724:	4652      	mov	r2, sl
 8000726:	2000      	movs	r0, #0
 8000728:	4461      	add	r1, ip
 800072a:	00d2      	lsls	r2, r2, #3
 800072c:	4489      	add	r9, r1
 800072e:	0021      	movs	r1, r4
 8000730:	4069      	eors	r1, r5
 8000732:	9100      	str	r1, [sp, #0]
 8000734:	468c      	mov	ip, r1
 8000736:	2101      	movs	r1, #1
 8000738:	4449      	add	r1, r9
 800073a:	468a      	mov	sl, r1
 800073c:	2f0f      	cmp	r7, #15
 800073e:	d900      	bls.n	8000742 <__aeabi_dmul+0x96>
 8000740:	e090      	b.n	8000864 <__aeabi_dmul+0x1b8>
 8000742:	49c4      	ldr	r1, [pc, #784]	; (8000a54 <__aeabi_dmul+0x3a8>)
 8000744:	00bf      	lsls	r7, r7, #2
 8000746:	59cf      	ldr	r7, [r1, r7]
 8000748:	46bf      	mov	pc, r7
 800074a:	465b      	mov	r3, fp
 800074c:	433b      	orrs	r3, r7
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	d000      	beq.n	8000754 <__aeabi_dmul+0xa8>
 8000752:	e16a      	b.n	8000a2a <__aeabi_dmul+0x37e>
 8000754:	2302      	movs	r3, #2
 8000756:	2708      	movs	r7, #8
 8000758:	2600      	movs	r6, #0
 800075a:	4681      	mov	r9, r0
 800075c:	469b      	mov	fp, r3
 800075e:	e7c9      	b.n	80006f4 <__aeabi_dmul+0x48>
 8000760:	0032      	movs	r2, r6
 8000762:	4658      	mov	r0, fp
 8000764:	9b01      	ldr	r3, [sp, #4]
 8000766:	4661      	mov	r1, ip
 8000768:	9100      	str	r1, [sp, #0]
 800076a:	2802      	cmp	r0, #2
 800076c:	d100      	bne.n	8000770 <__aeabi_dmul+0xc4>
 800076e:	e075      	b.n	800085c <__aeabi_dmul+0x1b0>
 8000770:	2803      	cmp	r0, #3
 8000772:	d100      	bne.n	8000776 <__aeabi_dmul+0xca>
 8000774:	e1fe      	b.n	8000b74 <__aeabi_dmul+0x4c8>
 8000776:	2801      	cmp	r0, #1
 8000778:	d000      	beq.n	800077c <__aeabi_dmul+0xd0>
 800077a:	e12c      	b.n	80009d6 <__aeabi_dmul+0x32a>
 800077c:	2300      	movs	r3, #0
 800077e:	2700      	movs	r7, #0
 8000780:	2600      	movs	r6, #0
 8000782:	2500      	movs	r5, #0
 8000784:	033f      	lsls	r7, r7, #12
 8000786:	0d2a      	lsrs	r2, r5, #20
 8000788:	0b3f      	lsrs	r7, r7, #12
 800078a:	48b3      	ldr	r0, [pc, #716]	; (8000a58 <__aeabi_dmul+0x3ac>)
 800078c:	0512      	lsls	r2, r2, #20
 800078e:	433a      	orrs	r2, r7
 8000790:	4002      	ands	r2, r0
 8000792:	051b      	lsls	r3, r3, #20
 8000794:	4313      	orrs	r3, r2
 8000796:	9a00      	ldr	r2, [sp, #0]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	07d1      	lsls	r1, r2, #31
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	430b      	orrs	r3, r1
 80007a0:	0030      	movs	r0, r6
 80007a2:	0019      	movs	r1, r3
 80007a4:	b007      	add	sp, #28
 80007a6:	bc3c      	pop	{r2, r3, r4, r5}
 80007a8:	4690      	mov	r8, r2
 80007aa:	4699      	mov	r9, r3
 80007ac:	46a2      	mov	sl, r4
 80007ae:	46ab      	mov	fp, r5
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b2:	465b      	mov	r3, fp
 80007b4:	433b      	orrs	r3, r7
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	d100      	bne.n	80007bc <__aeabi_dmul+0x110>
 80007ba:	e12f      	b.n	8000a1c <__aeabi_dmul+0x370>
 80007bc:	2f00      	cmp	r7, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_dmul+0x116>
 80007c0:	e1a5      	b.n	8000b0e <__aeabi_dmul+0x462>
 80007c2:	0038      	movs	r0, r7
 80007c4:	f000 faf4 	bl	8000db0 <__clzsi2>
 80007c8:	0003      	movs	r3, r0
 80007ca:	3b0b      	subs	r3, #11
 80007cc:	2b1c      	cmp	r3, #28
 80007ce:	dd00      	ble.n	80007d2 <__aeabi_dmul+0x126>
 80007d0:	e196      	b.n	8000b00 <__aeabi_dmul+0x454>
 80007d2:	221d      	movs	r2, #29
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	465a      	mov	r2, fp
 80007d8:	0001      	movs	r1, r0
 80007da:	40da      	lsrs	r2, r3
 80007dc:	465e      	mov	r6, fp
 80007de:	3908      	subs	r1, #8
 80007e0:	408f      	lsls	r7, r1
 80007e2:	0013      	movs	r3, r2
 80007e4:	408e      	lsls	r6, r1
 80007e6:	433b      	orrs	r3, r7
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	4b9c      	ldr	r3, [pc, #624]	; (8000a5c <__aeabi_dmul+0x3b0>)
 80007ec:	2700      	movs	r7, #0
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4699      	mov	r9, r3
 80007f2:	2300      	movs	r3, #0
 80007f4:	469b      	mov	fp, r3
 80007f6:	e77d      	b.n	80006f4 <__aeabi_dmul+0x48>
 80007f8:	4641      	mov	r1, r8
 80007fa:	4653      	mov	r3, sl
 80007fc:	430b      	orrs	r3, r1
 80007fe:	4993      	ldr	r1, [pc, #588]	; (8000a4c <__aeabi_dmul+0x3a0>)
 8000800:	468c      	mov	ip, r1
 8000802:	44e1      	add	r9, ip
 8000804:	2b00      	cmp	r3, #0
 8000806:	d000      	beq.n	800080a <__aeabi_dmul+0x15e>
 8000808:	e11a      	b.n	8000a40 <__aeabi_dmul+0x394>
 800080a:	2202      	movs	r2, #2
 800080c:	2002      	movs	r0, #2
 800080e:	4317      	orrs	r7, r2
 8000810:	2200      	movs	r2, #0
 8000812:	e78c      	b.n	800072e <__aeabi_dmul+0x82>
 8000814:	4313      	orrs	r3, r2
 8000816:	d100      	bne.n	800081a <__aeabi_dmul+0x16e>
 8000818:	e10d      	b.n	8000a36 <__aeabi_dmul+0x38a>
 800081a:	4643      	mov	r3, r8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_dmul+0x176>
 8000820:	e181      	b.n	8000b26 <__aeabi_dmul+0x47a>
 8000822:	4640      	mov	r0, r8
 8000824:	f000 fac4 	bl	8000db0 <__clzsi2>
 8000828:	0002      	movs	r2, r0
 800082a:	3a0b      	subs	r2, #11
 800082c:	2a1c      	cmp	r2, #28
 800082e:	dd00      	ble.n	8000832 <__aeabi_dmul+0x186>
 8000830:	e172      	b.n	8000b18 <__aeabi_dmul+0x46c>
 8000832:	0001      	movs	r1, r0
 8000834:	4643      	mov	r3, r8
 8000836:	3908      	subs	r1, #8
 8000838:	408b      	lsls	r3, r1
 800083a:	4698      	mov	r8, r3
 800083c:	231d      	movs	r3, #29
 800083e:	1a9a      	subs	r2, r3, r2
 8000840:	4653      	mov	r3, sl
 8000842:	40d3      	lsrs	r3, r2
 8000844:	001a      	movs	r2, r3
 8000846:	4643      	mov	r3, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	4652      	mov	r2, sl
 800084c:	408a      	lsls	r2, r1
 800084e:	4649      	mov	r1, r9
 8000850:	1a08      	subs	r0, r1, r0
 8000852:	4982      	ldr	r1, [pc, #520]	; (8000a5c <__aeabi_dmul+0x3b0>)
 8000854:	4689      	mov	r9, r1
 8000856:	4481      	add	r9, r0
 8000858:	2000      	movs	r0, #0
 800085a:	e768      	b.n	800072e <__aeabi_dmul+0x82>
 800085c:	4b7b      	ldr	r3, [pc, #492]	; (8000a4c <__aeabi_dmul+0x3a0>)
 800085e:	2700      	movs	r7, #0
 8000860:	2600      	movs	r6, #0
 8000862:	e78e      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000864:	0c14      	lsrs	r4, r2, #16
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	0c12      	lsrs	r2, r2, #16
 800086a:	0011      	movs	r1, r2
 800086c:	0c37      	lsrs	r7, r6, #16
 800086e:	0436      	lsls	r6, r6, #16
 8000870:	0c35      	lsrs	r5, r6, #16
 8000872:	4379      	muls	r1, r7
 8000874:	0028      	movs	r0, r5
 8000876:	468c      	mov	ip, r1
 8000878:	002e      	movs	r6, r5
 800087a:	4360      	muls	r0, r4
 800087c:	4460      	add	r0, ip
 800087e:	4683      	mov	fp, r0
 8000880:	4356      	muls	r6, r2
 8000882:	0021      	movs	r1, r4
 8000884:	0c30      	lsrs	r0, r6, #16
 8000886:	4680      	mov	r8, r0
 8000888:	4658      	mov	r0, fp
 800088a:	4379      	muls	r1, r7
 800088c:	4440      	add	r0, r8
 800088e:	9102      	str	r1, [sp, #8]
 8000890:	4584      	cmp	ip, r0
 8000892:	d906      	bls.n	80008a2 <__aeabi_dmul+0x1f6>
 8000894:	4688      	mov	r8, r1
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	0249      	lsls	r1, r1, #9
 800089a:	468c      	mov	ip, r1
 800089c:	44e0      	add	r8, ip
 800089e:	4641      	mov	r1, r8
 80008a0:	9102      	str	r1, [sp, #8]
 80008a2:	0436      	lsls	r6, r6, #16
 80008a4:	0c01      	lsrs	r1, r0, #16
 80008a6:	0c36      	lsrs	r6, r6, #16
 80008a8:	0400      	lsls	r0, r0, #16
 80008aa:	468b      	mov	fp, r1
 80008ac:	1981      	adds	r1, r0, r6
 80008ae:	0c1e      	lsrs	r6, r3, #16
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	9103      	str	r1, [sp, #12]
 80008b6:	0019      	movs	r1, r3
 80008b8:	4379      	muls	r1, r7
 80008ba:	468c      	mov	ip, r1
 80008bc:	0028      	movs	r0, r5
 80008be:	4375      	muls	r5, r6
 80008c0:	4465      	add	r5, ip
 80008c2:	46a8      	mov	r8, r5
 80008c4:	4358      	muls	r0, r3
 80008c6:	0c05      	lsrs	r5, r0, #16
 80008c8:	4445      	add	r5, r8
 80008ca:	4377      	muls	r7, r6
 80008cc:	42a9      	cmp	r1, r5
 80008ce:	d903      	bls.n	80008d8 <__aeabi_dmul+0x22c>
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0249      	lsls	r1, r1, #9
 80008d4:	468c      	mov	ip, r1
 80008d6:	4467      	add	r7, ip
 80008d8:	0c29      	lsrs	r1, r5, #16
 80008da:	468c      	mov	ip, r1
 80008dc:	0039      	movs	r1, r7
 80008de:	0400      	lsls	r0, r0, #16
 80008e0:	0c00      	lsrs	r0, r0, #16
 80008e2:	042d      	lsls	r5, r5, #16
 80008e4:	182d      	adds	r5, r5, r0
 80008e6:	4461      	add	r1, ip
 80008e8:	44ab      	add	fp, r5
 80008ea:	9105      	str	r1, [sp, #20]
 80008ec:	4659      	mov	r1, fp
 80008ee:	9104      	str	r1, [sp, #16]
 80008f0:	9901      	ldr	r1, [sp, #4]
 80008f2:	040f      	lsls	r7, r1, #16
 80008f4:	0c3f      	lsrs	r7, r7, #16
 80008f6:	0c08      	lsrs	r0, r1, #16
 80008f8:	0039      	movs	r1, r7
 80008fa:	4351      	muls	r1, r2
 80008fc:	4342      	muls	r2, r0
 80008fe:	4690      	mov	r8, r2
 8000900:	0002      	movs	r2, r0
 8000902:	468c      	mov	ip, r1
 8000904:	0c09      	lsrs	r1, r1, #16
 8000906:	468b      	mov	fp, r1
 8000908:	4362      	muls	r2, r4
 800090a:	437c      	muls	r4, r7
 800090c:	4444      	add	r4, r8
 800090e:	445c      	add	r4, fp
 8000910:	45a0      	cmp	r8, r4
 8000912:	d903      	bls.n	800091c <__aeabi_dmul+0x270>
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0249      	lsls	r1, r1, #9
 8000918:	4688      	mov	r8, r1
 800091a:	4442      	add	r2, r8
 800091c:	0c21      	lsrs	r1, r4, #16
 800091e:	4688      	mov	r8, r1
 8000920:	4661      	mov	r1, ip
 8000922:	0409      	lsls	r1, r1, #16
 8000924:	0c09      	lsrs	r1, r1, #16
 8000926:	468c      	mov	ip, r1
 8000928:	0039      	movs	r1, r7
 800092a:	4359      	muls	r1, r3
 800092c:	4343      	muls	r3, r0
 800092e:	4370      	muls	r0, r6
 8000930:	437e      	muls	r6, r7
 8000932:	0c0f      	lsrs	r7, r1, #16
 8000934:	18f6      	adds	r6, r6, r3
 8000936:	0424      	lsls	r4, r4, #16
 8000938:	19be      	adds	r6, r7, r6
 800093a:	4464      	add	r4, ip
 800093c:	4442      	add	r2, r8
 800093e:	468c      	mov	ip, r1
 8000940:	42b3      	cmp	r3, r6
 8000942:	d903      	bls.n	800094c <__aeabi_dmul+0x2a0>
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	025b      	lsls	r3, r3, #9
 8000948:	4698      	mov	r8, r3
 800094a:	4440      	add	r0, r8
 800094c:	9b02      	ldr	r3, [sp, #8]
 800094e:	4661      	mov	r1, ip
 8000950:	4698      	mov	r8, r3
 8000952:	9b04      	ldr	r3, [sp, #16]
 8000954:	0437      	lsls	r7, r6, #16
 8000956:	4443      	add	r3, r8
 8000958:	469b      	mov	fp, r3
 800095a:	45ab      	cmp	fp, r5
 800095c:	41ad      	sbcs	r5, r5
 800095e:	426b      	negs	r3, r5
 8000960:	040d      	lsls	r5, r1, #16
 8000962:	9905      	ldr	r1, [sp, #20]
 8000964:	0c2d      	lsrs	r5, r5, #16
 8000966:	468c      	mov	ip, r1
 8000968:	197f      	adds	r7, r7, r5
 800096a:	4467      	add	r7, ip
 800096c:	18fd      	adds	r5, r7, r3
 800096e:	46a8      	mov	r8, r5
 8000970:	465d      	mov	r5, fp
 8000972:	192d      	adds	r5, r5, r4
 8000974:	42a5      	cmp	r5, r4
 8000976:	41a4      	sbcs	r4, r4
 8000978:	4693      	mov	fp, r2
 800097a:	4264      	negs	r4, r4
 800097c:	46a4      	mov	ip, r4
 800097e:	44c3      	add	fp, r8
 8000980:	44dc      	add	ip, fp
 8000982:	428f      	cmp	r7, r1
 8000984:	41bf      	sbcs	r7, r7
 8000986:	4598      	cmp	r8, r3
 8000988:	419b      	sbcs	r3, r3
 800098a:	4593      	cmp	fp, r2
 800098c:	4192      	sbcs	r2, r2
 800098e:	45a4      	cmp	ip, r4
 8000990:	41a4      	sbcs	r4, r4
 8000992:	425b      	negs	r3, r3
 8000994:	427f      	negs	r7, r7
 8000996:	431f      	orrs	r7, r3
 8000998:	0c36      	lsrs	r6, r6, #16
 800099a:	4252      	negs	r2, r2
 800099c:	4264      	negs	r4, r4
 800099e:	19bf      	adds	r7, r7, r6
 80009a0:	4322      	orrs	r2, r4
 80009a2:	18bf      	adds	r7, r7, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	1838      	adds	r0, r7, r0
 80009a8:	0243      	lsls	r3, r0, #9
 80009aa:	0dd2      	lsrs	r2, r2, #23
 80009ac:	9903      	ldr	r1, [sp, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	026a      	lsls	r2, r5, #9
 80009b2:	430a      	orrs	r2, r1
 80009b4:	1e50      	subs	r0, r2, #1
 80009b6:	4182      	sbcs	r2, r0
 80009b8:	4661      	mov	r1, ip
 80009ba:	0ded      	lsrs	r5, r5, #23
 80009bc:	432a      	orrs	r2, r5
 80009be:	024e      	lsls	r6, r1, #9
 80009c0:	4332      	orrs	r2, r6
 80009c2:	01d9      	lsls	r1, r3, #7
 80009c4:	d400      	bmi.n	80009c8 <__aeabi_dmul+0x31c>
 80009c6:	e0b3      	b.n	8000b30 <__aeabi_dmul+0x484>
 80009c8:	2601      	movs	r6, #1
 80009ca:	0850      	lsrs	r0, r2, #1
 80009cc:	4032      	ands	r2, r6
 80009ce:	4302      	orrs	r2, r0
 80009d0:	07de      	lsls	r6, r3, #31
 80009d2:	4332      	orrs	r2, r6
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	4c22      	ldr	r4, [pc, #136]	; (8000a60 <__aeabi_dmul+0x3b4>)
 80009d8:	4454      	add	r4, sl
 80009da:	2c00      	cmp	r4, #0
 80009dc:	dd62      	ble.n	8000aa4 <__aeabi_dmul+0x3f8>
 80009de:	0751      	lsls	r1, r2, #29
 80009e0:	d009      	beq.n	80009f6 <__aeabi_dmul+0x34a>
 80009e2:	200f      	movs	r0, #15
 80009e4:	4010      	ands	r0, r2
 80009e6:	2804      	cmp	r0, #4
 80009e8:	d005      	beq.n	80009f6 <__aeabi_dmul+0x34a>
 80009ea:	1d10      	adds	r0, r2, #4
 80009ec:	4290      	cmp	r0, r2
 80009ee:	4192      	sbcs	r2, r2
 80009f0:	4252      	negs	r2, r2
 80009f2:	189b      	adds	r3, r3, r2
 80009f4:	0002      	movs	r2, r0
 80009f6:	01d9      	lsls	r1, r3, #7
 80009f8:	d504      	bpl.n	8000a04 <__aeabi_dmul+0x358>
 80009fa:	2480      	movs	r4, #128	; 0x80
 80009fc:	4819      	ldr	r0, [pc, #100]	; (8000a64 <__aeabi_dmul+0x3b8>)
 80009fe:	00e4      	lsls	r4, r4, #3
 8000a00:	4003      	ands	r3, r0
 8000a02:	4454      	add	r4, sl
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <__aeabi_dmul+0x3bc>)
 8000a06:	4284      	cmp	r4, r0
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dmul+0x360>
 8000a0a:	e727      	b.n	800085c <__aeabi_dmul+0x1b0>
 8000a0c:	075e      	lsls	r6, r3, #29
 8000a0e:	025b      	lsls	r3, r3, #9
 8000a10:	08d2      	lsrs	r2, r2, #3
 8000a12:	0b1f      	lsrs	r7, r3, #12
 8000a14:	0563      	lsls	r3, r4, #21
 8000a16:	4316      	orrs	r6, r2
 8000a18:	0d5b      	lsrs	r3, r3, #21
 8000a1a:	e6b2      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3301      	adds	r3, #1
 8000a22:	2704      	movs	r7, #4
 8000a24:	2600      	movs	r6, #0
 8000a26:	469b      	mov	fp, r3
 8000a28:	e664      	b.n	80006f4 <__aeabi_dmul+0x48>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	9701      	str	r7, [sp, #4]
 8000a2e:	4681      	mov	r9, r0
 8000a30:	270c      	movs	r7, #12
 8000a32:	469b      	mov	fp, r3
 8000a34:	e65e      	b.n	80006f4 <__aeabi_dmul+0x48>
 8000a36:	2201      	movs	r2, #1
 8000a38:	2001      	movs	r0, #1
 8000a3a:	4317      	orrs	r7, r2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e676      	b.n	800072e <__aeabi_dmul+0x82>
 8000a40:	2303      	movs	r3, #3
 8000a42:	2003      	movs	r0, #3
 8000a44:	431f      	orrs	r7, r3
 8000a46:	4643      	mov	r3, r8
 8000a48:	e671      	b.n	800072e <__aeabi_dmul+0x82>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	000007ff 	.word	0x000007ff
 8000a50:	fffffc01 	.word	0xfffffc01
 8000a54:	08003924 	.word	0x08003924
 8000a58:	800fffff 	.word	0x800fffff
 8000a5c:	fffffc0d 	.word	0xfffffc0d
 8000a60:	000003ff 	.word	0x000003ff
 8000a64:	feffffff 	.word	0xfeffffff
 8000a68:	000007fe 	.word	0x000007fe
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2780      	movs	r7, #128	; 0x80
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	033f      	lsls	r7, r7, #12
 8000a74:	2600      	movs	r6, #0
 8000a76:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <__aeabi_dmul+0x4d8>)
 8000a78:	e683      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	0032      	movs	r2, r6
 8000a7e:	46a4      	mov	ip, r4
 8000a80:	4658      	mov	r0, fp
 8000a82:	e670      	b.n	8000766 <__aeabi_dmul+0xba>
 8000a84:	46ac      	mov	ip, r5
 8000a86:	e66e      	b.n	8000766 <__aeabi_dmul+0xba>
 8000a88:	2780      	movs	r7, #128	; 0x80
 8000a8a:	9901      	ldr	r1, [sp, #4]
 8000a8c:	033f      	lsls	r7, r7, #12
 8000a8e:	4239      	tst	r1, r7
 8000a90:	d02d      	beq.n	8000aee <__aeabi_dmul+0x442>
 8000a92:	423b      	tst	r3, r7
 8000a94:	d12b      	bne.n	8000aee <__aeabi_dmul+0x442>
 8000a96:	431f      	orrs	r7, r3
 8000a98:	033f      	lsls	r7, r7, #12
 8000a9a:	0b3f      	lsrs	r7, r7, #12
 8000a9c:	9500      	str	r5, [sp, #0]
 8000a9e:	0016      	movs	r6, r2
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <__aeabi_dmul+0x4d8>)
 8000aa2:	e66e      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000aa4:	2501      	movs	r5, #1
 8000aa6:	1b2d      	subs	r5, r5, r4
 8000aa8:	2d38      	cmp	r5, #56	; 0x38
 8000aaa:	dd00      	ble.n	8000aae <__aeabi_dmul+0x402>
 8000aac:	e666      	b.n	800077c <__aeabi_dmul+0xd0>
 8000aae:	2d1f      	cmp	r5, #31
 8000ab0:	dc40      	bgt.n	8000b34 <__aeabi_dmul+0x488>
 8000ab2:	4835      	ldr	r0, [pc, #212]	; (8000b88 <__aeabi_dmul+0x4dc>)
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	4450      	add	r0, sl
 8000ab8:	0016      	movs	r6, r2
 8000aba:	4082      	lsls	r2, r0
 8000abc:	4084      	lsls	r4, r0
 8000abe:	40ee      	lsrs	r6, r5
 8000ac0:	1e50      	subs	r0, r2, #1
 8000ac2:	4182      	sbcs	r2, r0
 8000ac4:	4334      	orrs	r4, r6
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	40eb      	lsrs	r3, r5
 8000aca:	0762      	lsls	r2, r4, #29
 8000acc:	d009      	beq.n	8000ae2 <__aeabi_dmul+0x436>
 8000ace:	220f      	movs	r2, #15
 8000ad0:	4022      	ands	r2, r4
 8000ad2:	2a04      	cmp	r2, #4
 8000ad4:	d005      	beq.n	8000ae2 <__aeabi_dmul+0x436>
 8000ad6:	0022      	movs	r2, r4
 8000ad8:	1d14      	adds	r4, r2, #4
 8000ada:	4294      	cmp	r4, r2
 8000adc:	4180      	sbcs	r0, r0
 8000ade:	4240      	negs	r0, r0
 8000ae0:	181b      	adds	r3, r3, r0
 8000ae2:	021a      	lsls	r2, r3, #8
 8000ae4:	d53e      	bpl.n	8000b64 <__aeabi_dmul+0x4b8>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2700      	movs	r7, #0
 8000aea:	2600      	movs	r6, #0
 8000aec:	e649      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000aee:	2780      	movs	r7, #128	; 0x80
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	033f      	lsls	r7, r7, #12
 8000af4:	431f      	orrs	r7, r3
 8000af6:	033f      	lsls	r7, r7, #12
 8000af8:	0b3f      	lsrs	r7, r7, #12
 8000afa:	9400      	str	r4, [sp, #0]
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <__aeabi_dmul+0x4d8>)
 8000afe:	e640      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000b00:	0003      	movs	r3, r0
 8000b02:	465a      	mov	r2, fp
 8000b04:	3b28      	subs	r3, #40	; 0x28
 8000b06:	409a      	lsls	r2, r3
 8000b08:	2600      	movs	r6, #0
 8000b0a:	9201      	str	r2, [sp, #4]
 8000b0c:	e66d      	b.n	80007ea <__aeabi_dmul+0x13e>
 8000b0e:	4658      	mov	r0, fp
 8000b10:	f000 f94e 	bl	8000db0 <__clzsi2>
 8000b14:	3020      	adds	r0, #32
 8000b16:	e657      	b.n	80007c8 <__aeabi_dmul+0x11c>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	4652      	mov	r2, sl
 8000b1c:	3b28      	subs	r3, #40	; 0x28
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	e693      	b.n	800084e <__aeabi_dmul+0x1a2>
 8000b26:	4650      	mov	r0, sl
 8000b28:	f000 f942 	bl	8000db0 <__clzsi2>
 8000b2c:	3020      	adds	r0, #32
 8000b2e:	e67b      	b.n	8000828 <__aeabi_dmul+0x17c>
 8000b30:	46ca      	mov	sl, r9
 8000b32:	e750      	b.n	80009d6 <__aeabi_dmul+0x32a>
 8000b34:	201f      	movs	r0, #31
 8000b36:	001e      	movs	r6, r3
 8000b38:	4240      	negs	r0, r0
 8000b3a:	1b04      	subs	r4, r0, r4
 8000b3c:	40e6      	lsrs	r6, r4
 8000b3e:	2d20      	cmp	r5, #32
 8000b40:	d003      	beq.n	8000b4a <__aeabi_dmul+0x49e>
 8000b42:	4c12      	ldr	r4, [pc, #72]	; (8000b8c <__aeabi_dmul+0x4e0>)
 8000b44:	4454      	add	r4, sl
 8000b46:	40a3      	lsls	r3, r4
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	1e50      	subs	r0, r2, #1
 8000b4c:	4182      	sbcs	r2, r0
 8000b4e:	4332      	orrs	r2, r6
 8000b50:	2607      	movs	r6, #7
 8000b52:	2700      	movs	r7, #0
 8000b54:	4016      	ands	r6, r2
 8000b56:	d009      	beq.n	8000b6c <__aeabi_dmul+0x4c0>
 8000b58:	200f      	movs	r0, #15
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	4010      	ands	r0, r2
 8000b5e:	0014      	movs	r4, r2
 8000b60:	2804      	cmp	r0, #4
 8000b62:	d1b9      	bne.n	8000ad8 <__aeabi_dmul+0x42c>
 8000b64:	0022      	movs	r2, r4
 8000b66:	075e      	lsls	r6, r3, #29
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0b1f      	lsrs	r7, r3, #12
 8000b6c:	08d2      	lsrs	r2, r2, #3
 8000b6e:	4316      	orrs	r6, r2
 8000b70:	2300      	movs	r3, #0
 8000b72:	e606      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000b74:	2780      	movs	r7, #128	; 0x80
 8000b76:	033f      	lsls	r7, r7, #12
 8000b78:	431f      	orrs	r7, r3
 8000b7a:	033f      	lsls	r7, r7, #12
 8000b7c:	0b3f      	lsrs	r7, r7, #12
 8000b7e:	0016      	movs	r6, r2
 8000b80:	4b00      	ldr	r3, [pc, #0]	; (8000b84 <__aeabi_dmul+0x4d8>)
 8000b82:	e5fe      	b.n	8000782 <__aeabi_dmul+0xd6>
 8000b84:	000007ff 	.word	0x000007ff
 8000b88:	0000041e 	.word	0x0000041e
 8000b8c:	0000043e 	.word	0x0000043e

08000b90 <__aeabi_f2d>:
 8000b90:	0041      	lsls	r1, r0, #1
 8000b92:	0e09      	lsrs	r1, r1, #24
 8000b94:	1c4b      	adds	r3, r1, #1
 8000b96:	b570      	push	{r4, r5, r6, lr}
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	0246      	lsls	r6, r0, #9
 8000b9c:	0a75      	lsrs	r5, r6, #9
 8000b9e:	0fc4      	lsrs	r4, r0, #31
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	dd14      	ble.n	8000bce <__aeabi_f2d+0x3e>
 8000ba4:	23e0      	movs	r3, #224	; 0xe0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	076d      	lsls	r5, r5, #29
 8000baa:	0b36      	lsrs	r6, r6, #12
 8000bac:	18cb      	adds	r3, r1, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	0d0a      	lsrs	r2, r1, #20
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	0512      	lsls	r2, r2, #20
 8000bb6:	4d1c      	ldr	r5, [pc, #112]	; (8000c28 <__aeabi_f2d+0x98>)
 8000bb8:	4332      	orrs	r2, r6
 8000bba:	055b      	lsls	r3, r3, #21
 8000bbc:	402a      	ands	r2, r5
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	07e4      	lsls	r4, r4, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	0019      	movs	r1, r3
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d114      	bne.n	8000bfc <__aeabi_f2d+0x6c>
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d01e      	beq.n	8000c14 <__aeabi_f2d+0x84>
 8000bd6:	0028      	movs	r0, r5
 8000bd8:	f000 f8ea 	bl	8000db0 <__clzsi2>
 8000bdc:	280a      	cmp	r0, #10
 8000bde:	dc1c      	bgt.n	8000c1a <__aeabi_f2d+0x8a>
 8000be0:	230b      	movs	r3, #11
 8000be2:	002a      	movs	r2, r5
 8000be4:	1a1b      	subs	r3, r3, r0
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	0003      	movs	r3, r0
 8000bea:	3315      	adds	r3, #21
 8000bec:	409d      	lsls	r5, r3
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <__aeabi_f2d+0x9c>)
 8000bf0:	0312      	lsls	r2, r2, #12
 8000bf2:	1a1b      	subs	r3, r3, r0
 8000bf4:	055b      	lsls	r3, r3, #21
 8000bf6:	0b16      	lsrs	r6, r2, #12
 8000bf8:	0d5b      	lsrs	r3, r3, #21
 8000bfa:	e7d8      	b.n	8000bae <__aeabi_f2d+0x1e>
 8000bfc:	2d00      	cmp	r5, #0
 8000bfe:	d006      	beq.n	8000c0e <__aeabi_f2d+0x7e>
 8000c00:	0b32      	lsrs	r2, r6, #12
 8000c02:	2680      	movs	r6, #128	; 0x80
 8000c04:	0336      	lsls	r6, r6, #12
 8000c06:	076d      	lsls	r5, r5, #29
 8000c08:	4316      	orrs	r6, r2
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <__aeabi_f2d+0xa0>)
 8000c0c:	e7cf      	b.n	8000bae <__aeabi_f2d+0x1e>
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <__aeabi_f2d+0xa0>)
 8000c10:	2600      	movs	r6, #0
 8000c12:	e7cc      	b.n	8000bae <__aeabi_f2d+0x1e>
 8000c14:	2300      	movs	r3, #0
 8000c16:	2600      	movs	r6, #0
 8000c18:	e7c9      	b.n	8000bae <__aeabi_f2d+0x1e>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	002a      	movs	r2, r5
 8000c1e:	3b0b      	subs	r3, #11
 8000c20:	409a      	lsls	r2, r3
 8000c22:	2500      	movs	r5, #0
 8000c24:	e7e3      	b.n	8000bee <__aeabi_f2d+0x5e>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	800fffff 	.word	0x800fffff
 8000c2c:	00000389 	.word	0x00000389
 8000c30:	000007ff 	.word	0x000007ff

08000c34 <__aeabi_d2f>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	004c      	lsls	r4, r1, #1
 8000c38:	0d64      	lsrs	r4, r4, #21
 8000c3a:	030b      	lsls	r3, r1, #12
 8000c3c:	1c62      	adds	r2, r4, #1
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	0f46      	lsrs	r6, r0, #29
 8000c42:	0552      	lsls	r2, r2, #21
 8000c44:	0fc9      	lsrs	r1, r1, #31
 8000c46:	431e      	orrs	r6, r3
 8000c48:	00c5      	lsls	r5, r0, #3
 8000c4a:	0d52      	lsrs	r2, r2, #21
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	dd29      	ble.n	8000ca4 <__aeabi_d2f+0x70>
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <__aeabi_d2f+0xfc>)
 8000c52:	18e7      	adds	r7, r4, r3
 8000c54:	2ffe      	cmp	r7, #254	; 0xfe
 8000c56:	dc1c      	bgt.n	8000c92 <__aeabi_d2f+0x5e>
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	dd3b      	ble.n	8000cd4 <__aeabi_d2f+0xa0>
 8000c5c:	0180      	lsls	r0, r0, #6
 8000c5e:	1e43      	subs	r3, r0, #1
 8000c60:	4198      	sbcs	r0, r3
 8000c62:	2207      	movs	r2, #7
 8000c64:	00f3      	lsls	r3, r6, #3
 8000c66:	0f6d      	lsrs	r5, r5, #29
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	432b      	orrs	r3, r5
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d004      	beq.n	8000c7c <__aeabi_d2f+0x48>
 8000c72:	220f      	movs	r2, #15
 8000c74:	401a      	ands	r2, r3
 8000c76:	2a04      	cmp	r2, #4
 8000c78:	d000      	beq.n	8000c7c <__aeabi_d2f+0x48>
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	04d2      	lsls	r2, r2, #19
 8000c80:	401a      	ands	r2, r3
 8000c82:	d024      	beq.n	8000cce <__aeabi_d2f+0x9a>
 8000c84:	3701      	adds	r7, #1
 8000c86:	b2fa      	uxtb	r2, r7
 8000c88:	2fff      	cmp	r7, #255	; 0xff
 8000c8a:	d002      	beq.n	8000c92 <__aeabi_d2f+0x5e>
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	0a58      	lsrs	r0, r3, #9
 8000c90:	e001      	b.n	8000c96 <__aeabi_d2f+0x62>
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	2000      	movs	r0, #0
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	05d2      	lsls	r2, r2, #23
 8000c9a:	0a40      	lsrs	r0, r0, #9
 8000c9c:	07c9      	lsls	r1, r1, #31
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4308      	orrs	r0, r1
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca4:	4335      	orrs	r5, r6
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	d104      	bne.n	8000cb4 <__aeabi_d2f+0x80>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d10a      	bne.n	8000cc4 <__aeabi_d2f+0x90>
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7f0      	b.n	8000c96 <__aeabi_d2f+0x62>
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d0ec      	beq.n	8000c92 <__aeabi_d2f+0x5e>
 8000cb8:	2080      	movs	r0, #128	; 0x80
 8000cba:	03c0      	lsls	r0, r0, #15
 8000cbc:	4330      	orrs	r0, r6
 8000cbe:	22ff      	movs	r2, #255	; 0xff
 8000cc0:	e7e9      	b.n	8000c96 <__aeabi_d2f+0x62>
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	0a58      	lsrs	r0, r3, #9
 8000cca:	b2e2      	uxtb	r2, r4
 8000ccc:	e7e3      	b.n	8000c96 <__aeabi_d2f+0x62>
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	003c      	movs	r4, r7
 8000cd2:	e7f8      	b.n	8000cc6 <__aeabi_d2f+0x92>
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	3317      	adds	r3, #23
 8000cd8:	dbf3      	blt.n	8000cc2 <__aeabi_d2f+0x8e>
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	041b      	lsls	r3, r3, #16
 8000cde:	4333      	orrs	r3, r6
 8000ce0:	261e      	movs	r6, #30
 8000ce2:	1bf6      	subs	r6, r6, r7
 8000ce4:	2e1f      	cmp	r6, #31
 8000ce6:	dd14      	ble.n	8000d12 <__aeabi_d2f+0xde>
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4252      	negs	r2, r2
 8000cec:	1bd7      	subs	r7, r2, r7
 8000cee:	001a      	movs	r2, r3
 8000cf0:	40fa      	lsrs	r2, r7
 8000cf2:	0017      	movs	r7, r2
 8000cf4:	2e20      	cmp	r6, #32
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_d2f+0xce>
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <__aeabi_d2f+0x100>)
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	4464      	add	r4, ip
 8000cfe:	40a3      	lsls	r3, r4
 8000d00:	431d      	orrs	r5, r3
 8000d02:	002b      	movs	r3, r5
 8000d04:	1e5d      	subs	r5, r3, #1
 8000d06:	41ab      	sbcs	r3, r5
 8000d08:	2207      	movs	r2, #7
 8000d0a:	433b      	orrs	r3, r7
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	2700      	movs	r7, #0
 8000d10:	e7ad      	b.n	8000c6e <__aeabi_d2f+0x3a>
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <__aeabi_d2f+0x104>)
 8000d14:	0028      	movs	r0, r5
 8000d16:	18a2      	adds	r2, r4, r2
 8000d18:	4095      	lsls	r5, r2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	1e6c      	subs	r4, r5, #1
 8000d1e:	41a5      	sbcs	r5, r4
 8000d20:	40f0      	lsrs	r0, r6
 8000d22:	2207      	movs	r2, #7
 8000d24:	432b      	orrs	r3, r5
 8000d26:	4303      	orrs	r3, r0
 8000d28:	401a      	ands	r2, r3
 8000d2a:	2700      	movs	r7, #0
 8000d2c:	e79f      	b.n	8000c6e <__aeabi_d2f+0x3a>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	fffffc80 	.word	0xfffffc80
 8000d34:	fffffca2 	.word	0xfffffca2
 8000d38:	fffffc82 	.word	0xfffffc82

08000d3c <__aeabi_cfrcmple>:
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	1c08      	adds	r0, r1, #0
 8000d40:	4661      	mov	r1, ip
 8000d42:	e7ff      	b.n	8000d44 <__aeabi_cfcmpeq>

08000d44 <__aeabi_cfcmpeq>:
 8000d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d46:	f000 f8c7 	bl	8000ed8 <__lesf2>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d401      	bmi.n	8000d52 <__aeabi_cfcmpeq+0xe>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	42c8      	cmn	r0, r1
 8000d52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d54 <__aeabi_fcmpeq>:
 8000d54:	b510      	push	{r4, lr}
 8000d56:	f000 f849 	bl	8000dec <__eqsf2>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <__aeabi_fcmplt>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	f000 f8b9 	bl	8000ed8 <__lesf2>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	db01      	blt.n	8000d6e <__aeabi_fcmplt+0xe>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)

08000d74 <__aeabi_fcmple>:
 8000d74:	b510      	push	{r4, lr}
 8000d76:	f000 f8af 	bl	8000ed8 <__lesf2>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	dd01      	ble.n	8000d82 <__aeabi_fcmple+0xe>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	2001      	movs	r0, #1
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)

08000d88 <__aeabi_fcmpgt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f857 	bl	8000e3c <__gesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	dc01      	bgt.n	8000d96 <__aeabi_fcmpgt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmpge>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f84d 	bl	8000e3c <__gesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	da01      	bge.n	8000daa <__aeabi_fcmpge+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__clzsi2>:
 8000db0:	211c      	movs	r1, #28
 8000db2:	2301      	movs	r3, #1
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d301      	bcc.n	8000dbe <__clzsi2+0xe>
 8000dba:	0c00      	lsrs	r0, r0, #16
 8000dbc:	3910      	subs	r1, #16
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d301      	bcc.n	8000dc8 <__clzsi2+0x18>
 8000dc4:	0a00      	lsrs	r0, r0, #8
 8000dc6:	3908      	subs	r1, #8
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d301      	bcc.n	8000dd2 <__clzsi2+0x22>
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	3904      	subs	r1, #4
 8000dd2:	a202      	add	r2, pc, #8	; (adr r2, 8000ddc <__clzsi2+0x2c>)
 8000dd4:	5c10      	ldrb	r0, [r2, r0]
 8000dd6:	1840      	adds	r0, r0, r1
 8000dd8:	4770      	bx	lr
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	02020304 	.word	0x02020304
 8000de0:	01010101 	.word	0x01010101
	...

08000dec <__eqsf2>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	0042      	lsls	r2, r0, #1
 8000df0:	024e      	lsls	r6, r1, #9
 8000df2:	004c      	lsls	r4, r1, #1
 8000df4:	0245      	lsls	r5, r0, #9
 8000df6:	0a6d      	lsrs	r5, r5, #9
 8000df8:	0e12      	lsrs	r2, r2, #24
 8000dfa:	0fc3      	lsrs	r3, r0, #31
 8000dfc:	0a76      	lsrs	r6, r6, #9
 8000dfe:	0e24      	lsrs	r4, r4, #24
 8000e00:	0fc9      	lsrs	r1, r1, #31
 8000e02:	2aff      	cmp	r2, #255	; 0xff
 8000e04:	d00f      	beq.n	8000e26 <__eqsf2+0x3a>
 8000e06:	2cff      	cmp	r4, #255	; 0xff
 8000e08:	d011      	beq.n	8000e2e <__eqsf2+0x42>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	42a2      	cmp	r2, r4
 8000e0e:	d000      	beq.n	8000e12 <__eqsf2+0x26>
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
 8000e12:	42b5      	cmp	r5, r6
 8000e14:	d1fc      	bne.n	8000e10 <__eqsf2+0x24>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d00d      	beq.n	8000e36 <__eqsf2+0x4a>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d1f8      	bne.n	8000e10 <__eqsf2+0x24>
 8000e1e:	0028      	movs	r0, r5
 8000e20:	1e45      	subs	r5, r0, #1
 8000e22:	41a8      	sbcs	r0, r5
 8000e24:	e7f4      	b.n	8000e10 <__eqsf2+0x24>
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d1f1      	bne.n	8000e10 <__eqsf2+0x24>
 8000e2c:	e7eb      	b.n	8000e06 <__eqsf2+0x1a>
 8000e2e:	2001      	movs	r0, #1
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d1ed      	bne.n	8000e10 <__eqsf2+0x24>
 8000e34:	e7e9      	b.n	8000e0a <__eqsf2+0x1e>
 8000e36:	2000      	movs	r0, #0
 8000e38:	e7ea      	b.n	8000e10 <__eqsf2+0x24>
 8000e3a:	46c0      	nop			; (mov r8, r8)

08000e3c <__gesf2>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	004a      	lsls	r2, r1, #1
 8000e40:	024e      	lsls	r6, r1, #9
 8000e42:	0245      	lsls	r5, r0, #9
 8000e44:	0044      	lsls	r4, r0, #1
 8000e46:	0a6d      	lsrs	r5, r5, #9
 8000e48:	0e24      	lsrs	r4, r4, #24
 8000e4a:	0fc3      	lsrs	r3, r0, #31
 8000e4c:	0a76      	lsrs	r6, r6, #9
 8000e4e:	0e12      	lsrs	r2, r2, #24
 8000e50:	0fc9      	lsrs	r1, r1, #31
 8000e52:	2cff      	cmp	r4, #255	; 0xff
 8000e54:	d015      	beq.n	8000e82 <__gesf2+0x46>
 8000e56:	2aff      	cmp	r2, #255	; 0xff
 8000e58:	d00e      	beq.n	8000e78 <__gesf2+0x3c>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d115      	bne.n	8000e8a <__gesf2+0x4e>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d101      	bne.n	8000e66 <__gesf2+0x2a>
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d01c      	beq.n	8000ea0 <__gesf2+0x64>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d014      	beq.n	8000e94 <__gesf2+0x58>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d027      	beq.n	8000ebe <__gesf2+0x82>
 8000e6e:	2002      	movs	r0, #2
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4018      	ands	r0, r3
 8000e74:	3801      	subs	r0, #1
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d0ee      	beq.n	8000e5a <__gesf2+0x1e>
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	4240      	negs	r0, r0
 8000e80:	e7f9      	b.n	8000e76 <__gesf2+0x3a>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d1fa      	bne.n	8000e7c <__gesf2+0x40>
 8000e86:	2aff      	cmp	r2, #255	; 0xff
 8000e88:	d00e      	beq.n	8000ea8 <__gesf2+0x6c>
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d10e      	bne.n	8000eac <__gesf2+0x70>
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d0ed      	beq.n	8000e6e <__gesf2+0x32>
 8000e92:	e00b      	b.n	8000eac <__gesf2+0x70>
 8000e94:	2301      	movs	r3, #1
 8000e96:	3901      	subs	r1, #1
 8000e98:	4399      	bics	r1, r3
 8000e9a:	0008      	movs	r0, r1
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	e7ea      	b.n	8000e76 <__gesf2+0x3a>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e7      	beq.n	8000e76 <__gesf2+0x3a>
 8000ea6:	e7e2      	b.n	8000e6e <__gesf2+0x32>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d1e7      	bne.n	8000e7c <__gesf2+0x40>
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d1de      	bne.n	8000e6e <__gesf2+0x32>
 8000eb0:	4294      	cmp	r4, r2
 8000eb2:	dd05      	ble.n	8000ec0 <__gesf2+0x84>
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	1e58      	subs	r0, r3, #1
 8000eb8:	4008      	ands	r0, r1
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7db      	b.n	8000e76 <__gesf2+0x3a>
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	42a2      	cmp	r2, r4
 8000ec2:	dc04      	bgt.n	8000ece <__gesf2+0x92>
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	d8d2      	bhi.n	8000e6e <__gesf2+0x32>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	42b5      	cmp	r5, r6
 8000ecc:	d2d3      	bcs.n	8000e76 <__gesf2+0x3a>
 8000ece:	1e58      	subs	r0, r3, #1
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4398      	bics	r0, r3
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	e7ce      	b.n	8000e76 <__gesf2+0x3a>

08000ed8 <__lesf2>:
 8000ed8:	b530      	push	{r4, r5, lr}
 8000eda:	0042      	lsls	r2, r0, #1
 8000edc:	0244      	lsls	r4, r0, #9
 8000ede:	024d      	lsls	r5, r1, #9
 8000ee0:	0fc3      	lsrs	r3, r0, #31
 8000ee2:	0048      	lsls	r0, r1, #1
 8000ee4:	0a64      	lsrs	r4, r4, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	0a6d      	lsrs	r5, r5, #9
 8000eea:	0e00      	lsrs	r0, r0, #24
 8000eec:	0fc9      	lsrs	r1, r1, #31
 8000eee:	2aff      	cmp	r2, #255	; 0xff
 8000ef0:	d012      	beq.n	8000f18 <__lesf2+0x40>
 8000ef2:	28ff      	cmp	r0, #255	; 0xff
 8000ef4:	d00c      	beq.n	8000f10 <__lesf2+0x38>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d112      	bne.n	8000f20 <__lesf2+0x48>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d119      	bne.n	8000f32 <__lesf2+0x5a>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d117      	bne.n	8000f32 <__lesf2+0x5a>
 8000f02:	2c00      	cmp	r4, #0
 8000f04:	d02b      	beq.n	8000f5e <__lesf2+0x86>
 8000f06:	2002      	movs	r0, #2
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	4018      	ands	r0, r3
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e026      	b.n	8000f5e <__lesf2+0x86>
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d0f0      	beq.n	8000ef6 <__lesf2+0x1e>
 8000f14:	2002      	movs	r0, #2
 8000f16:	e022      	b.n	8000f5e <__lesf2+0x86>
 8000f18:	2c00      	cmp	r4, #0
 8000f1a:	d1fb      	bne.n	8000f14 <__lesf2+0x3c>
 8000f1c:	28ff      	cmp	r0, #255	; 0xff
 8000f1e:	d01f      	beq.n	8000f60 <__lesf2+0x88>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d11f      	bne.n	8000f64 <__lesf2+0x8c>
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d11d      	bne.n	8000f64 <__lesf2+0x8c>
 8000f28:	2002      	movs	r0, #2
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4018      	ands	r0, r3
 8000f2e:	3801      	subs	r0, #1
 8000f30:	e015      	b.n	8000f5e <__lesf2+0x86>
 8000f32:	2c00      	cmp	r4, #0
 8000f34:	d00e      	beq.n	8000f54 <__lesf2+0x7c>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d1e5      	bne.n	8000f06 <__lesf2+0x2e>
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	dc04      	bgt.n	8000f4a <__lesf2+0x72>
 8000f40:	42ac      	cmp	r4, r5
 8000f42:	d8e0      	bhi.n	8000f06 <__lesf2+0x2e>
 8000f44:	2000      	movs	r0, #0
 8000f46:	42ac      	cmp	r4, r5
 8000f48:	d209      	bcs.n	8000f5e <__lesf2+0x86>
 8000f4a:	1e58      	subs	r0, r3, #1
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4398      	bics	r0, r3
 8000f50:	3001      	adds	r0, #1
 8000f52:	e004      	b.n	8000f5e <__lesf2+0x86>
 8000f54:	2301      	movs	r3, #1
 8000f56:	3901      	subs	r1, #1
 8000f58:	4399      	bics	r1, r3
 8000f5a:	0008      	movs	r0, r1
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	bd30      	pop	{r4, r5, pc}
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	d1d7      	bne.n	8000f14 <__lesf2+0x3c>
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d1ce      	bne.n	8000f06 <__lesf2+0x2e>
 8000f68:	4282      	cmp	r2, r0
 8000f6a:	dde7      	ble.n	8000f3c <__lesf2+0x64>
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	1e58      	subs	r0, r3, #1
 8000f70:	4008      	ands	r0, r1
 8000f72:	3801      	subs	r0, #1
 8000f74:	e7f3      	b.n	8000f5e <__lesf2+0x86>
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x3c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Init+0x3c>)
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 f811 	bl	8000fb8 <HAL_InitTick>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e001      	b.n	8000fa6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa2:	f002 fb47 	bl	8003634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_InitTick+0x50>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	23fa      	movs	r3, #250	; 0xfa
 8000fce:	0099      	lsls	r1, r3, #2
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	f7ff f899 	bl	8000108 <__udivsi3>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 fca2 	bl	8001922 <HAL_SYSTICK_Config>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d004      	beq.n	8000fec <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e006      	b.n	8000ffa <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fc6f 	bl	80018d8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  uwTick++;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_IncTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_IncTick+0x14>)
 8001018:	601a      	str	r2, [r3, #0]
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <HAL_GetTick+0x10>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000058 	.word	0x20000058

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff fff0 	bl	8001024 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	d002      	beq.n	8001058 <HAL_Delay+0x20>
  {
    wait++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	f7ff ffe3 	bl	8001024 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	429a      	cmp	r2, r3
 8001068:	d8f7      	bhi.n	800105a <HAL_Delay+0x22>
  {
  }
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_SuspendTick+0x18>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_SuspendTick+0x18>)
 800107e:	2102      	movs	r1, #2
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_ResumeTick+0x18>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_ResumeTick+0x18>)
 800109a:	2102      	movs	r1, #2
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e159      	b.n	8001372 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10a      	bne.n	80010dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2250      	movs	r2, #80	; 0x50
 80010d0:	2100      	movs	r1, #0
 80010d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 fac8 	bl	800366c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e0:	2210      	movs	r2, #16
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d005      	beq.n	80010f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80010f2:	d00b      	beq.n	800110c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f8:	2210      	movs	r2, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2250      	movs	r2, #80	; 0x50
 8001104:	2100      	movs	r1, #0
 8001106:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e132      	b.n	8001372 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	4a9a      	ldr	r2, [pc, #616]	; (800137c <HAL_ADC_Init+0x2d0>)
 8001112:	4013      	ands	r3, r2
 8001114:	2202      	movs	r2, #2
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2203      	movs	r2, #3
 8001124:	4013      	ands	r3, r2
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_ADC_Init+0x90>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_ADC_Init+0x90>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_ADC_Init+0x92>
 800113c:	2300      	movs	r3, #0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d149      	bne.n	80011d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	23c0      	movs	r3, #192	; 0xc0
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	429a      	cmp	r2, r3
 800114c:	d00b      	beq.n	8001166 <HAL_ADC_Init+0xba>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	429a      	cmp	r2, r3
 8001158:	d005      	beq.n	8001166 <HAL_ADC_Init+0xba>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	061b      	lsls	r3, r3, #24
 8001162:	429a      	cmp	r2, r3
 8001164:	d111      	bne.n	800118a <HAL_ADC_Init+0xde>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	0892      	lsrs	r2, r2, #2
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6919      	ldr	r1, [r3, #16]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	e014      	b.n	80011b4 <HAL_ADC_Init+0x108>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	0892      	lsrs	r2, r2, #2
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	4b79      	ldr	r3, [pc, #484]	; (8001380 <HAL_ADC_Init+0x2d4>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b78      	ldr	r3, [pc, #480]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011a0:	4978      	ldr	r1, [pc, #480]	; (8001384 <HAL_ADC_Init+0x2d8>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2118      	movs	r1, #24
 80011c0:	438a      	bics	r2, r1
 80011c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68d9      	ldr	r1, [r3, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b69      	ldr	r3, [pc, #420]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011dc:	496a      	ldr	r1, [pc, #424]	; (8001388 <HAL_ADC_Init+0x2dc>)
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	065a      	lsls	r2, r3, #25
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_ADC_Init+0x2d4>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	055b      	lsls	r3, r3, #21
 80011fc:	4013      	ands	r3, r2
 80011fe:	d108      	bne.n	8001212 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0549      	lsls	r1, r1, #21
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	495b      	ldr	r1, [pc, #364]	; (800138c <HAL_ADC_Init+0x2e0>)
 800121e:	400a      	ands	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68d9      	ldr	r1, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d101      	bne.n	8001238 <HAL_ADC_Init+0x18c>
 8001234:	2304      	movs	r3, #4
 8001236:	e000      	b.n	800123a <HAL_ADC_Init+0x18e>
 8001238:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800123a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2020      	movs	r0, #32
 8001240:	5c1b      	ldrb	r3, [r3, r0]
 8001242:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001244:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	202c      	movs	r0, #44	; 0x2c
 800124a:	5c1b      	ldrb	r3, [r3, r0]
 800124c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800124e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001254:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800125c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001264:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	23c2      	movs	r3, #194	; 0xc2
 8001274:	33ff      	adds	r3, #255	; 0xff
 8001276:	429a      	cmp	r2, r3
 8001278:	d00b      	beq.n	8001292 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68d9      	ldr	r1, [r3, #12]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2221      	movs	r2, #33	; 0x21
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d11a      	bne.n	80012d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2220      	movs	r2, #32
 80012a0:	5c9b      	ldrb	r3, [r3, r2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0249      	lsls	r1, r1, #9
 80012b4:	430a      	orrs	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	e00b      	b.n	80012d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	2220      	movs	r2, #32
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	2201      	movs	r2, #1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11f      	bne.n	800131a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	492a      	ldr	r1, [pc, #168]	; (8001390 <HAL_ADC_Init+0x2e4>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6919      	ldr	r1, [r3, #16]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80012f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80012fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e00e      	b.n	8001338 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2201      	movs	r2, #1
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2107      	movs	r1, #7
 8001344:	438a      	bics	r2, r1
 8001346:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6959      	ldr	r1, [r3, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	2203      	movs	r2, #3
 8001366:	4393      	bics	r3, r2
 8001368:	2201      	movs	r2, #1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	fffffefd 	.word	0xfffffefd
 8001380:	40012708 	.word	0x40012708
 8001384:	ffc3ffff 	.word	0xffc3ffff
 8001388:	fdffffff 	.word	0xfdffffff
 800138c:	fffe0219 	.word	0xfffe0219
 8001390:	fffffc03 	.word	0xfffffc03

08001394 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2204      	movs	r2, #4
 80013ac:	4013      	ands	r3, r2
 80013ae:	d138      	bne.n	8001422 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2250      	movs	r2, #80	; 0x50
 80013b4:	5c9b      	ldrb	r3, [r3, r2]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Start+0x2a>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e038      	b.n	8001430 <HAL_ADC_Start+0x9c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2250      	movs	r2, #80	; 0x50
 80013c2:	2101      	movs	r1, #1
 80013c4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d007      	beq.n	80013de <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80013ce:	230f      	movs	r3, #15
 80013d0:	18fc      	adds	r4, r7, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 f959 	bl	800168c <ADC_Enable>
 80013da:	0003      	movs	r3, r0
 80013dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013de:	230f      	movs	r3, #15
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d120      	bne.n	800142a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_ADC_Start+0xa4>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2250      	movs	r2, #80	; 0x50
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	221c      	movs	r2, #28
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2104      	movs	r1, #4
 800141c:	430a      	orrs	r2, r1
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e003      	b.n	800142a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2202      	movs	r2, #2
 8001428:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800142a:	230f      	movs	r3, #15
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b005      	add	sp, #20
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	fffff0fe 	.word	0xfffff0fe

0800143c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d102      	bne.n	800145c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001456:	2308      	movs	r3, #8
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e014      	b.n	8001486 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	4013      	ands	r3, r2
 8001466:	2b01      	cmp	r3, #1
 8001468:	d10b      	bne.n	8001482 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	2220      	movs	r2, #32
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2250      	movs	r2, #80	; 0x50
 800147a:	2100      	movs	r1, #0
 800147c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06c      	b.n	800155c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001482:	230c      	movs	r3, #12
 8001484:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001486:	f7ff fdcd 	bl	8001024 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800148e:	e019      	b.n	80014c4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	d016      	beq.n	80014c4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <HAL_ADC_PollForConversion+0x70>
 800149c:	f7ff fdc2 	bl	8001024 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d20b      	bcs.n	80014c4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	2204      	movs	r2, #4
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2250      	movs	r2, #80	; 0x50
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e04b      	b.n	800155c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0df      	beq.n	8001490 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	23c0      	movs	r3, #192	; 0xc0
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d12e      	bne.n	800154a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d129      	bne.n	800154a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d122      	bne.n	800154a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	d110      	bne.n	8001532 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	210c      	movs	r1, #12
 800151c:	438a      	bics	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_ADC_PollForConversion+0x128>)
 8001526:	4013      	ands	r3, r2
 8001528:	2201      	movs	r2, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
 8001530:	e00b      	b.n	800154a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	2220      	movs	r2, #32
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	2201      	movs	r2, #1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	fffffefe 	.word	0xfffffefe

08001568 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2250      	movs	r2, #80	; 0x50
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x18>
 8001594:	2302      	movs	r3, #2
 8001596:	e06c      	b.n	8001672 <HAL_ADC_ConfigChannel+0xf2>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2250      	movs	r2, #80	; 0x50
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d00b      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	2220      	movs	r2, #32
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2250      	movs	r2, #80	; 0x50
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e056      	b.n	8001672 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a2c      	ldr	r2, [pc, #176]	; (800167c <HAL_ADC_ConfigChannel+0xfc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d028      	beq.n	8001620 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	035b      	lsls	r3, r3, #13
 80015da:	0b5a      	lsrs	r2, r3, #13
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	02db      	lsls	r3, r3, #11
 80015ec:	4013      	ands	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0409      	lsls	r1, r1, #16
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015fe:	200a      	movs	r0, #10
 8001600:	f000 f8a4 	bl	800174c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d02b      	beq.n	8001668 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	03c9      	lsls	r1, r1, #15
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e023      	b.n	8001668 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	035b      	lsls	r3, r3, #13
 800162c:	0b5b      	lsrs	r3, r3, #13
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	400a      	ands	r2, r1
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	02db      	lsls	r3, r3, #11
 8001640:	4013      	ands	r3, r2
 8001642:	d005      	beq.n	8001650 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_ADC_ConfigChannel+0x104>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d005      	beq.n	8001668 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_ADC_ConfigChannel+0x100>)
 8001662:	4909      	ldr	r1, [pc, #36]	; (8001688 <HAL_ADC_ConfigChannel+0x108>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2250      	movs	r2, #80	; 0x50
 800166c:	2100      	movs	r1, #0
 800166e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	00001001 	.word	0x00001001
 8001680:	40012708 	.word	0x40012708
 8001684:	ff7fffff 	.word	0xff7fffff
 8001688:	ffbfffff 	.word	0xffbfffff

0800168c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2203      	movs	r2, #3
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <ADC_Enable+0x2c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <ADC_Enable+0x2c>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <ADC_Enable+0x2e>
 80016b8:	2300      	movs	r3, #0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d13f      	bne.n	800173e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a20      	ldr	r2, [pc, #128]	; (8001748 <ADC_Enable+0xbc>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	2210      	movs	r2, #16
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	2201      	movs	r2, #1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e02c      	b.n	8001740 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 f828 	bl	800174c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016fc:	f7ff fc92 	bl	8001024 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001704:	e014      	b.n	8001730 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001706:	f7ff fc8d 	bl	8001024 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d90d      	bls.n	8001730 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	2210      	movs	r2, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	2201      	movs	r2, #1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e007      	b.n	8001740 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	2b01      	cmp	r3, #1
 800173c:	d1e3      	bne.n	8001706 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	80000017 	.word	0x80000017

0800174c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <ADC_DelayMicroSecond+0x34>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	490a      	ldr	r1, [pc, #40]	; (8001784 <ADC_DelayMicroSecond+0x38>)
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fcd4 	bl	8000108 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	001a      	movs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4353      	muls	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800176a:	e002      	b.n	8001772 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3b01      	subs	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	000f4240 	.word	0x000f4240

08001788 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	001a      	movs	r2, r3
 800179a:	231f      	movs	r3, #31
 800179c:	401a      	ands	r2, r3
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <NVIC_EnableIRQ+0x28>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	4091      	lsls	r1, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b7f      	cmp	r3, #127	; 0x7f
 80017c8:	d932      	bls.n	8001830 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <NVIC_SetPriority+0xd4>)
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	0019      	movs	r1, r3
 80017d2:	230f      	movs	r3, #15
 80017d4:	400b      	ands	r3, r1
 80017d6:	3b08      	subs	r3, #8
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3306      	adds	r3, #6
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	18d3      	adds	r3, r2, r3
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1dfa      	adds	r2, r7, #7
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	0011      	movs	r1, r2
 80017ea:	2203      	movs	r2, #3
 80017ec:	400a      	ands	r2, r1
 80017ee:	00d2      	lsls	r2, r2, #3
 80017f0:	21ff      	movs	r1, #255	; 0xff
 80017f2:	4091      	lsls	r1, r2
 80017f4:	000a      	movs	r2, r1
 80017f6:	43d2      	mvns	r2, r2
 80017f8:	401a      	ands	r2, r3
 80017fa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	019b      	lsls	r3, r3, #6
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	401a      	ands	r2, r3
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	0018      	movs	r0, r3
 800180a:	2303      	movs	r3, #3
 800180c:	4003      	ands	r3, r0
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001812:	481d      	ldr	r0, [pc, #116]	; (8001888 <NVIC_SetPriority+0xd4>)
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001c      	movs	r4, r3
 800181a:	230f      	movs	r3, #15
 800181c:	4023      	ands	r3, r4
 800181e:	3b08      	subs	r3, #8
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	430a      	orrs	r2, r1
 8001824:	3306      	adds	r3, #6
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	18c3      	adds	r3, r0, r3
 800182a:	3304      	adds	r3, #4
 800182c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800182e:	e027      	b.n	8001880 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <NVIC_SetPriority+0xd8>)
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	33c0      	adds	r3, #192	; 0xc0
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	589b      	ldr	r3, [r3, r2]
 8001840:	1dfa      	adds	r2, r7, #7
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	0011      	movs	r1, r2
 8001846:	2203      	movs	r2, #3
 8001848:	400a      	ands	r2, r1
 800184a:	00d2      	lsls	r2, r2, #3
 800184c:	21ff      	movs	r1, #255	; 0xff
 800184e:	4091      	lsls	r1, r2
 8001850:	000a      	movs	r2, r1
 8001852:	43d2      	mvns	r2, r2
 8001854:	401a      	ands	r2, r3
 8001856:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	019b      	lsls	r3, r3, #6
 800185c:	22ff      	movs	r2, #255	; 0xff
 800185e:	401a      	ands	r2, r3
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	2303      	movs	r3, #3
 8001868:	4003      	ands	r3, r0
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <NVIC_SetPriority+0xd8>)
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b25b      	sxtb	r3, r3
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	33c0      	adds	r3, #192	; 0xc0
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	501a      	str	r2, [r3, r0]
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	e000e100 	.word	0xe000e100

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <SysTick_Config+0x40>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e010      	b.n	80018c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <SysTick_Config+0x44>)
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	3a01      	subs	r2, #1
 80018ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	2301      	movs	r3, #1
 80018b0:	425b      	negs	r3, r3
 80018b2:	2103      	movs	r1, #3
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff7d 	bl	80017b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SysTick_Config+0x44>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x44>)
 80018c2:	2207      	movs	r2, #7
 80018c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	00ffffff 	.word	0x00ffffff
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	210f      	movs	r1, #15
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	1c02      	adds	r2, r0, #0
 80018e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	0011      	movs	r1, r2
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff ff5d 	bl	80017b4 <NVIC_SetPriority>
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b004      	add	sp, #16
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	0002      	movs	r2, r0
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ff37 	bl	8001788 <NVIC_EnableIRQ>
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ffaf 	bl	8001890 <SysTick_Config>
 8001932:	0003      	movs	r3, r0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001952:	e149      	b.n	8001be8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x30>
 800196a:	e13a      	b.n	8001be2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	58d3      	ldr	r3, [r2, r3]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2207      	movs	r2, #7
 800198e:	4013      	ands	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2107      	movs	r1, #7
 80019a8:	400b      	ands	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d00b      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d007      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	2201      	movs	r2, #1
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	401a      	ands	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d100      	bne.n	8001ab8 <HAL_GPIO_Init+0x17c>
 8001ab6:	e094      	b.n	8001be2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	589b      	ldr	r3, [r3, r2]
 8001ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	23a0      	movs	r3, #160	; 0xa0
 8001aec:	05db      	lsls	r3, r3, #23
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x1de>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a44      	ldr	r2, [pc, #272]	; (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x1da>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <HAL_GPIO_Init+0x2d4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x1d2>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	2103      	movs	r1, #3
 8001b20:	400a      	ands	r2, r1
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	025b      	lsls	r3, r3, #9
 8001b52:	4013      	ands	r3, r2
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	035b      	lsls	r3, r3, #13
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	039b      	lsls	r3, r3, #14
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	1e13      	subs	r3, r2, #0
 8001bf2:	d000      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ba>
 8001bf4:	e6ae      	b.n	8001954 <HAL_GPIO_Init+0x18>
  }
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b006      	add	sp, #24
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	50000400 	.word	0x50000400
 8001c0c:	50000800 	.word	0x50000800
 8001c10:	50001c00 	.word	0x50001c00
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	000a      	movs	r2, r1
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	1cba      	adds	r2, r7, #2
 8001c2c:	8812      	ldrh	r2, [r2, #0]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c32:	230f      	movs	r3, #15
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e003      	b.n	8001c44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c44:	230f      	movs	r3, #15
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	781b      	ldrb	r3, [r3, #0]
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	0008      	movs	r0, r1
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	1cbb      	adds	r3, r7, #2
 8001c60:	1c02      	adds	r2, r0, #0
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	1c7b      	adds	r3, r7, #1
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001c6a:	1c7b      	adds	r3, r7, #1
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	1cbb      	adds	r3, r7, #2
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c7a:	e003      	b.n	8001c84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c7c:	1cbb      	adds	r3, r7, #2
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	000a      	movs	r2, r1
 8001c96:	1cbb      	adds	r3, r7, #2
 8001c98:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	405a      	eors	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	1dbb      	adds	r3, r7, #6
 8001cba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	1dba      	adds	r2, r7, #6
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d008      	beq.n	8001cda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cca:	1dba      	adds	r2, r7, #6
 8001ccc:	8812      	ldrh	r2, [r2, #0]
 8001cce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd0:	1dbb      	adds	r3, r7, #6
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f001 fc89 	bl	80035ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e036      	b.n	8001d68 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_IWDG_Init+0x88>)
 8001d00:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_IWDG_Init+0x8c>)
 8001d08:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6852      	ldr	r2, [r2, #4]
 8001d12:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6892      	ldr	r2, [r2, #8]
 8001d1c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d1e:	f7ff f981 	bl	8001024 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d28:	f7ff f97c 	bl	8001024 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b30      	cmp	r3, #48	; 0x30
 8001d34:	d901      	bls.n	8001d3a <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e016      	b.n	8001d68 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f1      	bne.n	8001d28 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d005      	beq.n	8001d5e <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68d2      	ldr	r2, [r2, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	e003      	b.n	8001d66 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_IWDG_Init+0x90>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b004      	add	sp, #16
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	0000cccc 	.word	0x0000cccc
 8001d74:	00005555 	.word	0x00005555
 8001d78:	0000aaaa 	.word	0x0000aaaa

08001d7c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_IWDG_Refresh+0x1c>)
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	0000aaaa 	.word	0x0000aaaa

08001d9c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	000a      	movs	r2, r1
 8001da6:	1cfb      	adds	r3, r7, #3
 8001da8:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_PWR_EnterSLEEPMode+0x58>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2203      	movs	r2, #3
 8001db8:	4393      	bics	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_PWR_EnterSLEEPMode+0x58>)
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001dd6:	1cfb      	adds	r3, r7, #3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_PWR_EnterSLEEPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001dde:	bf30      	wfi
 8001de0:	e002      	b.n	8001de8 <HAL_PWR_EnterSLEEPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001de2:	bf40      	sev
  __ASM volatile ("wfe");
 8001de4:	bf20      	wfe
 8001de6:	bf20      	wfe
  __ASM volatile ("nop");
 8001de8:	46c0      	nop			; (mov r8, r8)
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();

}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40007000 	.word	0x40007000
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d005      	beq.n	8001e18 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001e0c:	f000 f80a 	bl	8001e24 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	0252      	lsls	r2, r2, #9
 8001e16:	615a      	str	r2, [r3, #20]
  }
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f000 fb6a 	bl	8002518 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e44:	4bc7      	ldr	r3, [pc, #796]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4e:	4bc5      	ldr	r3, [pc, #788]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_OscConfig+0x36>
 8001e64:	e07d      	b.n	8001f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d007      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d112      	bne.n	8001e98 <HAL_RCC_OscConfig+0x68>
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10d      	bne.n	8001e98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4bb9      	ldr	r3, [pc, #740]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5a>
 8001e88:	e06a      	b.n	8001f60 <HAL_RCC_OscConfig+0x130>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d166      	bne.n	8001f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f000 fb40 	bl	8002518 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x84>
 8001ea4:	4baf      	ldr	r3, [pc, #700]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4bae      	ldr	r3, [pc, #696]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e027      	b.n	8001f04 <HAL_RCC_OscConfig+0xd4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	02db      	lsls	r3, r3, #11
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10e      	bne.n	8001ede <HAL_RCC_OscConfig+0xae>
 8001ec0:	4ba8      	ldr	r3, [pc, #672]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4ba7      	ldr	r3, [pc, #668]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	02c9      	lsls	r1, r1, #11
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	4ba5      	ldr	r3, [pc, #660]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4ba4      	ldr	r3, [pc, #656]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e012      	b.n	8001f04 <HAL_RCC_OscConfig+0xd4>
 8001ede:	4ba1      	ldr	r3, [pc, #644]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001ee4:	49a0      	ldr	r1, [pc, #640]	; (8002168 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4b9e      	ldr	r3, [pc, #632]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	025b      	lsls	r3, r3, #9
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4b9a      	ldr	r3, [pc, #616]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001efe:	499b      	ldr	r1, [pc, #620]	; (800216c <HAL_RCC_OscConfig+0x33c>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d014      	beq.n	8001f36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f88a 	bl	8001024 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f16:	f7ff f885 	bl	8001024 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e2f7      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f28:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4013      	ands	r3, r2
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0xe6>
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff f875 	bl	8001024 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f870 	bl	8001024 <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e2e2      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f52:	4b84      	ldr	r3, [pc, #528]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x110>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCC_OscConfig+0x13e>
 8001f6c:	e098      	b.n	80020a0 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	2220      	movs	r2, #32
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f7c:	4b79      	ldr	r3, [pc, #484]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001f82:	2120      	movs	r1, #32
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d13d      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e8>
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d13a      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fa2:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e2b0      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x340>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	021a      	lsls	r2, r3, #8
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2209      	movs	r2, #9
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 fbcb 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8001fe2:	0001      	movs	r1, r0
 8001fe4:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	220f      	movs	r2, #15
 8001fec:	4013      	ands	r3, r2
 8001fee:	4a61      	ldr	r2, [pc, #388]	; (8002174 <HAL_RCC_OscConfig+0x344>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	40da      	lsrs	r2, r3
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x348>)
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001ffa:	2513      	movs	r5, #19
 8001ffc:	197c      	adds	r4, r7, r5
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7fe ffda 	bl	8000fb8 <HAL_InitTick>
 8002004:	0003      	movs	r3, r0
 8002006:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002008:	197b      	adds	r3, r7, r5
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d047      	beq.n	80020a0 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002010:	2313      	movs	r3, #19
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	e27f      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d027      	beq.n	800206e <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800201e:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2209      	movs	r2, #9
 8002024:	4393      	bics	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fff8 	bl	8001024 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203a:	f7fe fff3 	bl	8001024 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e265      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800204c:	4b45      	ldr	r3, [pc, #276]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d0f1      	beq.n	800203a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_RCC_OscConfig+0x340>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	021a      	lsls	r2, r3, #8
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	e018      	b.n	80020a0 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002074:	2101      	movs	r1, #1
 8002076:	438a      	bics	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe ffd3 	bl	8001024 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002084:	f7fe ffce 	bl	8001024 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e240      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d1f1      	bne.n	8002084 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_OscConfig+0x27c>
 80020aa:	e09e      	b.n	80021ea <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d13f      	bne.n	8002132 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x29a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e226      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a2b      	ldr	r2, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x34c>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1a      	ldr	r2, [r3, #32]
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	0a19      	lsrs	r1, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	061a      	lsls	r2, r3, #24
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	0b5b      	lsrs	r3, r3, #13
 80020f8:	3301      	adds	r3, #1
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	0212      	lsls	r2, r2, #8
 80020fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	210f      	movs	r1, #15
 8002108:	400b      	ands	r3, r1
 800210a:	491a      	ldr	r1, [pc, #104]	; (8002174 <HAL_RCC_OscConfig+0x344>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_OscConfig+0x348>)
 8002112:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002114:	2513      	movs	r5, #19
 8002116:	197c      	adds	r4, r7, r5
 8002118:	2000      	movs	r0, #0
 800211a:	f7fe ff4d 	bl	8000fb8 <HAL_InitTick>
 800211e:	0003      	movs	r3, r0
 8002120:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002122:	197b      	adds	r3, r7, r5
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d05f      	beq.n	80021ea <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800212a:	2313      	movs	r3, #19
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	e1f2      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03d      	beq.n	80021b6 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x334>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0049      	lsls	r1, r1, #1
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe ff6c 	bl	8001024 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002150:	e016      	b.n	8002180 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002152:	f7fe ff67 	bl	8001024 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d90f      	bls.n	8002180 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1d9      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
 8002164:	40021000 	.word	0x40021000
 8002168:	fffeffff 	.word	0xfffeffff
 800216c:	fffbffff 	.word	0xfffbffff
 8002170:	ffffe0ff 	.word	0xffffe0ff
 8002174:	08003964 	.word	0x08003964
 8002178:	20000000 	.word	0x20000000
 800217c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002180:	4bca      	ldr	r3, [pc, #808]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d0e2      	beq.n	8002152 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	4bc7      	ldr	r3, [pc, #796]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4ac7      	ldr	r2, [pc, #796]	; (80024b0 <HAL_RCC_OscConfig+0x680>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	4bc4      	ldr	r3, [pc, #784]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a0:	4bc2      	ldr	r3, [pc, #776]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	0a19      	lsrs	r1, r3, #8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	4bbf      	ldr	r3, [pc, #764]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	e019      	b.n	80021ea <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b6:	4bbd      	ldr	r3, [pc, #756]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4bbc      	ldr	r3, [pc, #752]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021bc:	49bd      	ldr	r1, [pc, #756]	; (80024b4 <HAL_RCC_OscConfig+0x684>)
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe ff2f 	bl	8001024 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021cc:	f7fe ff2a 	bl	8001024 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e19c      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021de:	4bb3      	ldr	r3, [pc, #716]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2208      	movs	r2, #8
 80021f0:	4013      	ands	r3, r2
 80021f2:	d036      	beq.n	8002262 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d019      	beq.n	8002230 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fc:	4bab      	ldr	r3, [pc, #684]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002200:	4baa      	ldr	r3, [pc, #680]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002202:	2101      	movs	r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe ff0c 	bl	8001024 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe ff07 	bl	8001024 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e179      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002224:	4ba1      	ldr	r3, [pc, #644]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d0f1      	beq.n	8002212 <HAL_RCC_OscConfig+0x3e2>
 800222e:	e018      	b.n	8002262 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002234:	4b9d      	ldr	r3, [pc, #628]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002236:	2101      	movs	r1, #1
 8002238:	438a      	bics	r2, r1
 800223a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe fef2 	bl	8001024 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe feed 	bl	8001024 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e15f      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002258:	4b94      	ldr	r3, [pc, #592]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d1f1      	bne.n	8002246 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCC_OscConfig+0x43e>
 800226c:	e0af      	b.n	80023ce <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2323      	movs	r3, #35	; 0x23
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	4013      	ands	r3, r2
 8002280:	d10a      	bne.n	8002298 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002286:	4b89      	ldr	r3, [pc, #548]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0549      	lsls	r1, r1, #21
 800228c:	430a      	orrs	r2, r1
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002290:	2323      	movs	r3, #35	; 0x23
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <HAL_RCC_OscConfig+0x688>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d11a      	bne.n	80022da <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a4:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_RCC_OscConfig+0x688>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b83      	ldr	r3, [pc, #524]	; (80024b8 <HAL_RCC_OscConfig+0x688>)
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0049      	lsls	r1, r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7fe feb7 	bl	8001024 <HAL_GetTick>
 80022b6:	0003      	movs	r3, r0
 80022b8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022bc:	f7fe feb2 	bl	8001024 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e124      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b7a      	ldr	r3, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x688>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4c6>
 80022e6:	4b71      	ldr	r3, [pc, #452]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80022e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ea:	4b70      	ldr	r3, [pc, #448]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0049      	lsls	r1, r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	651a      	str	r2, [r3, #80]	; 0x50
 80022f4:	e031      	b.n	800235a <HAL_RCC_OscConfig+0x52a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x4e8>
 80022fe:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002304:	496b      	ldr	r1, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x684>)
 8002306:	400a      	ands	r2, r1
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800230c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002310:	496a      	ldr	r1, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x68c>)
 8002312:	400a      	ands	r2, r1
 8002314:	651a      	str	r2, [r3, #80]	; 0x50
 8002316:	e020      	b.n	800235a <HAL_RCC_OscConfig+0x52a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	23a0      	movs	r3, #160	; 0xa0
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	429a      	cmp	r2, r3
 8002322:	d10e      	bne.n	8002342 <HAL_RCC_OscConfig+0x512>
 8002324:	4b61      	ldr	r3, [pc, #388]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002328:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	00c9      	lsls	r1, r1, #3
 800232e:	430a      	orrs	r2, r1
 8002330:	651a      	str	r2, [r3, #80]	; 0x50
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002336:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0049      	lsls	r1, r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	651a      	str	r2, [r3, #80]	; 0x50
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0x52a>
 8002342:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002346:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002348:	495a      	ldr	r1, [pc, #360]	; (80024b4 <HAL_RCC_OscConfig+0x684>)
 800234a:	400a      	ands	r2, r1
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002354:	4959      	ldr	r1, [pc, #356]	; (80024bc <HAL_RCC_OscConfig+0x68c>)
 8002356:	400a      	ands	r2, r1
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d015      	beq.n	800238e <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fe5f 	bl	8001024 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800236a:	e009      	b.n	8002380 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fe5a 	bl	8001024 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x690>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0cb      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002380:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d0ef      	beq.n	800236c <HAL_RCC_OscConfig+0x53c>
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe fe49 	bl	8001024 <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fe44 	bl	8001024 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x690>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0b5      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80023ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1ef      	bne.n	8002398 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b8:	2323      	movs	r3, #35	; 0x23
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80023c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80023c8:	493e      	ldr	r1, [pc, #248]	; (80024c4 <HAL_RCC_OscConfig+0x694>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5a8>
 80023d6:	e09e      	b.n	8002516 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5b0>
 80023de:	e077      	b.n	80024d0 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d145      	bne.n	8002474 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 80023ee:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x698>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fe16 	bl	8001024 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fe11 	bl	8001024 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e083      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	049b      	lsls	r3, r3, #18
 8002418:	4013      	ands	r3, r2
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_RCC_OscConfig+0x69c>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	431a      	orrs	r2, r3
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0449      	lsls	r1, r1, #17
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fdeb 	bl	8001024 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fde6 	bl	8001024 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e058      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x624>
 8002472:	e050      	b.n	8002516 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800247a:	4913      	ldr	r1, [pc, #76]	; (80024c8 <HAL_RCC_OscConfig+0x698>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fdd0 	bl	8001024 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fdcb 	bl	8001024 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_OscConfig+0x67c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	049b      	lsls	r3, r3, #18
 80024a4:	4013      	ands	r3, r2
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x65a>
 80024a8:	e035      	b.n	8002516 <HAL_RCC_OscConfig+0x6e6>
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	ffff1fff 	.word	0xffff1fff
 80024b4:	fffffeff 	.word	0xfffffeff
 80024b8:	40007000 	.word	0x40007000
 80024bc:	fffffbff 	.word	0xfffffbff
 80024c0:	00001388 	.word	0x00001388
 80024c4:	efffffff 	.word	0xefffffff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_OscConfig+0x6f0>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d10f      	bne.n	8002512 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	23f0      	movs	r3, #240	; 0xf0
 80024f6:	039b      	lsls	r3, r3, #14
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	23c0      	movs	r3, #192	; 0xc0
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b00a      	add	sp, #40	; 0x28
 800251e:	bdb0      	pop	{r4, r5, r7, pc}
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e10d      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	4013      	ands	r3, r2
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d911      	bls.n	800256a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002558:	4b80      	ldr	r3, [pc, #512]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0f4      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	22f0      	movs	r2, #240	; 0xf0
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	4b77      	ldr	r3, [pc, #476]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d100      	bne.n	8002594 <HAL_RCC_ClockConfig+0x70>
 8002592:	e089      	b.n	80026a8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	4013      	ands	r3, r2
 80025a6:	d120      	bne.n	80025ea <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d3      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	049b      	lsls	r3, r3, #18
 80025bc:	4013      	ands	r3, r2
 80025be:	d114      	bne.n	80025ea <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0c7      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025cc:	4b64      	ldr	r3, [pc, #400]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2204      	movs	r2, #4
 80025d2:	4013      	ands	r3, r2
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0bc      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025da:	4b61      	ldr	r3, [pc, #388]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0b4      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2203      	movs	r2, #3
 80025f0:	4393      	bics	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fd11 	bl	8001024 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d111      	bne.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800260e:	e009      	b.n	8002624 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fd08 	bl	8001024 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x240>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e097      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	220c      	movs	r2, #12
 800262a:	4013      	ands	r3, r2
 800262c:	2b08      	cmp	r3, #8
 800262e:	d1ef      	bne.n	8002610 <HAL_RCC_ClockConfig+0xec>
 8002630:	e03a      	b.n	80026a8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d111      	bne.n	800265e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263a:	e009      	b.n	8002650 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fcf2 	bl	8001024 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e081      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	220c      	movs	r2, #12
 8002656:	4013      	ands	r3, r2
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d1ef      	bne.n	800263c <HAL_RCC_ClockConfig+0x118>
 800265c:	e024      	b.n	80026a8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d11b      	bne.n	800269e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002666:	e009      	b.n	800267c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe fcdc 	bl	8001024 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e06b      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800267c:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	220c      	movs	r2, #12
 8002682:	4013      	ands	r3, r2
 8002684:	2b04      	cmp	r3, #4
 8002686:	d1ef      	bne.n	8002668 <HAL_RCC_ClockConfig+0x144>
 8002688:	e00e      	b.n	80026a8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe fccb 	bl	8001024 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e05a      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	220c      	movs	r2, #12
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d211      	bcs.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4393      	bics	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCC_ClockConfig+0x238>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e03c      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2204      	movs	r2, #4
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	4013      	ands	r3, r2
 8002700:	d00a      	beq.n	8002718 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_RCC_ClockConfig+0x248>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	00da      	lsls	r2, r3, #3
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002718:	f000 f82e 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800271c:	0001      	movs	r1, r0
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_ClockConfig+0x23c>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	220f      	movs	r2, #15
 8002726:	4013      	ands	r3, r2
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_RCC_ClockConfig+0x24c>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	000a      	movs	r2, r1
 800272e:	40da      	lsrs	r2, r3
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_ClockConfig+0x250>)
 8002732:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002734:	250b      	movs	r5, #11
 8002736:	197c      	adds	r4, r7, r5
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fc3d 	bl	8000fb8 <HAL_InitTick>
 800273e:	0003      	movs	r3, r0
 8002740:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002742:	197b      	adds	r3, r7, r5
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800274a:	230b      	movs	r3, #11
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	e000      	b.n	8002754 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	40022000 	.word	0x40022000
 8002760:	40021000 	.word	0x40021000
 8002764:	00001388 	.word	0x00001388
 8002768:	fffff8ff 	.word	0xfffff8ff
 800276c:	ffffc7ff 	.word	0xffffc7ff
 8002770:	08003964 	.word	0x08003964
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	220c      	movs	r2, #12
 8002788:	4013      	ands	r3, r2
 800278a:	2b08      	cmp	r3, #8
 800278c:	d00e      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d00f      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002792:	2b04      	cmp	r3, #4
 8002794:	d157      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	4013      	ands	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80027a4:	e05d      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027a8:	613b      	str	r3, [r7, #16]
      break;
 80027aa:	e05a      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_GetSysClockFreq+0x100>)
 80027ae:	613b      	str	r3, [r7, #16]
      break;
 80027b0:	e057      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0c9b      	lsrs	r3, r3, #18
 80027b6:	220f      	movs	r2, #15
 80027b8:	4013      	ands	r3, r2
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_RCC_GetSysClockFreq+0x104>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	0d9b      	lsrs	r3, r3, #22
 80027c4:	2203      	movs	r2, #3
 80027c6:	4013      	ands	r3, r2
 80027c8:	3301      	adds	r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	025b      	lsls	r3, r3, #9
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00f      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	000a      	movs	r2, r1
 80027dc:	0152      	lsls	r2, r2, #5
 80027de:	1a52      	subs	r2, r2, r1
 80027e0:	0193      	lsls	r3, r2, #6
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	185b      	adds	r3, r3, r1
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fc8b 	bl	8000108 <__udivsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e023      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4013      	ands	r3, r2
 8002800:	d00f      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	000a      	movs	r2, r1
 8002806:	0152      	lsls	r2, r2, #5
 8002808:	1a52      	subs	r2, r2, r1
 800280a:	0193      	lsls	r3, r2, #6
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	185b      	adds	r3, r3, r1
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fc76 	bl	8000108 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e00e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	000a      	movs	r2, r1
 8002826:	0152      	lsls	r2, r2, #5
 8002828:	1a52      	subs	r2, r2, r1
 800282a:	0193      	lsls	r3, r2, #6
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	185b      	adds	r3, r3, r1
 8002832:	029b      	lsls	r3, r3, #10
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd fc66 	bl	8000108 <__udivsi3>
 800283c:	0003      	movs	r3, r0
 800283e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	613b      	str	r3, [r7, #16]
      break;
 8002844:	e00d      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	2207      	movs	r2, #7
 800284e:	4013      	ands	r3, r2
 8002850:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	0212      	lsls	r2, r2, #8
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
      break;
 8002860:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002862:	693b      	ldr	r3, [r7, #16]
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b006      	add	sp, #24
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	003d0900 	.word	0x003d0900
 8002874:	00f42400 	.word	0x00f42400
 8002878:	007a1200 	.word	0x007a1200
 800287c:	08003974 	.word	0x08003974

08002880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e01e      	b.n	80028d0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2239      	movs	r2, #57	; 0x39
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 ff1d 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2239      	movs	r2, #57	; 0x39
 80028b2:	2102      	movs	r1, #2
 80028b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	0019      	movs	r1, r3
 80028c0:	0010      	movs	r0, r2
 80028c2:	f000 f8c1 	bl	8002a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2239      	movs	r2, #57	; 0x39
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2238      	movs	r2, #56	; 0x38
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0a4      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x164>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2238      	movs	r2, #56	; 0x38
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2239      	movs	r2, #57	; 0x39
 80028fe:	2102      	movs	r1, #2
 8002900:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d029      	beq.n	800295c <HAL_TIM_PWM_ConfigChannel+0x84>
 8002908:	d802      	bhi.n	8002910 <HAL_TIM_PWM_ConfigChannel+0x38>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800290e:	e08c      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002910:	2b08      	cmp	r3, #8
 8002912:	d046      	beq.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d065      	beq.n	80029e4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002918:	e087      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	0011      	movs	r1, r2
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f8e4 	bl	8002af0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2108      	movs	r1, #8
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2104      	movs	r1, #4
 8002944:	438a      	bics	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	619a      	str	r2, [r3, #24]
      break;
 800295a:	e066      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f8ff 	bl	8002b68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0109      	lsls	r1, r1, #4
 8002978:	430a      	orrs	r2, r1
 800297a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	492f      	ldr	r1, [pc, #188]	; (8002a44 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002988:	400a      	ands	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6999      	ldr	r1, [r3, #24]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	021a      	lsls	r2, r3, #8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	619a      	str	r2, [r3, #24]
      break;
 80029a0:	e043      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	0011      	movs	r1, r2
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f91e 	bl	8002bec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2108      	movs	r1, #8
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2104      	movs	r1, #4
 80029cc:	438a      	bics	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69d9      	ldr	r1, [r3, #28]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	61da      	str	r2, [r3, #28]
      break;
 80029e2:	e022      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 f93d 	bl	8002c6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0109      	lsls	r1, r1, #4
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69d9      	ldr	r1, [r3, #28]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	61da      	str	r2, [r3, #28]
      break;
 8002a28:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2239      	movs	r2, #57	; 0x39
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2238      	movs	r2, #56	; 0x38
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	fffffbff 	.word	0xfffffbff

08002a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	05db      	lsls	r3, r3, #23
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x2a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <TIM_Base_SetConfig+0x9c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x2a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <TIM_Base_SetConfig+0xa0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2270      	movs	r2, #112	; 0x70
 8002a76:	4393      	bics	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	05db      	lsls	r3, r3, #23
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d007      	beq.n	8002a9e <TIM_Base_SetConfig+0x56>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <TIM_Base_SetConfig+0x9c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_Base_SetConfig+0x56>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <TIM_Base_SetConfig+0xa0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <TIM_Base_SetConfig+0xa4>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40010800 	.word	0x40010800
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	fffffcff 	.word	0xfffffcff

08002af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4393      	bics	r3, r2
 8002b02:	001a      	movs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2270      	movs	r2, #112	; 0x70
 8002b1e:	4393      	bics	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2203      	movs	r2, #3
 8002b26:	4393      	bics	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2202      	movs	r2, #2
 8002b38:	4393      	bics	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b006      	add	sp, #24
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	2210      	movs	r2, #16
 8002b78:	4393      	bics	r3, r2
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <TIM_OC2_SetConfig+0x7c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <TIM_OC2_SetConfig+0x80>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	ffff8fff 	.word	0xffff8fff
 8002be8:	fffffcff 	.word	0xfffffcff

08002bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <TIM_OC3_SetConfig+0x78>)
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2270      	movs	r2, #112	; 0x70
 8002c18:	4393      	bics	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	4393      	bics	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <TIM_OC3_SetConfig+0x7c>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	fffffeff 	.word	0xfffffeff
 8002c68:	fffffdff 	.word	0xfffffdff

08002c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <TIM_OC4_SetConfig+0x7c>)
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <TIM_OC4_SetConfig+0x80>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <TIM_OC4_SetConfig+0x84>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <TIM_OC4_SetConfig+0x88>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	031b      	lsls	r3, r3, #12
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	ffffefff 	.word	0xffffefff
 8002cec:	ffff8fff 	.word	0xffff8fff
 8002cf0:	fffffcff 	.word	0xfffffcff
 8002cf4:	ffffdfff 	.word	0xffffdfff

08002cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2238      	movs	r2, #56	; 0x38
 8002d06:	5c9b      	ldrb	r3, [r3, r2]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e032      	b.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2238      	movs	r2, #56	; 0x38
 8002d14:	2101      	movs	r1, #1
 8002d16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2239      	movs	r2, #57	; 0x39
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2270      	movs	r2, #112	; 0x70
 8002d34:	4393      	bics	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	4393      	bics	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2239      	movs	r2, #57	; 0x39
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2238      	movs	r2, #56	; 0x38
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <set_uv_led>:
	ON = 1,
	TOGGLE = 2,
}typedefEnum;

void set_uv_led(typedefEnum state)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	0002      	movs	r2, r0
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <set_uv_led+0x1a>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d008      	beq.n	8002da8 <set_uv_led+0x2a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002d96:	e00f      	b.n	8002db8 <set_uv_led+0x3a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_RESET);
 8002d98:	23a0      	movs	r3, #160	; 0xa0
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2110      	movs	r1, #16
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fe ff56 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002da6:	e007      	b.n	8002db8 <set_uv_led+0x3a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_SET);
 8002da8:	23a0      	movs	r3, #160	; 0xa0
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	2201      	movs	r2, #1
 8002dae:	2110      	movs	r1, #16
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe ff4e 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002db6:	46c0      	nop			; (mov r8, r8)
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <set_uv_boost>:
void set_uv_boost(typedefEnum state)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <set_uv_boost+0x1a>
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d008      	beq.n	8002dea <set_uv_boost+0x2a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002dd8:	e00f      	b.n	8002dfa <set_uv_boost+0x3a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_RESET);
 8002dda:	23a0      	movs	r3, #160	; 0xa0
 8002ddc:	05db      	lsls	r3, r3, #23
 8002dde:	2200      	movs	r2, #0
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fe ff35 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002de8:	e007      	b.n	8002dfa <set_uv_boost+0x3a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_SET);
 8002dea:	23a0      	movs	r3, #160	; 0xa0
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	2201      	movs	r2, #1
 8002df0:	2140      	movs	r1, #64	; 0x40
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7fe ff2d 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002df8:	46c0      	nop			; (mov r8, r8)
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <set_neopixel_led>:
void set_neopixel_led(typedefEnum state)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	0002      	movs	r2, r0
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <set_neopixel_led+0x1a>
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d009      	beq.n	8002e2e <set_neopixel_led+0x2c>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002e1a:	e011      	b.n	8002e40 <set_neopixel_led+0x3e>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_RESET);
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	23a0      	movs	r3, #160	; 0xa0
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fe ff13 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002e2c:	e008      	b.n	8002e40 <set_neopixel_led+0x3e>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_SET);
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	0099      	lsls	r1, r3, #2
 8002e32:	23a0      	movs	r3, #160	; 0xa0
 8002e34:	05db      	lsls	r3, r3, #23
 8002e36:	2201      	movs	r2, #1
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fe ff0a 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002e3e:	46c0      	nop			; (mov r8, r8)
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <set_neopixel_boost>:
void set_neopixel_boost(typedefEnum state)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <set_neopixel_boost+0x1a>
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d009      	beq.n	8002e74 <set_neopixel_boost+0x2c>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002e60:	e011      	b.n	8002e86 <set_neopixel_boost+0x3e>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_RESET);
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	00d9      	lsls	r1, r3, #3
 8002e66:	23a0      	movs	r3, #160	; 0xa0
 8002e68:	05db      	lsls	r3, r3, #23
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fe fef0 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002e72:	e008      	b.n	8002e86 <set_neopixel_boost+0x3e>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_SET);
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	00d9      	lsls	r1, r3, #3
 8002e78:	23a0      	movs	r3, #160	; 0xa0
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fe fee7 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002e84:	46c0      	nop			; (mov r8, r8)
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <set_charging_led>:
void set_charging_led(typedefEnum state)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	0002      	movs	r2, r0
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d00b      	beq.n	8002ebc <set_charging_led+0x2c>
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d010      	beq.n	8002eca <set_charging_led+0x3a>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d000      	beq.n	8002eae <set_charging_led+0x1e>
	case TOGGLE:
	{
		HAL_GPIO_TogglePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin);
	}
	}
}
 8002eac:	e013      	b.n	8002ed6 <set_charging_led+0x46>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <set_charging_led+0x50>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fe fecc 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002eba:	e00c      	b.n	8002ed6 <set_charging_led+0x46>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_SET);
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <set_charging_led+0x50>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fe fec5 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8002ec8:	e005      	b.n	8002ed6 <set_charging_led+0x46>
		HAL_GPIO_TogglePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin);
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <set_charging_led+0x50>)
 8002ecc:	2102      	movs	r1, #2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7fe fedc 	bl	8001c8c <HAL_GPIO_TogglePin>
}
 8002ed4:	e7ff      	b.n	8002ed6 <set_charging_led+0x46>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	50000400 	.word	0x50000400

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eea:	f7fe f845 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eee:	f000 f9bf 	bl	8003270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef2:	f000 fb01 	bl	80034f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002ef6:	f000 fa9f 	bl	8003438 <MX_TIM2_Init>
  MX_ADC_Init();
 8002efa:	f000 fa17 	bl	800332c <MX_ADC_Init>
  MX_IWDG_Init();
 8002efe:	f000 fa7b 	bl	80033f8 <MX_IWDG_Init>


  /*
   * if IWDG?
   * */
  if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8002f02:	4bbe      	ldr	r3, [pc, #760]	; (80031fc <main+0x318>)
 8002f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	059b      	lsls	r3, r3, #22
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d00a      	beq.n	8002f24 <main+0x40>
  {

	  set_charging_led(ON);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff ffbe 	bl	8002e90 <set_charging_led>
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002f14:	4bb9      	ldr	r3, [pc, #740]	; (80031fc <main+0x318>)
 8002f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f18:	4bb8      	ldr	r3, [pc, #736]	; (80031fc <main+0x318>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0409      	lsls	r1, r1, #16
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
 8002f22:	e002      	b.n	8002f2a <main+0x46>
  }
  else
  {
	  set_charging_led(OFF);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff ffb3 	bl	8002e90 <set_charging_led>
  }

  HAL_Delay(1000);
 8002f2a:	23fa      	movs	r3, #250	; 0xfa
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fe f882 	bl	8001038 <HAL_Delay>


  HAL_ADC_Start(&hadc);
 8002f34:	4bb2      	ldr	r3, [pc, #712]	; (8003200 <main+0x31c>)
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fe fa2c 	bl	8001394 <HAL_ADC_Start>


  set_charging_led(OFF);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ffa7 	bl	8002e90 <set_charging_led>
  set_neopixel_led(OFF);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7ff ff5d 	bl	8002e02 <set_neopixel_led>
  set_uv_led(OFF);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7ff ff18 	bl	8002d7e <set_uv_led>
  set_neopixel_boost(OFF);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7ff ff7a 	bl	8002e48 <set_neopixel_boost>
  set_uv_boost(OFF);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff ff33 	bl	8002dc0 <set_uv_boost>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg);
 8002f5a:	4baa      	ldr	r3, [pc, #680]	; (8003204 <main+0x320>)
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7fe ff0d 	bl	8001d7c <HAL_IWDG_Refresh>
	  isCharging = HAL_GPIO_ReadPin(CHARGE_GPIO_Port, CHARGE_Pin);
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7fe fe55 	bl	8001c18 <HAL_GPIO_ReadPin>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	001a      	movs	r2, r3
 8002f72:	4ba5      	ldr	r3, [pc, #660]	; (8003208 <main+0x324>)
 8002f74:	701a      	strb	r2, [r3, #0]

	  /*
	   * getAdcValue
	   *
	   * */
	  nowBatTick = HAL_GetTick();
 8002f76:	f7fe f855 	bl	8001024 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	4ba3      	ldr	r3, [pc, #652]	; (800320c <main+0x328>)
 8002f7e:	601a      	str	r2, [r3, #0]
	  if(nowBatTick - pastBatTick > 100)
 8002f80:	4ba2      	ldr	r3, [pc, #648]	; (800320c <main+0x328>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4ba2      	ldr	r3, [pc, #648]	; (8003210 <main+0x32c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d933      	bls.n	8002ff6 <main+0x112>
	  {
		  HAL_ADC_PollForConversion(&hadc, 0xFFFF);
 8002f8e:	4aa1      	ldr	r2, [pc, #644]	; (8003214 <main+0x330>)
 8002f90:	4b9b      	ldr	r3, [pc, #620]	; (8003200 <main+0x31c>)
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7fe fa51 	bl	800143c <HAL_ADC_PollForConversion>
		  adcValue = HAL_ADC_GetValue(&hadc);
 8002f9a:	4b99      	ldr	r3, [pc, #612]	; (8003200 <main+0x31c>)
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f7fe fae3 	bl	8001568 <HAL_ADC_GetValue>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	4b9c      	ldr	r3, [pc, #624]	; (8003218 <main+0x334>)
 8002fa8:	801a      	strh	r2, [r3, #0]
		  adc_A = (float)(adcValue - 3368) * 0.1953;
 8002faa:	4b9b      	ldr	r3, [pc, #620]	; (8003218 <main+0x334>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	4a9b      	ldr	r2, [pc, #620]	; (800321c <main+0x338>)
 8002fb0:	4694      	mov	ip, r2
 8002fb2:	4463      	add	r3, ip
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd fb2f 	bl	8000618 <__aeabi_i2f>
 8002fba:	1c03      	adds	r3, r0, #0
 8002fbc:	1c18      	adds	r0, r3, #0
 8002fbe:	f7fd fde7 	bl	8000b90 <__aeabi_f2d>
 8002fc2:	4a97      	ldr	r2, [pc, #604]	; (8003220 <main+0x33c>)
 8002fc4:	4b97      	ldr	r3, [pc, #604]	; (8003224 <main+0x340>)
 8002fc6:	f7fd fb71 	bl	80006ac <__aeabi_dmul>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	000c      	movs	r4, r1
 8002fce:	0018      	movs	r0, r3
 8002fd0:	0021      	movs	r1, r4
 8002fd2:	f7fd fe2f 	bl	8000c34 <__aeabi_d2f>
 8002fd6:	1c02      	adds	r2, r0, #0
 8002fd8:	4b93      	ldr	r3, [pc, #588]	; (8003228 <main+0x344>)
 8002fda:	601a      	str	r2, [r3, #0]
		  adc_B = adc_A;
 8002fdc:	4b92      	ldr	r3, [pc, #584]	; (8003228 <main+0x344>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c18      	adds	r0, r3, #0
 8002fe2:	f7fd f91d 	bl	8000220 <__aeabi_f2uiz>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b90      	ldr	r3, [pc, #576]	; (800322c <main+0x348>)
 8002fec:	801a      	strh	r2, [r3, #0]
		  pastBatTick = nowBatTick;
 8002fee:	4b87      	ldr	r3, [pc, #540]	; (800320c <main+0x328>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b87      	ldr	r3, [pc, #540]	; (8003210 <main+0x32c>)
 8002ff4:	601a      	str	r2, [r3, #0]
	  }
	  if(isCharging)
 8002ff6:	4b84      	ldr	r3, [pc, #528]	; (8003208 <main+0x324>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <main+0x138>
	  {
		  if(adc_B > BAT_MAX)
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <main+0x348>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	2b5a      	cmp	r3, #90	; 0x5a
 8003004:	d903      	bls.n	800300e <main+0x12a>
			  set_charging_led(OFF);
 8003006:	2000      	movs	r0, #0
 8003008:	f7ff ff42 	bl	8002e90 <set_charging_led>
 800300c:	e002      	b.n	8003014 <main+0x130>
		  else
			  set_charging_led(ON);
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff ff3e 	bl	8002e90 <set_charging_led>

		  isLowBat = 0;
 8003014:	4b86      	ldr	r3, [pc, #536]	; (8003230 <main+0x34c>)
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e01b      	b.n	8003054 <main+0x170>
	  }
	  else
	  {
		  if(adc_B < BAT_MIN)
 800301c:	4b83      	ldr	r3, [pc, #524]	; (800322c <main+0x348>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	2b1d      	cmp	r3, #29
 8003022:	d817      	bhi.n	8003054 <main+0x170>
		  {
			  for(uint8_t i = 0; i < 6; i ++)
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e00c      	b.n	8003046 <main+0x162>
			  {
				  set_charging_led(TOGGLE);
 800302c:	2002      	movs	r0, #2
 800302e:	f7ff ff2f 	bl	8002e90 <set_charging_led>
				  HAL_Delay(500);
 8003032:	23fa      	movs	r3, #250	; 0xfa
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	0018      	movs	r0, r3
 8003038:	f7fd fffe 	bl	8001038 <HAL_Delay>
			  for(uint8_t i = 0; i < 6; i ++)
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	3201      	adds	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	1dfb      	adds	r3, r7, #7
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d9ee      	bls.n	800302c <main+0x148>
			  }
			  isLowBat = 1;
 800304e:	4b78      	ldr	r3, [pc, #480]	; (8003230 <main+0x34c>)
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
		  }
	  }


	  nowLedTick = HAL_GetTick();
 8003054:	f7fd ffe6 	bl	8001024 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <main+0x350>)
 800305c:	601a      	str	r2, [r3, #0]
	  if(nowLedTick > 50)
 800305e:	4b75      	ldr	r3, [pc, #468]	; (8003234 <main+0x350>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b32      	cmp	r3, #50	; 0x32
 8003064:	d903      	bls.n	800306e <main+0x18a>
	  {
		  //add dmad
		  pastLedTick = nowLedTick;
 8003066:	4b73      	ldr	r3, [pc, #460]	; (8003234 <main+0x350>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <main+0x354>)
 800306c:	601a      	str	r2, [r3, #0]
	  }



	  nowTick = HAL_GetTick();
 800306e:	f7fd ffd9 	bl	8001024 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	4b71      	ldr	r3, [pc, #452]	; (800323c <main+0x358>)
 8003076:	601a      	str	r2, [r3, #0]
	  if(isSwitch)
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <main+0x35c>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <main+0x1c8>
	  {
		  if(nowTick - pastTick > 800)
 8003080:	4b6e      	ldr	r3, [pc, #440]	; (800323c <main+0x358>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <main+0x360>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	23c8      	movs	r3, #200	; 0xc8
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <main+0x1c8>
		  {
			  clickCount++;
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <main+0x364>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <main+0x364>)
 800309c:	701a      	strb	r2, [r3, #0]
			  isSwitch = 0;
 800309e:	4b68      	ldr	r3, [pc, #416]	; (8003240 <main+0x35c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
			  pastTick = nowTick;
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <main+0x358>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b66      	ldr	r3, [pc, #408]	; (8003244 <main+0x360>)
 80030aa:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(nowTick - pastTick > 1000)
 80030ac:	4b63      	ldr	r3, [pc, #396]	; (800323c <main+0x358>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <main+0x360>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	23fa      	movs	r3, #250	; 0xfa
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d950      	bls.n	8003160 <main+0x27c>
	  {
		  getCount = clickCount;
 80030be:	4b62      	ldr	r3, [pc, #392]	; (8003248 <main+0x364>)
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	4b62      	ldr	r3, [pc, #392]	; (800324c <main+0x368>)
 80030c4:	701a      	strb	r2, [r3, #0]
		  if(getCount != pastCount)
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <main+0x368>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b61      	ldr	r3, [pc, #388]	; (8003250 <main+0x36c>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d005      	beq.n	80030de <main+0x1fa>
		  {
			  step++;
 80030d2:	4b60      	ldr	r3, [pc, #384]	; (8003254 <main+0x370>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <main+0x370>)
 80030dc:	701a      	strb	r2, [r3, #0]
		  }
		  switch(step)
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <main+0x370>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d00d      	beq.n	8003102 <main+0x21e>
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d015      	beq.n	8003116 <main+0x232>
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d120      	bne.n	8003130 <main+0x24c>
		  {
		  case 1:
			  isRunning = 1;
 80030ee:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <main+0x374>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <main+0x378>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 1;
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <main+0x37c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
			  break;
 8003100:	e023      	b.n	800314a <main+0x266>
		  case 2:
			  isRunning = 1;
 8003102:	4b55      	ldr	r3, [pc, #340]	; (8003258 <main+0x374>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 1;
 8003108:	4b54      	ldr	r3, [pc, #336]	; (800325c <main+0x378>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 800310e:	4b54      	ldr	r3, [pc, #336]	; (8003260 <main+0x37c>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
			  break;
 8003114:	e019      	b.n	800314a <main+0x266>
		  case 3:
			  isRunning = 0;
 8003116:	4b50      	ldr	r3, [pc, #320]	; (8003258 <main+0x374>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <main+0x378>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 8003122:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <main+0x37c>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
			  step = 0;
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <main+0x370>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
			  break;
 800312e:	e00c      	b.n	800314a <main+0x266>
		  default:
			  isRunning = 0;
 8003130:	4b49      	ldr	r3, [pc, #292]	; (8003258 <main+0x374>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <main+0x378>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 800313c:	4b48      	ldr	r3, [pc, #288]	; (8003260 <main+0x37c>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
			  step = 0;
 8003142:	4b44      	ldr	r3, [pc, #272]	; (8003254 <main+0x370>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
			  break;
 8003148:	46c0      	nop			; (mov r8, r8)
		  }
		  isSwitch = 0;
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <main+0x35c>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
		  pastCount = getCount;
 8003150:	4b3e      	ldr	r3, [pc, #248]	; (800324c <main+0x368>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <main+0x36c>)
 8003156:	701a      	strb	r2, [r3, #0]
		  pastTick = nowTick;
 8003158:	4b38      	ldr	r3, [pc, #224]	; (800323c <main+0x358>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <main+0x360>)
 800315e:	601a      	str	r2, [r3, #0]
	  }


	  nowSleepTick = HAL_GetTick();
 8003160:	f7fd ff60 	bl	8001024 <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <main+0x380>)
 8003168:	601a      	str	r2, [r3, #0]

	  if(nowSleepTick - pastSleepTick > 5000)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <main+0x380>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <main+0x384>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4a3d      	ldr	r2, [pc, #244]	; (800326c <main+0x388>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d800      	bhi.n	800317c <main+0x298>
 800317a:	e6ee      	b.n	8002f5a <main+0x76>
	  {
		  if(isLowBat)
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <main+0x34c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <main+0x2d0>
		  {
			  //goToSleep;
			  set_charging_led(OFF);
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff fe83 	bl	8002e90 <set_charging_led>
			  set_neopixel_boost(OFF);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff fe5c 	bl	8002e48 <set_neopixel_boost>
			  set_neopixel_led(OFF);
 8003190:	2000      	movs	r0, #0
 8003192:	f7ff fe36 	bl	8002e02 <set_neopixel_led>
			  set_uv_boost(OFF);
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff fe12 	bl	8002dc0 <set_uv_boost>
			  set_uv_led(OFF);
 800319c:	2000      	movs	r0, #0
 800319e:	f7ff fdee 	bl	8002d7e <set_uv_led>
			  HAL_SuspendTick();
 80031a2:	f7fd ff67 	bl	8001074 <HAL_SuspendTick>
			  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80031a6:	2101      	movs	r1, #1
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7fe fdf7 	bl	8001d9c <HAL_PWR_EnterSLEEPMode>
			  HAL_ResumeTick();
 80031ae:	f7fd ff6f 	bl	8001090 <HAL_ResumeTick>
 80031b2:	e01e      	b.n	80031f2 <main+0x30e>
		  }
		  else
		  {
			  if(isRunning)
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <main+0x374>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11a      	bne.n	80031f2 <main+0x30e>
			  {
				  //don't sleep;
			  }
			  else
			  {
				  if(isCharging)
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <main+0x324>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <main+0x30e>
					  //don't sleep;
				  }
				  else
				  {
					  //goToSleep;
					  set_charging_led(OFF);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff fe63 	bl	8002e90 <set_charging_led>
					  set_neopixel_boost(OFF);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff fe3c 	bl	8002e48 <set_neopixel_boost>
					  set_neopixel_led(OFF);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7ff fe16 	bl	8002e02 <set_neopixel_led>
					  set_uv_boost(OFF);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f7ff fdf2 	bl	8002dc0 <set_uv_boost>
					  set_uv_led(OFF);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7ff fdce 	bl	8002d7e <set_uv_led>
					  HAL_SuspendTick();
 80031e2:	f7fd ff47 	bl	8001074 <HAL_SuspendTick>
					  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80031e6:	2101      	movs	r1, #1
 80031e8:	2001      	movs	r0, #1
 80031ea:	f7fe fdd7 	bl	8001d9c <HAL_PWR_EnterSLEEPMode>
					  HAL_ResumeTick();
 80031ee:	f7fd ff4f 	bl	8001090 <HAL_ResumeTick>
				  }
			  }
		  }
		  pastSleepTick = nowSleepTick;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <main+0x380>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <main+0x384>)
 80031f8:	601a      	str	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 80031fa:	e6ae      	b.n	8002f5a <main+0x76>
 80031fc:	40021000 	.word	0x40021000
 8003200:	200000ac 	.word	0x200000ac
 8003204:	2000005c 	.word	0x2000005c
 8003208:	20000021 	.word	0x20000021
 800320c:	2000003c 	.word	0x2000003c
 8003210:	20000040 	.word	0x20000040
 8003214:	0000ffff 	.word	0x0000ffff
 8003218:	2000004c 	.word	0x2000004c
 800321c:	fffff2d8 	.word	0xfffff2d8
 8003220:	2474538f 	.word	0x2474538f
 8003224:	3fc8ff97 	.word	0x3fc8ff97
 8003228:	20000050 	.word	0x20000050
 800322c:	20000054 	.word	0x20000054
 8003230:	20000022 	.word	0x20000022
 8003234:	20000034 	.word	0x20000034
 8003238:	20000038 	.word	0x20000038
 800323c:	2000002c 	.word	0x2000002c
 8003240:	20000020 	.word	0x20000020
 8003244:	20000030 	.word	0x20000030
 8003248:	20000026 	.word	0x20000026
 800324c:	20000027 	.word	0x20000027
 8003250:	20000028 	.word	0x20000028
 8003254:	2000006c 	.word	0x2000006c
 8003258:	20000023 	.word	0x20000023
 800325c:	20000024 	.word	0x20000024
 8003260:	20000025 	.word	0x20000025
 8003264:	20000044 	.word	0x20000044
 8003268:	20000048 	.word	0x20000048
 800326c:	00001388 	.word	0x00001388

08003270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b093      	sub	sp, #76	; 0x4c
 8003274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003276:	2414      	movs	r4, #20
 8003278:	193b      	adds	r3, r7, r4
 800327a:	0018      	movs	r0, r3
 800327c:	2334      	movs	r3, #52	; 0x34
 800327e:	001a      	movs	r2, r3
 8003280:	2100      	movs	r1, #0
 8003282:	f000 fb3b 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003286:	003b      	movs	r3, r7
 8003288:	0018      	movs	r0, r3
 800328a:	2314      	movs	r3, #20
 800328c:	001a      	movs	r2, r3
 800328e:	2100      	movs	r1, #0
 8003290:	f000 fb34 	bl	80038fc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <SystemClock_Config+0xb4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <SystemClock_Config+0xb8>)
 800329a:	401a      	ands	r2, r3
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <SystemClock_Config+0xb4>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	0109      	lsls	r1, r1, #4
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80032a6:	0021      	movs	r1, r4
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	220a      	movs	r2, #10
 80032ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2201      	movs	r2, #1
 80032b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	2210      	movs	r2, #16
 80032b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	2201      	movs	r2, #1
 80032be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	2202      	movs	r2, #2
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	2200      	movs	r2, #0
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	2200      	movs	r2, #0
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0412      	lsls	r2, r2, #16
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fe fda7 	bl	8001e30 <HAL_RCC_OscConfig>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80032e6:	f000 f99f 	bl	8003628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ea:	003b      	movs	r3, r7
 80032ec:	220f      	movs	r2, #15
 80032ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f0:	003b      	movs	r3, r7
 80032f2:	2203      	movs	r2, #3
 80032f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80032f6:	003b      	movs	r3, r7
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032fc:	003b      	movs	r3, r7
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003302:	003b      	movs	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003308:	003b      	movs	r3, r7
 800330a:	2100      	movs	r1, #0
 800330c:	0018      	movs	r0, r3
 800330e:	f7ff f909 	bl	8002524 <HAL_RCC_ClockConfig>
 8003312:	1e03      	subs	r3, r0, #0
 8003314:	d001      	beq.n	800331a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003316:	f000 f987 	bl	8003628 <Error_Handler>
  }
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b013      	add	sp, #76	; 0x4c
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40007000 	.word	0x40007000
 8003328:	ffffe7ff 	.word	0xffffe7ff

0800332c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003332:	003b      	movs	r3, r7
 8003334:	0018      	movs	r0, r3
 8003336:	2308      	movs	r3, #8
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f000 fade 	bl	80038fc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <MX_ADC_Init+0xc0>)
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <MX_ADC_Init+0xc4>)
 8003344:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <MX_ADC_Init+0xc0>)
 8003348:	2200      	movs	r2, #0
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <MX_ADC_Init+0xc0>)
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	05d2      	lsls	r2, r2, #23
 8003352:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <MX_ADC_Init+0xc0>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <MX_ADC_Init+0xc0>)
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <MX_ADC_Init+0xc0>)
 8003362:	2201      	movs	r2, #1
 8003364:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <MX_ADC_Init+0xc0>)
 8003368:	2200      	movs	r2, #0
 800336a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <MX_ADC_Init+0xc0>)
 800336e:	2220      	movs	r2, #32
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <MX_ADC_Init+0xc0>)
 8003376:	2221      	movs	r2, #33	; 0x21
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <MX_ADC_Init+0xc0>)
 800337e:	2200      	movs	r2, #0
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <MX_ADC_Init+0xc0>)
 8003384:	22c2      	movs	r2, #194	; 0xc2
 8003386:	32ff      	adds	r2, #255	; 0xff
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <MX_ADC_Init+0xc0>)
 800338c:	222c      	movs	r2, #44	; 0x2c
 800338e:	2100      	movs	r1, #0
 8003390:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <MX_ADC_Init+0xc0>)
 8003394:	2204      	movs	r2, #4
 8003396:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <MX_ADC_Init+0xc0>)
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <MX_ADC_Init+0xc0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_ADC_Init+0xc0>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_ADC_Init+0xc0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_ADC_Init+0xc0>)
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fd fe7a 	bl	80010ac <HAL_ADC_Init>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80033bc:	f000 f934 	bl	8003628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033c0:	003b      	movs	r3, r7
 80033c2:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <MX_ADC_Init+0xc8>)
 80033c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033c6:	003b      	movs	r3, r7
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	0152      	lsls	r2, r2, #5
 80033cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033ce:	003a      	movs	r2, r7
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_ADC_Init+0xc0>)
 80033d2:	0011      	movs	r1, r2
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fe f8d3 	bl	8001580 <HAL_ADC_ConfigChannel>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d001      	beq.n	80033e2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80033de:	f000 f923 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	200000ac 	.word	0x200000ac
 80033f0:	40012400 	.word	0x40012400
 80033f4:	0c000008 	.word	0x0c000008

080033f8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <MX_IWDG_Init+0x34>)
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <MX_IWDG_Init+0x38>)
 8003400:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MX_IWDG_Init+0x34>)
 8003404:	2205      	movs	r2, #5
 8003406:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <MX_IWDG_Init+0x34>)
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <MX_IWDG_Init+0x3c>)
 800340c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <MX_IWDG_Init+0x34>)
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <MX_IWDG_Init+0x3c>)
 8003412:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <MX_IWDG_Init+0x34>)
 8003416:	0018      	movs	r0, r3
 8003418:	f7fe fc66 	bl	8001ce8 <HAL_IWDG_Init>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8003420:	f000 f902 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	2000005c 	.word	0x2000005c
 8003430:	40003000 	.word	0x40003000
 8003434:	00000fff 	.word	0x00000fff

08003438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343e:	2310      	movs	r3, #16
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	0018      	movs	r0, r3
 8003444:	2308      	movs	r3, #8
 8003446:	001a      	movs	r2, r3
 8003448:	2100      	movs	r1, #0
 800344a:	f000 fa57 	bl	80038fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344e:	003b      	movs	r3, r7
 8003450:	0018      	movs	r0, r3
 8003452:	2310      	movs	r3, #16
 8003454:	001a      	movs	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	f000 fa50 	bl	80038fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <MX_TIM2_Init+0xb8>)
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	05d2      	lsls	r2, r2, #23
 8003462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <MX_TIM2_Init+0xb8>)
 8003466:	2207      	movs	r2, #7
 8003468:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <MX_TIM2_Init+0xb8>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003470:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <MX_TIM2_Init+0xb8>)
 8003472:	4a20      	ldr	r2, [pc, #128]	; (80034f4 <MX_TIM2_Init+0xbc>)
 8003474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <MX_TIM2_Init+0xb8>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <MX_TIM2_Init+0xb8>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <MX_TIM2_Init+0xb8>)
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff f9fb 	bl	8002880 <HAL_TIM_PWM_Init>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800348e:	f000 f8cb 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2110      	movs	r1, #16
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2200      	movs	r2, #0
 800349e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034a0:	187a      	adds	r2, r7, r1
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <MX_TIM2_Init+0xb8>)
 80034a4:	0011      	movs	r1, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fc26 	bl	8002cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80034b0:	f000 f8ba 	bl	8003628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b4:	003b      	movs	r3, r7
 80034b6:	2260      	movs	r2, #96	; 0x60
 80034b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80034ba:	003b      	movs	r3, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034c0:	003b      	movs	r3, r7
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034c6:	003b      	movs	r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034cc:	0039      	movs	r1, r7
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <MX_TIM2_Init+0xb8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff fa00 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80034dc:	f000 f8a4 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <MX_TIM2_Init+0xb8>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f916 	bl	8003714 <HAL_TIM_MspPostInit>

}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b006      	add	sp, #24
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000070 	.word	0x20000070
 80034f4:	0000270f 	.word	0x0000270f

080034f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fe:	240c      	movs	r4, #12
 8003500:	193b      	adds	r3, r7, r4
 8003502:	0018      	movs	r0, r3
 8003504:	2314      	movs	r3, #20
 8003506:	001a      	movs	r2, r3
 8003508:	2100      	movs	r1, #0
 800350a:	f000 f9f7 	bl	80038fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <MX_GPIO_Init+0xe8>)
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <MX_GPIO_Init+0xe8>)
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <MX_GPIO_Init+0xe8>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	2201      	movs	r2, #1
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <MX_GPIO_Init+0xe8>)
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <MX_GPIO_Init+0xe8>)
 800352c:	2102      	movs	r1, #2
 800352e:	430a      	orrs	r2, r1
 8003530:	62da      	str	r2, [r3, #44]	; 0x2c
 8003532:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <MX_GPIO_Init+0xe8>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_UV_Pin|BOOST_EN_UV_Pin|LED_NEOPIXEL_Pin|BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_RESET);
 800353e:	23ca      	movs	r3, #202	; 0xca
 8003540:	00d9      	lsls	r1, r3, #3
 8003542:	23a0      	movs	r3, #160	; 0xa0
 8003544:	05db      	lsls	r3, r3, #23
 8003546:	2200      	movs	r2, #0
 8003548:	0018      	movs	r0, r3
 800354a:	f7fe fb82 	bl	8001c52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <MX_GPIO_Init+0xec>)
 8003550:	2200      	movs	r2, #0
 8003552:	2102      	movs	r1, #2
 8003554:	0018      	movs	r0, r3
 8003556:	f7fe fb7c 	bl	8001c52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_UV_Pin BOOST_EN_UV_Pin LED_NEOPIXEL_Pin BOOST_EN_NEOPIXEL_Pin */
  GPIO_InitStruct.Pin = LED_UV_Pin|BOOST_EN_UV_Pin|LED_NEOPIXEL_Pin|BOOST_EN_NEOPIXEL_Pin;
 800355a:	193b      	adds	r3, r7, r4
 800355c:	22ca      	movs	r2, #202	; 0xca
 800355e:	00d2      	lsls	r2, r2, #3
 8003560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003562:	193b      	adds	r3, r7, r4
 8003564:	2201      	movs	r2, #1
 8003566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003574:	193a      	adds	r2, r7, r4
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f7fe f9dd 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin CHARGE_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|CHARGE_Pin;
 8003582:	193b      	adds	r3, r7, r4
 8003584:	22a0      	movs	r2, #160	; 0xa0
 8003586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003588:	193b      	adds	r3, r7, r4
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <MX_GPIO_Init+0xf0>)
 800358c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	193b      	adds	r3, r7, r4
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	193a      	adds	r2, r7, r4
 8003596:	23a0      	movs	r3, #160	; 0xa0
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe f9cd 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CHARGE_Pin */
  GPIO_InitStruct.Pin = LED_CHARGE_Pin;
 80035a2:	0021      	movs	r1, r4
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2201      	movs	r2, #1
 80035ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CHARGE_GPIO_Port, &GPIO_InitStruct);
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <MX_GPIO_Init+0xec>)
 80035c0:	0019      	movs	r1, r3
 80035c2:	0010      	movs	r0, r2
 80035c4:	f7fe f9ba 	bl	800193c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80035c8:	2200      	movs	r2, #0
 80035ca:	2100      	movs	r1, #0
 80035cc:	2007      	movs	r0, #7
 80035ce:	f7fe f983 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80035d2:	2007      	movs	r0, #7
 80035d4:	f7fe f995 	bl	8001902 <HAL_NVIC_EnableIRQ>

}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b009      	add	sp, #36	; 0x24
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	50000400 	.word	0x50000400
 80035e8:	10110000 	.word	0x10110000

080035ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	0002      	movs	r2, r0
 80035f4:	1dbb      	adds	r3, r7, #6
 80035f6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == SWITCH_Pin)
 80035f8:	1dbb      	adds	r3, r7, #6
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d103      	bne.n	8003608 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		isSwitch = 1;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_GPIO_EXTI_Callback+0x34>)
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == CHARGE_Pin)
	{
		isCharging = 1;
	}
}
 8003606:	e006      	b.n	8003616 <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin == CHARGE_Pin)
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d102      	bne.n	8003616 <HAL_GPIO_EXTI_Callback+0x2a>
		isCharging = 1;
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <HAL_GPIO_EXTI_Callback+0x38>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	20000020 	.word	0x20000020
 8003624:	20000021 	.word	0x20000021

08003628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_MspInit+0x34>)
 800363a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_MspInit+0x34>)
 800363e:	2101      	movs	r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_MspInit+0x34>)
 8003646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_MspInit+0x34>)
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	0549      	lsls	r1, r1, #21
 800364e:	430a      	orrs	r2, r1
 8003650:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2001      	movs	r0, #1
 8003658:	f7fe f93e 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800365c:	2001      	movs	r0, #1
 800365e:	f7fe f950 	bl	8001902 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	230c      	movs	r3, #12
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	0018      	movs	r0, r3
 800367a:	2314      	movs	r3, #20
 800367c:	001a      	movs	r2, r3
 800367e:	2100      	movs	r1, #0
 8003680:	f000 f93c 	bl	80038fc <memset>
  if(hadc->Instance==ADC1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <HAL_ADC_MspInit+0x74>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d123      	bne.n	80036d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_ADC_MspInit+0x78>)
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_ADC_MspInit+0x78>)
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0089      	lsls	r1, r1, #2
 8003698:	430a      	orrs	r2, r1
 800369a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_ADC_MspInit+0x78>)
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_ADC_MspInit+0x78>)
 80036a2:	2101      	movs	r1, #1
 80036a4:	430a      	orrs	r2, r1
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_ADC_MspInit+0x78>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 80036b4:	210c      	movs	r1, #12
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2208      	movs	r2, #8
 80036ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	2203      	movs	r2, #3
 80036c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 80036c8:	187a      	adds	r2, r7, r1
 80036ca:	23a0      	movs	r3, #160	; 0xa0
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	0011      	movs	r1, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7fe f933 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b008      	add	sp, #32
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40012400 	.word	0x40012400
 80036e4:	40021000 	.word	0x40021000

080036e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d105      	bne.n	8003708 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_TIM_PWM_MspInit+0x28>)
 80036fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_TIM_PWM_MspInit+0x28>)
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	230c      	movs	r3, #12
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	0018      	movs	r0, r3
 8003722:	2314      	movs	r3, #20
 8003724:	001a      	movs	r2, r3
 8003726:	2100      	movs	r1, #0
 8003728:	f000 f8e8 	bl	80038fc <memset>
  if(htim->Instance==TIM2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	429a      	cmp	r2, r3
 8003736:	d122      	bne.n	800377e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <HAL_TIM_MspPostInit+0x74>)
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_TIM_MspPostInit+0x74>)
 800373e:	2101      	movs	r1, #1
 8003740:	430a      	orrs	r2, r1
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_TIM_MspPostInit+0x74>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	4013      	ands	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = LED_R_Pin;
 8003750:	210c      	movs	r1, #12
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2202      	movs	r2, #2
 800375c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2201      	movs	r2, #1
 8003762:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2202      	movs	r2, #2
 800376e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8003770:	187a      	adds	r2, r7, r1
 8003772:	23a0      	movs	r3, #160	; 0xa0
 8003774:	05db      	lsls	r3, r3, #23
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f7fe f8df 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b008      	add	sp, #32
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40021000 	.word	0x40021000

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <HardFault_Handler+0x4>

0800379c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b4:	f7fd fc2a 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80037c2:	f7fe fb1b 	bl	8001dfc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80037d0:	2020      	movs	r0, #32
 80037d2:	f7fe fa6d 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80037d6:	2080      	movs	r0, #128	; 0x80
 80037d8:	f7fe fa6a 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <SystemInit+0x64>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <SystemInit+0x64>)
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0049      	lsls	r1, r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <SystemInit+0x64>)
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <SystemInit+0x64>)
 80037fc:	4913      	ldr	r1, [pc, #76]	; (800384c <SystemInit+0x68>)
 80037fe:	400a      	ands	r2, r1
 8003800:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <SystemInit+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <SystemInit+0x64>)
 8003808:	4911      	ldr	r1, [pc, #68]	; (8003850 <SystemInit+0x6c>)
 800380a:	400a      	ands	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <SystemInit+0x64>)
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <SystemInit+0x64>)
 8003814:	2101      	movs	r1, #1
 8003816:	438a      	bics	r2, r1
 8003818:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <SystemInit+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <SystemInit+0x64>)
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <SystemInit+0x70>)
 8003822:	400a      	ands	r2, r1
 8003824:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <SystemInit+0x64>)
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <SystemInit+0x64>)
 800382c:	490a      	ldr	r1, [pc, #40]	; (8003858 <SystemInit+0x74>)
 800382e:	400a      	ands	r2, r1
 8003830:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <SystemInit+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <SystemInit+0x78>)
 800383a:	2280      	movs	r2, #128	; 0x80
 800383c:	0512      	lsls	r2, r2, #20
 800383e:	609a      	str	r2, [r3, #8]
#endif
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	40021000 	.word	0x40021000
 800384c:	88ff400c 	.word	0x88ff400c
 8003850:	fef6fff6 	.word	0xfef6fff6
 8003854:	fffbffff 	.word	0xfffbffff
 8003858:	ff02ffff 	.word	0xff02ffff
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003862:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003866:	e003      	b.n	8003870 <LoopCopyDataInit>

08003868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800386a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800386c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800386e:	3104      	adds	r1, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003870:	480b      	ldr	r0, [pc, #44]	; (80038a0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003878:	d3f6      	bcc.n	8003868 <CopyDataInit>
  ldr  r2, =_sbss
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <LoopForever+0x12>)
  b  LoopFillZerobss
 800387c:	e002      	b.n	8003884 <LoopFillZerobss>

0800387e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800387e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003880:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003882:	3204      	adds	r2, #4

08003884 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <LoopForever+0x16>)
  cmp  r2, r3
 8003886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003888:	d3f9      	bcc.n	800387e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800388a:	f7ff ffab 	bl	80037e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800388e:	f000 f811 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003892:	f7ff fb27 	bl	8002ee4 <main>

08003896 <LoopForever>:

LoopForever:
    b LoopForever
 8003896:	e7fe      	b.n	8003896 <LoopForever>
   ldr   r0, =_estack
 8003898:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800389c:	08003988 	.word	0x08003988
  ldr  r0, =_sdata
 80038a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038a4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80038a8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80038ac:	20000108 	.word	0x20000108

080038b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC1_COMP_IRQHandler>
	...

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	; (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	; (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	2600      	movs	r6, #0
 80038c6:	f000 f821 	bl	800390c <_init>
 80038ca:	4d0a      	ldr	r5, [pc, #40]	; (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	; (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	00b3      	lsls	r3, r6, #2
 80038da:	58eb      	ldr	r3, [r5, r3]
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	00b3      	lsls	r3, r6, #2
 80038e4:	58eb      	ldr	r3, [r5, r3]
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003980 	.word	0x08003980
 80038f0:	08003980 	.word	0x08003980
 80038f4:	08003980 	.word	0x08003980
 80038f8:	08003984 	.word	0x08003984

080038fc <memset>:
 80038fc:	0003      	movs	r3, r0
 80038fe:	1812      	adds	r2, r2, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	7019      	strb	r1, [r3, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
