
UV_brush_holder_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af4  08003af4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003af4  08003af4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af4  08003af4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000008  08003b04  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003b04  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009623  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a7  00000000  00000000  00029653  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011496  00000000  00000000  0002c398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086bb  00000000  00000000  0003d82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b019  00000000  00000000  00045ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  000b0f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ac0 	.word	0x08003ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08003ac0 	.word	0x08003ac0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f003 fa93 	bl	8003774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fca2 	bl	8000bca <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fc6f 	bl	8000b80 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000005c 	.word	0x2000005c

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	2000005c 	.word	0x2000005c

080002e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff0 	bl	80002cc <HAL_GetTick>
 80002ec:	0003      	movs	r3, r0
 80002ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	d002      	beq.n	8000300 <HAL_Delay+0x20>
  {
    wait++;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	f7ff ffe3 	bl	80002cc <HAL_GetTick>
 8000306:	0002      	movs	r2, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1ad3      	subs	r3, r2, r3
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	d8f7      	bhi.n	8000302 <HAL_Delay+0x22>
  {
  }
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_SuspendTick+0x18>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <HAL_SuspendTick+0x18>)
 8000326:	2102      	movs	r1, #2
 8000328:	438a      	bics	r2, r1
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	e000e010 	.word	0xe000e010

08000338 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <HAL_ResumeTick+0x18>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <HAL_ResumeTick+0x18>)
 8000342:	2102      	movs	r1, #2
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	e000e010 	.word	0xe000e010

08000354 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d101      	bne.n	8000366 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000362:	2301      	movs	r3, #1
 8000364:	e159      	b.n	800061a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800036a:	2b00      	cmp	r3, #0
 800036c:	d10a      	bne.n	8000384 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2250      	movs	r2, #80	; 0x50
 8000378:	2100      	movs	r1, #0
 800037a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	0018      	movs	r0, r3
 8000380:	f003 fa14 	bl	80037ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000388:	2210      	movs	r2, #16
 800038a:	4013      	ands	r3, r2
 800038c:	2b10      	cmp	r3, #16
 800038e:	d005      	beq.n	800039c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	2204      	movs	r2, #4
 8000398:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800039a:	d00b      	beq.n	80003b4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80003a0:	2210      	movs	r2, #16
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2250      	movs	r2, #80	; 0x50
 80003ac:	2100      	movs	r1, #0
 80003ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e132      	b.n	800061a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80003b8:	4a9a      	ldr	r2, [pc, #616]	; (8000624 <HAL_ADC_Init+0x2d0>)
 80003ba:	4013      	ands	r3, r2
 80003bc:	2202      	movs	r2, #2
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2203      	movs	r2, #3
 80003cc:	4013      	ands	r3, r2
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d108      	bne.n	80003e4 <HAL_ADC_Init+0x90>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2201      	movs	r2, #1
 80003da:	4013      	ands	r3, r2
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d101      	bne.n	80003e4 <HAL_ADC_Init+0x90>
 80003e0:	2301      	movs	r3, #1
 80003e2:	e000      	b.n	80003e6 <HAL_ADC_Init+0x92>
 80003e4:	2300      	movs	r3, #0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d149      	bne.n	800047e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685a      	ldr	r2, [r3, #4]
 80003ee:	23c0      	movs	r3, #192	; 0xc0
 80003f0:	061b      	lsls	r3, r3, #24
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d00b      	beq.n	800040e <HAL_ADC_Init+0xba>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	429a      	cmp	r2, r3
 8000400:	d005      	beq.n	800040e <HAL_ADC_Init+0xba>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	061b      	lsls	r3, r3, #24
 800040a:	429a      	cmp	r2, r3
 800040c:	d111      	bne.n	8000432 <HAL_ADC_Init+0xde>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	691a      	ldr	r2, [r3, #16]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	0892      	lsrs	r2, r2, #2
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6919      	ldr	r1, [r3, #16]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	430a      	orrs	r2, r1
 800042e:	611a      	str	r2, [r3, #16]
 8000430:	e014      	b.n	800045c <HAL_ADC_Init+0x108>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	691a      	ldr	r2, [r3, #16]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	0892      	lsrs	r2, r2, #2
 8000440:	611a      	str	r2, [r3, #16]
 8000442:	4b79      	ldr	r3, [pc, #484]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b78      	ldr	r3, [pc, #480]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000448:	4978      	ldr	r1, [pc, #480]	; (800062c <HAL_ADC_Init+0x2d8>)
 800044a:	400a      	ands	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	4b76      	ldr	r3, [pc, #472]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	4b74      	ldr	r3, [pc, #464]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	68da      	ldr	r2, [r3, #12]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2118      	movs	r1, #24
 8000468:	438a      	bics	r2, r1
 800046a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	68d9      	ldr	r1, [r3, #12]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689a      	ldr	r2, [r3, #8]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	430a      	orrs	r2, r1
 800047c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800047e:	4b6a      	ldr	r3, [pc, #424]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b69      	ldr	r3, [pc, #420]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000484:	496a      	ldr	r1, [pc, #424]	; (8000630 <HAL_ADC_Init+0x2dc>)
 8000486:	400a      	ands	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800048a:	4b67      	ldr	r3, [pc, #412]	; (8000628 <HAL_ADC_Init+0x2d4>)
 800048c:	6819      	ldr	r1, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000492:	065a      	lsls	r2, r3, #25
 8000494:	4b64      	ldr	r3, [pc, #400]	; (8000628 <HAL_ADC_Init+0x2d4>)
 8000496:	430a      	orrs	r2, r1
 8000498:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	055b      	lsls	r3, r3, #21
 80004a4:	4013      	ands	r3, r2
 80004a6:	d108      	bne.n	80004ba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0549      	lsls	r1, r1, #21
 80004b6:	430a      	orrs	r2, r1
 80004b8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	495b      	ldr	r1, [pc, #364]	; (8000634 <HAL_ADC_Init+0x2e0>)
 80004c6:	400a      	ands	r2, r1
 80004c8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68d9      	ldr	r1, [r3, #12]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	691b      	ldr	r3, [r3, #16]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d101      	bne.n	80004e0 <HAL_ADC_Init+0x18c>
 80004dc:	2304      	movs	r3, #4
 80004de:	e000      	b.n	80004e2 <HAL_ADC_Init+0x18e>
 80004e0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80004e2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2020      	movs	r0, #32
 80004e8:	5c1b      	ldrb	r3, [r3, r0]
 80004ea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80004ec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	202c      	movs	r0, #44	; 0x2c
 80004f2:	5c1b      	ldrb	r3, [r3, r0]
 80004f4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004f6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80004fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000504:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800050c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	430a      	orrs	r2, r1
 8000514:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800051a:	23c2      	movs	r3, #194	; 0xc2
 800051c:	33ff      	adds	r3, #255	; 0xff
 800051e:	429a      	cmp	r2, r3
 8000520:	d00b      	beq.n	800053a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68d9      	ldr	r1, [r3, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	430a      	orrs	r2, r1
 8000538:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2221      	movs	r2, #33	; 0x21
 800053e:	5c9b      	ldrb	r3, [r3, r2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11a      	bne.n	800057a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2220      	movs	r2, #32
 8000548:	5c9b      	ldrb	r3, [r3, r2]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d109      	bne.n	8000562 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0249      	lsls	r1, r1, #9
 800055c:	430a      	orrs	r2, r1
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	e00b      	b.n	800057a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000566:	2220      	movs	r2, #32
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	2201      	movs	r2, #1
 8000574:	431a      	orrs	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057e:	2b01      	cmp	r3, #1
 8000580:	d11f      	bne.n	80005c2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	691a      	ldr	r2, [r3, #16]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	492a      	ldr	r1, [pc, #168]	; (8000638 <HAL_ADC_Init+0x2e4>)
 800058e:	400a      	ands	r2, r1
 8000590:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6919      	ldr	r1, [r3, #16]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80005a0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80005a6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	691a      	ldr	r2, [r3, #16]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2101      	movs	r1, #1
 80005bc:	430a      	orrs	r2, r1
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	e00e      	b.n	80005e0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4013      	ands	r3, r2
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d107      	bne.n	80005e0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	691a      	ldr	r2, [r3, #16]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2101      	movs	r1, #1
 80005dc:	438a      	bics	r2, r1
 80005de:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2107      	movs	r1, #7
 80005ec:	438a      	bics	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6959      	ldr	r1, [r3, #20]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	430a      	orrs	r2, r1
 8000600:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800060c:	2203      	movs	r2, #3
 800060e:	4393      	bics	r3, r2
 8000610:	2201      	movs	r2, #1
 8000612:	431a      	orrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	0018      	movs	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	fffffefd 	.word	0xfffffefd
 8000628:	40012708 	.word	0x40012708
 800062c:	ffc3ffff 	.word	0xffc3ffff
 8000630:	fdffffff 	.word	0xfdffffff
 8000634:	fffe0219 	.word	0xfffe0219
 8000638:	fffffc03 	.word	0xfffffc03

0800063c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000644:	230f      	movs	r3, #15
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	2204      	movs	r2, #4
 8000654:	4013      	ands	r3, r2
 8000656:	d138      	bne.n	80006ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2250      	movs	r2, #80	; 0x50
 800065c:	5c9b      	ldrb	r3, [r3, r2]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d101      	bne.n	8000666 <HAL_ADC_Start+0x2a>
 8000662:	2302      	movs	r3, #2
 8000664:	e038      	b.n	80006d8 <HAL_ADC_Start+0x9c>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2250      	movs	r2, #80	; 0x50
 800066a:	2101      	movs	r1, #1
 800066c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d007      	beq.n	8000686 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000676:	230f      	movs	r3, #15
 8000678:	18fc      	adds	r4, r7, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0018      	movs	r0, r3
 800067e:	f000 f959 	bl	8000934 <ADC_Enable>
 8000682:	0003      	movs	r3, r0
 8000684:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000686:	230f      	movs	r3, #15
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d120      	bne.n	80006d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <HAL_ADC_Start+0xa4>)
 8000696:	4013      	ands	r3, r2
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2250      	movs	r2, #80	; 0x50
 80006ac:	2100      	movs	r1, #0
 80006ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	221c      	movs	r2, #28
 80006b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2104      	movs	r1, #4
 80006c4:	430a      	orrs	r2, r1
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	e003      	b.n	80006d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80006ca:	230f      	movs	r3, #15
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	2202      	movs	r2, #2
 80006d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006d2:	230f      	movs	r3, #15
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	781b      	ldrb	r3, [r3, #0]
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b005      	add	sp, #20
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	fffff0fe 	.word	0xfffff0fe

080006e4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d102      	bne.n	8000704 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80006fe:	2308      	movs	r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e014      	b.n	800072e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	2b01      	cmp	r3, #1
 8000710:	d10b      	bne.n	800072a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000716:	2220      	movs	r2, #32
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2250      	movs	r2, #80	; 0x50
 8000722:	2100      	movs	r1, #0
 8000724:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e06c      	b.n	8000804 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800072a:	230c      	movs	r3, #12
 800072c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800072e:	f7ff fdcd 	bl	80002cc <HAL_GetTick>
 8000732:	0003      	movs	r3, r0
 8000734:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000736:	e019      	b.n	800076c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	d016      	beq.n	800076c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d007      	beq.n	8000754 <HAL_ADC_PollForConversion+0x70>
 8000744:	f7ff fdc2 	bl	80002cc <HAL_GetTick>
 8000748:	0002      	movs	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d20b      	bcs.n	800076c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000758:	2204      	movs	r2, #4
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2250      	movs	r2, #80	; 0x50
 8000764:	2100      	movs	r1, #0
 8000766:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000768:	2303      	movs	r3, #3
 800076a:	e04b      	b.n	8000804 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4013      	ands	r3, r2
 8000776:	d0df      	beq.n	8000738 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	431a      	orrs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68da      	ldr	r2, [r3, #12]
 800078c:	23c0      	movs	r3, #192	; 0xc0
 800078e:	011b      	lsls	r3, r3, #4
 8000790:	4013      	ands	r3, r2
 8000792:	d12e      	bne.n	80007f2 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2220      	movs	r2, #32
 8000798:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800079a:	2b00      	cmp	r3, #0
 800079c:	d129      	bne.n	80007f2 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2208      	movs	r2, #8
 80007a6:	4013      	ands	r3, r2
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d122      	bne.n	80007f2 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	2204      	movs	r2, #4
 80007b4:	4013      	ands	r3, r2
 80007b6:	d110      	bne.n	80007da <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	210c      	movs	r1, #12
 80007c4:	438a      	bics	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_ADC_PollForConversion+0x128>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	655a      	str	r2, [r3, #84]	; 0x54
 80007d8:	e00b      	b.n	80007f2 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007de:	2220      	movs	r2, #32
 80007e0:	431a      	orrs	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	2201      	movs	r2, #1
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}
 800080c:	fffffefe 	.word	0xfffffefe

08000810 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800081e:	0018      	movs	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2250      	movs	r2, #80	; 0x50
 8000836:	5c9b      	ldrb	r3, [r3, r2]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d101      	bne.n	8000840 <HAL_ADC_ConfigChannel+0x18>
 800083c:	2302      	movs	r3, #2
 800083e:	e06c      	b.n	800091a <HAL_ADC_ConfigChannel+0xf2>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2250      	movs	r2, #80	; 0x50
 8000844:	2101      	movs	r1, #1
 8000846:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	2204      	movs	r2, #4
 8000850:	4013      	ands	r3, r2
 8000852:	d00b      	beq.n	800086c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000858:	2220      	movs	r2, #32
 800085a:	431a      	orrs	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2250      	movs	r2, #80	; 0x50
 8000864:	2100      	movs	r1, #0
 8000866:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e056      	b.n	800091a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <HAL_ADC_ConfigChannel+0xfc>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d028      	beq.n	80008c8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	035b      	lsls	r3, r3, #13
 8000882:	0b5a      	lsrs	r2, r3, #13
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	430a      	orrs	r2, r1
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	02db      	lsls	r3, r3, #11
 8000894:	4013      	ands	r3, r2
 8000896:	d009      	beq.n	80008ac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0409      	lsls	r1, r1, #16
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f000 f8a4 	bl	80009f4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	029b      	lsls	r3, r3, #10
 80008b4:	4013      	ands	r3, r2
 80008b6:	d02b      	beq.n	8000910 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	03c9      	lsls	r1, r1, #15
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e023      	b.n	8000910 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	035b      	lsls	r3, r3, #13
 80008d4:	0b5b      	lsrs	r3, r3, #13
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	02db      	lsls	r3, r3, #11
 80008e8:	4013      	ands	r3, r2
 80008ea:	d005      	beq.n	80008f8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <HAL_ADC_ConfigChannel+0x104>)
 80008f4:	400a      	ands	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	029b      	lsls	r3, r3, #10
 8000900:	4013      	ands	r3, r2
 8000902:	d005      	beq.n	8000910 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_ADC_ConfigChannel+0x100>)
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <HAL_ADC_ConfigChannel+0x108>)
 800090c:	400a      	ands	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2250      	movs	r2, #80	; 0x50
 8000914:	2100      	movs	r1, #0
 8000916:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	00001001 	.word	0x00001001
 8000928:	40012708 	.word	0x40012708
 800092c:	ff7fffff 	.word	0xff7fffff
 8000930:	ffbfffff 	.word	0xffbfffff

08000934 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2203      	movs	r2, #3
 8000948:	4013      	ands	r3, r2
 800094a:	2b01      	cmp	r3, #1
 800094c:	d108      	bne.n	8000960 <ADC_Enable+0x2c>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <ADC_Enable+0x2c>
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <ADC_Enable+0x2e>
 8000960:	2300      	movs	r3, #0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d13f      	bne.n	80009e6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <ADC_Enable+0xbc>)
 800096e:	4013      	ands	r3, r2
 8000970:	d00d      	beq.n	800098e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000976:	2210      	movs	r2, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	2201      	movs	r2, #1
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e02c      	b.n	80009e8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f828 	bl	80009f4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80009a4:	f7ff fc92 	bl	80002cc <HAL_GetTick>
 80009a8:	0003      	movs	r3, r0
 80009aa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009ac:	e014      	b.n	80009d8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009ae:	f7ff fc8d 	bl	80002cc <HAL_GetTick>
 80009b2:	0002      	movs	r2, r0
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b0a      	cmp	r3, #10
 80009ba:	d90d      	bls.n	80009d8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c0:	2210      	movs	r2, #16
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009cc:	2201      	movs	r2, #1
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e007      	b.n	80009e8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1e3      	bne.n	80009ae <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b004      	add	sp, #16
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	80000017 	.word	0x80000017

080009f4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <ADC_DelayMicroSecond+0x34>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	490a      	ldr	r1, [pc, #40]	; (8000a2c <ADC_DelayMicroSecond+0x38>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fb80 	bl	8000108 <__udivsi3>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4353      	muls	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000a12:	e002      	b.n	8000a1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f9      	bne.n	8000a14 <ADC_DelayMicroSecond+0x20>
  } 
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	000f4240 	.word	0x000f4240

08000a30 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	231f      	movs	r3, #31
 8000a44:	401a      	ands	r2, r3
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <NVIC_EnableIRQ+0x28>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	000a      	movs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0002      	movs	r2, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a70:	d932      	bls.n	8000ad8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <NVIC_SetPriority+0xd4>)
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	3b08      	subs	r3, #8
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3306      	adds	r3, #6
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	3304      	adds	r3, #4
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1dfa      	adds	r2, r7, #7
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	0011      	movs	r1, r2
 8000a92:	2203      	movs	r2, #3
 8000a94:	400a      	ands	r2, r1
 8000a96:	00d2      	lsls	r2, r2, #3
 8000a98:	21ff      	movs	r1, #255	; 0xff
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	019b      	lsls	r3, r3, #6
 8000aa8:	22ff      	movs	r2, #255	; 0xff
 8000aaa:	401a      	ands	r2, r3
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	4003      	ands	r3, r0
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	481d      	ldr	r0, [pc, #116]	; (8000b30 <NVIC_SetPriority+0xd4>)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	4023      	ands	r3, r4
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	3306      	adds	r3, #6
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	18c3      	adds	r3, r0, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e027      	b.n	8000b28 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	33c0      	adds	r3, #192	; 0xc0
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	589b      	ldr	r3, [r3, r2]
 8000ae8:	1dfa      	adds	r2, r7, #7
 8000aea:	7812      	ldrb	r2, [r2, #0]
 8000aec:	0011      	movs	r1, r2
 8000aee:	2203      	movs	r2, #3
 8000af0:	400a      	ands	r2, r1
 8000af2:	00d2      	lsls	r2, r2, #3
 8000af4:	21ff      	movs	r1, #255	; 0xff
 8000af6:	4091      	lsls	r1, r2
 8000af8:	000a      	movs	r2, r1
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	401a      	ands	r2, r3
 8000afe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	019b      	lsls	r3, r3, #6
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	401a      	ands	r2, r3
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2303      	movs	r3, #3
 8000b10:	4003      	ands	r3, r0
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <NVIC_SetPriority+0xd8>)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	33c0      	adds	r3, #192	; 0xc0
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	501a      	str	r2, [r3, r0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <SysTick_Config+0x40>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d901      	bls.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e010      	b.n	8000b70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <SysTick_Config+0x44>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	3a01      	subs	r2, #1
 8000b54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	2301      	movs	r3, #1
 8000b58:	425b      	negs	r3, r3
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ff7d 	bl	8000a5c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SysTick_Config+0x44>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x44>)
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00ffffff 	.word	0x00ffffff
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	1c02      	adds	r2, r0, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <NVIC_SetPriority>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff37 	bl	8000a30 <NVIC_EnableIRQ>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ffaf 	bl	8000b38 <SysTick_Config>
 8000bda:	0003      	movs	r3, r0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e061      	b.n	8000cba <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_DMA_Init+0xe0>)
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	4463      	add	r3, ip
 8000c00:	2114      	movs	r1, #20
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fa80 	bl	8000108 <__udivsi3>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	009a      	lsls	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <HAL_DMA_Init+0xe4>)
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2225      	movs	r2, #37	; 0x25
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <HAL_DMA_Init+0xe8>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d018      	beq.n	8000ca2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_DMA_Init+0xec>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	211c      	movs	r1, #28
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	4099      	lsls	r1, r3
 8000c80:	000b      	movs	r3, r1
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_DMA_Init+0xec>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_DMA_Init+0xec>)
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	201c      	movs	r0, #28
 8000c98:	4003      	ands	r3, r0
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_DMA_Init+0xec>)
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2225      	movs	r2, #37	; 0x25
 8000cac:	2101      	movs	r1, #1
 8000cae:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2224      	movs	r2, #36	; 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	bffdfff8 	.word	0xbffdfff8
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	ffff800f 	.word	0xffff800f
 8000cd0:	400200a8 	.word	0x400200a8

08000cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce2:	2317      	movs	r3, #23
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2224      	movs	r2, #36	; 0x24
 8000cee:	5c9b      	ldrb	r3, [r3, r2]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <HAL_DMA_Start_IT+0x24>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e04f      	b.n	8000d98 <HAL_DMA_Start_IT+0xc4>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2225      	movs	r2, #37	; 0x25
 8000d04:	5c9b      	ldrb	r3, [r3, r2]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d13a      	bne.n	8000d82 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2225      	movs	r2, #37	; 0x25
 8000d10:	2102      	movs	r1, #2
 8000d12:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	438a      	bics	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f000 f92b 	bl	8000f8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d008      	beq.n	8000d50 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	210e      	movs	r1, #14
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e00f      	b.n	8000d70 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	438a      	bics	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2224      	movs	r2, #36	; 0x24
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d8a:	2317      	movs	r3, #23
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000d92:	2317      	movs	r3, #23
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2225      	movs	r2, #37	; 0x25
 8000db4:	5c9b      	ldrb	r3, [r3, r2]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d007      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e02a      	b.n	8000e22 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	210e      	movs	r1, #14
 8000dd8:	438a      	bics	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	438a      	bics	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	221c      	movs	r2, #28
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2225      	movs	r2, #37	; 0x25
 8000e04:	2101      	movs	r1, #1
 8000e06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2224      	movs	r2, #36	; 0x24
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	0010      	movs	r0, r2
 8000e20:	4798      	blx	r3
    }
  }
  return status;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	221c      	movs	r2, #28
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2204      	movs	r2, #4
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d026      	beq.n	8000eaa <HAL_DMA_IRQHandler+0x7a>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4013      	ands	r3, r2
 8000e62:	d022      	beq.n	8000eaa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d107      	bne.n	8000e80 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	221c      	movs	r2, #28
 8000e86:	401a      	ands	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <HAL_DMA_IRQHandler+0x6e>
 8000e9c:	e071      	b.n	8000f82 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	0010      	movs	r0, r2
 8000ea6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ea8:	e06b      	b.n	8000f82 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	221c      	movs	r2, #28
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d02d      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xea>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d10b      	bne.n	8000eea <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	210a      	movs	r1, #10
 8000ede:	438a      	bics	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	221c      	movs	r2, #28
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2224      	movs	r2, #36	; 0x24
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d039      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	0010      	movs	r0, r2
 8000f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f18:	e033      	b.n	8000f82 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	221c      	movs	r2, #28
 8000f20:	4013      	ands	r3, r2
 8000f22:	2208      	movs	r2, #8
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d02a      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x154>
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2208      	movs	r2, #8
 8000f32:	4013      	ands	r3, r2
 8000f34:	d026      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	210e      	movs	r1, #14
 8000f42:	438a      	bics	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	221c      	movs	r2, #28
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	2101      	movs	r1, #1
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2225      	movs	r2, #37	; 0x25
 8000f64:	2101      	movs	r1, #1
 8000f66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2224      	movs	r2, #36	; 0x24
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	0010      	movs	r0, r2
 8000f80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46c0      	nop			; (mov r8, r8)
}
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b004      	add	sp, #16
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	221c      	movs	r2, #28
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b10      	cmp	r3, #16
 8000fbc:	d108      	bne.n	8000fd0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fce:	e007      	b.n	8000fe0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	60da      	str	r2, [r3, #12]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ffe:	e149      	b.n	8001294 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4091      	lsls	r1, r2
 800100a:	000a      	movs	r2, r1
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x30>
 8001016:	e13a      	b.n	800128e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x40>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b12      	cmp	r3, #18
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	58d3      	ldr	r3, [r2, r3]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2207      	movs	r2, #7
 800103a:	4013      	ands	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2107      	movs	r1, #7
 8001054:	400b      	ands	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d00b      	beq.n	8001090 <HAL_GPIO_Init+0xa8>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	2b11      	cmp	r3, #17
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b12      	cmp	r3, #18
 800108e:	d130      	bne.n	80010f2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c6:	2201      	movs	r2, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	43da      	mvns	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	2201      	movs	r2, #1
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	055b      	lsls	r3, r3, #21
 800115e:	4013      	ands	r3, r2
 8001160:	d100      	bne.n	8001164 <HAL_GPIO_Init+0x17c>
 8001162:	e094      	b.n	800128e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	4b51      	ldr	r3, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 8001166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	589b      	ldr	r3, [r3, r2]
 800117c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	429a      	cmp	r2, r3
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x1de>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x1da>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x1d6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_GPIO_Init+0x2d4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x1d2>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011c6:	2300      	movs	r3, #0
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	2103      	movs	r1, #3
 80011cc:	400a      	ands	r2, r1
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	4013      	ands	r3, r2
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	035b      	lsls	r3, r3, #13
 8001252:	4013      	ands	r3, r2
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	039b      	lsls	r3, r3, #14
 800127c:	4013      	ands	r3, r2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	40da      	lsrs	r2, r3
 800129c:	1e13      	subs	r3, r2, #0
 800129e:	d000      	beq.n	80012a2 <HAL_GPIO_Init+0x2ba>
 80012a0:	e6ae      	b.n	8001000 <HAL_GPIO_Init+0x18>
  }
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b006      	add	sp, #24
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	50000400 	.word	0x50000400
 80012b8:	50000800 	.word	0x50000800
 80012bc:	50001c00 	.word	0x50001c00
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	000a      	movs	r2, r1
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	1cba      	adds	r2, r7, #2
 80012d8:	8812      	ldrh	r2, [r2, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	d004      	beq.n	80012e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012de:	230f      	movs	r3, #15
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012f0:	230f      	movs	r3, #15
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	781b      	ldrb	r3, [r3, #0]
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	0008      	movs	r0, r1
 8001308:	0011      	movs	r1, r2
 800130a:	1cbb      	adds	r3, r7, #2
 800130c:	1c02      	adds	r2, r0, #0
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	1c7b      	adds	r3, r7, #1
 8001312:	1c0a      	adds	r2, r1, #0
 8001314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001316:	1c7b      	adds	r3, r7, #1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	1cbb      	adds	r3, r7, #2
 8001320:	881a      	ldrh	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001326:	e003      	b.n	8001330 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	000a      	movs	r2, r1
 8001342:	1cbb      	adds	r3, r7, #2
 8001344:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	405a      	eors	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	615a      	str	r2, [r3, #20]
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	1dba      	adds	r2, r7, #6
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	4013      	ands	r3, r2
 8001372:	d008      	beq.n	8001386 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001376:	1dba      	adds	r2, r7, #6
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800137c:	1dbb      	adds	r3, r7, #6
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f002 f9d3 	bl	800372c <HAL_GPIO_EXTI_Callback>
  }
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e036      	b.n	8001414 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_IWDG_Init+0x88>)
 80013ac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_IWDG_Init+0x8c>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6852      	ldr	r2, [r2, #4]
 80013be:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6892      	ldr	r2, [r2, #8]
 80013c8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80013ca:	f7fe ff7f 	bl	80002cc <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80013d4:	f7fe ff7a 	bl	80002cc <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b30      	cmp	r3, #48	; 0x30
 80013e0:	d901      	bls.n	80013e6 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e016      	b.n	8001414 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f1      	bne.n	80013d4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d005      	beq.n	800140a <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68d2      	ldr	r2, [r2, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	e003      	b.n	8001412 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_IWDG_Init+0x90>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}
 800141c:	0000cccc 	.word	0x0000cccc
 8001420:	00005555 	.word	0x00005555
 8001424:	0000aaaa 	.word	0x0000aaaa

08001428 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IWDG_Refresh+0x1c>)
 8001436:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	0000aaaa 	.word	0x0000aaaa

08001448 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	000a      	movs	r2, r1
 8001452:	1cfb      	adds	r3, r7, #3
 8001454:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_PWR_EnterSLEEPMode+0x58>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2203      	movs	r2, #3
 8001464:	4393      	bics	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_PWR_EnterSLEEPMode+0x58>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_PWR_EnterSLEEPMode+0x5c>)
 800147c:	2104      	movs	r1, #4
 800147e:	438a      	bics	r2, r1
 8001480:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_PWR_EnterSLEEPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800148a:	bf30      	wfi
 800148c:	e002      	b.n	8001494 <HAL_PWR_EnterSLEEPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800148e:	bf40      	sev
  __ASM volatile ("wfe");
 8001490:	bf20      	wfe
 8001492:	bf20      	wfe
  __ASM volatile ("nop");
 8001494:	46c0      	nop			; (mov r8, r8)
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();

}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40007000 	.word	0x40007000
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PWR_PVD_IRQHandler+0x24>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	4013      	ands	r3, r2
 80014b6:	d005      	beq.n	80014c4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80014b8:	f000 f80a 	bl	80014d0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_PWR_PVD_IRQHandler+0x24>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	0252      	lsls	r2, r2, #9
 80014c2:	615a      	str	r2, [r3, #20]
  }
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f000 fb6a 	bl	8001bc4 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4bc7      	ldr	r3, [pc, #796]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	220c      	movs	r2, #12
 80014f6:	4013      	ands	r3, r2
 80014f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fa:	4bc5      	ldr	r3, [pc, #788]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x36>
 8001510:	e07d      	b.n	800160e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d007      	beq.n	8001528 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d112      	bne.n	8001544 <HAL_RCC_OscConfig+0x68>
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	429a      	cmp	r2, r3
 8001526:	d10d      	bne.n	8001544 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4bb9      	ldr	r3, [pc, #740]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x5a>
 8001534:	e06a      	b.n	800160c <HAL_RCC_OscConfig+0x130>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d166      	bne.n	800160c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f000 fb40 	bl	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x84>
 8001550:	4baf      	ldr	r3, [pc, #700]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4bae      	ldr	r3, [pc, #696]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e027      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	23a0      	movs	r3, #160	; 0xa0
 8001566:	02db      	lsls	r3, r3, #11
 8001568:	429a      	cmp	r2, r3
 800156a:	d10e      	bne.n	800158a <HAL_RCC_OscConfig+0xae>
 800156c:	4ba8      	ldr	r3, [pc, #672]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4ba7      	ldr	r3, [pc, #668]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	02c9      	lsls	r1, r1, #11
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	4ba5      	ldr	r3, [pc, #660]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4ba4      	ldr	r3, [pc, #656]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e012      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 800158a:	4ba1      	ldr	r3, [pc, #644]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4ba0      	ldr	r3, [pc, #640]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001590:	49a0      	ldr	r1, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x338>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4b9a      	ldr	r3, [pc, #616]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b99      	ldr	r3, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80015aa:	499b      	ldr	r1, [pc, #620]	; (8001818 <HAL_RCC_OscConfig+0x33c>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7fe fe88 	bl	80002cc <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c2:	f7fe fe83 	bl	80002cc <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2f7      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d4:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0xe6>
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7fe fe73 	bl	80002cc <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7fe fe6e 	bl	80002cc <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2e2      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015fe:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x110>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x13e>
 8001618:	e098      	b.n	800174c <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	2220      	movs	r2, #32
 8001624:	4013      	ands	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001628:	4b79      	ldr	r3, [pc, #484]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800162e:	2120      	movs	r1, #32
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	2220      	movs	r2, #32
 8001638:	4393      	bics	r3, r2
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d13d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e8>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800164e:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d004      	beq.n	8001662 <HAL_RCC_OscConfig+0x186>
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e2b0      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a6d      	ldr	r2, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x340>)
 8001668:	4013      	ands	r3, r2
 800166a:	0019      	movs	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2209      	movs	r2, #9
 800167e:	4393      	bics	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168a:	f000 fbcb 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 800168e:	0001      	movs	r1, r0
 8001690:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	220f      	movs	r2, #15
 8001698:	4013      	ands	r3, r2
 800169a:	4a61      	ldr	r2, [pc, #388]	; (8001820 <HAL_RCC_OscConfig+0x344>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	000a      	movs	r2, r1
 80016a0:	40da      	lsrs	r2, r3
 80016a2:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x348>)
 80016a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80016a6:	2513      	movs	r5, #19
 80016a8:	197c      	adds	r4, r7, r5
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7fe fdd8 	bl	8000260 <HAL_InitTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016b4:	197b      	adds	r3, r7, r5
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d047      	beq.n	800174c <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80016bc:	2313      	movs	r3, #19
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	e27f      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d027      	beq.n	800171a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2209      	movs	r2, #9
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7fe fdf6 	bl	80002cc <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7fe fdf1 	bl	80002cc <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e265      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2204      	movs	r2, #4
 80016fe:	4013      	ands	r3, r2
 8001700:	d0f1      	beq.n	80016e6 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a45      	ldr	r2, [pc, #276]	; (800181c <HAL_RCC_OscConfig+0x340>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	021a      	lsls	r2, r3, #8
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	e018      	b.n	800174c <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001720:	2101      	movs	r1, #1
 8001722:	438a      	bics	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7fe fdd1 	bl	80002cc <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7fe fdcc 	bl	80002cc <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e240      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d1f1      	bne.n	8001730 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2210      	movs	r2, #16
 8001752:	4013      	ands	r3, r2
 8001754:	d100      	bne.n	8001758 <HAL_RCC_OscConfig+0x27c>
 8001756:	e09e      	b.n	8001896 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d13f      	bne.n	80017de <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x29a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e226      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x34c>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	0a19      	lsrs	r1, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	061a      	lsls	r2, r3, #24
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	0b5b      	lsrs	r3, r3, #13
 80017a4:	3301      	adds	r3, #1
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	0212      	lsls	r2, r2, #8
 80017aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	210f      	movs	r1, #15
 80017b4:	400b      	ands	r3, r1
 80017b6:	491a      	ldr	r1, [pc, #104]	; (8001820 <HAL_RCC_OscConfig+0x344>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_OscConfig+0x348>)
 80017be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80017c0:	2513      	movs	r5, #19
 80017c2:	197c      	adds	r4, r7, r5
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7fe fd4b 	bl	8000260 <HAL_InitTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d05f      	beq.n	8001896 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 80017d6:	2313      	movs	r3, #19
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	e1f2      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d03d      	beq.n	8001862 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0049      	lsls	r1, r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7fe fd6a 	bl	80002cc <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017fc:	e016      	b.n	800182c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fe:	f7fe fd65 	bl	80002cc <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d90f      	bls.n	800182c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1d9      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
 8001810:	40021000 	.word	0x40021000
 8001814:	fffeffff 	.word	0xfffeffff
 8001818:	fffbffff 	.word	0xfffbffff
 800181c:	ffffe0ff 	.word	0xffffe0ff
 8001820:	08003ad8 	.word	0x08003ad8
 8001824:	20000004 	.word	0x20000004
 8001828:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800182c:	4bca      	ldr	r3, [pc, #808]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0e2      	beq.n	80017fe <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4bc7      	ldr	r3, [pc, #796]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4ac7      	ldr	r2, [pc, #796]	; (8001b5c <HAL_RCC_OscConfig+0x680>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	4bc4      	ldr	r3, [pc, #784]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184c:	4bc2      	ldr	r3, [pc, #776]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	0a19      	lsrs	r1, r3, #8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	061a      	lsls	r2, r3, #24
 800185a:	4bbf      	ldr	r3, [pc, #764]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e019      	b.n	8001896 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001862:	4bbd      	ldr	r3, [pc, #756]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4bbc      	ldr	r3, [pc, #752]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001868:	49bd      	ldr	r1, [pc, #756]	; (8001b60 <HAL_RCC_OscConfig+0x684>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe fd2d 	bl	80002cc <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7fe fd28 	bl	80002cc <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e19c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800188a:	4bb3      	ldr	r3, [pc, #716]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2208      	movs	r2, #8
 800189c:	4013      	ands	r3, r2
 800189e:	d036      	beq.n	800190e <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a8:	4bab      	ldr	r3, [pc, #684]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ac:	4baa      	ldr	r3, [pc, #680]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7fe fd0a 	bl	80002cc <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7fe fd05 	bl	80002cc <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e179      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d0:	4ba1      	ldr	r3, [pc, #644]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f1      	beq.n	80018be <HAL_RCC_OscConfig+0x3e2>
 80018da:	e018      	b.n	800190e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	4b9e      	ldr	r3, [pc, #632]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e0:	4b9d      	ldr	r3, [pc, #628]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7fe fcf0 	bl	80002cc <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7fe fceb 	bl	80002cc <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e15f      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001904:	4b94      	ldr	r3, [pc, #592]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f1      	bne.n	80018f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2204      	movs	r2, #4
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x43e>
 8001918:	e0af      	b.n	8001a7a <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191a:	2323      	movs	r3, #35	; 0x23
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	055b      	lsls	r3, r3, #21
 800192a:	4013      	ands	r3, r2
 800192c:	d10a      	bne.n	8001944 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	430a      	orrs	r2, r1
 800193a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800193c:	2323      	movs	r3, #35	; 0x23
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b87      	ldr	r3, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x688>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d11a      	bne.n	8001986 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001950:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x688>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_OscConfig+0x688>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0049      	lsls	r1, r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195e:	f7fe fcb5 	bl	80002cc <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001968:	f7fe fcb0 	bl	80002cc <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e124      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x688>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4013      	ands	r3, r2
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	429a      	cmp	r2, r3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4c6>
 8001992:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0049      	lsls	r1, r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	651a      	str	r2, [r3, #80]	; 0x50
 80019a0:	e031      	b.n	8001a06 <HAL_RCC_OscConfig+0x52a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4e8>
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	496b      	ldr	r1, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x684>)
 80019b2:	400a      	ands	r2, r1
 80019b4:	651a      	str	r2, [r3, #80]	; 0x50
 80019b6:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ba:	4b67      	ldr	r3, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019bc:	496a      	ldr	r1, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x68c>)
 80019be:	400a      	ands	r2, r1
 80019c0:	651a      	str	r2, [r3, #80]	; 0x50
 80019c2:	e020      	b.n	8001a06 <HAL_RCC_OscConfig+0x52a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	23a0      	movs	r3, #160	; 0xa0
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10e      	bne.n	80019ee <HAL_RCC_OscConfig+0x512>
 80019d0:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	00c9      	lsls	r1, r1, #3
 80019da:	430a      	orrs	r2, r1
 80019dc:	651a      	str	r2, [r3, #80]	; 0x50
 80019de:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0049      	lsls	r1, r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	651a      	str	r2, [r3, #80]	; 0x50
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x52a>
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019f4:	495a      	ldr	r1, [pc, #360]	; (8001b60 <HAL_RCC_OscConfig+0x684>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	651a      	str	r2, [r3, #80]	; 0x50
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	4959      	ldr	r1, [pc, #356]	; (8001b68 <HAL_RCC_OscConfig+0x68c>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe fc5d 	bl	80002cc <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a16:	e009      	b.n	8001a2c <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a18:	f7fe fc58 	bl	80002cc <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x690>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0cb      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d0ef      	beq.n	8001a18 <HAL_RCC_OscConfig+0x53c>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fc47 	bl	80002cc <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7fe fc42 	bl	80002cc <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <HAL_RCC_OscConfig+0x690>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0b5      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1ef      	bne.n	8001a44 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a64:	2323      	movs	r3, #35	; 0x23
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a74:	493e      	ldr	r1, [pc, #248]	; (8001b70 <HAL_RCC_OscConfig+0x694>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5a8>
 8001a82:	e09e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d100      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5b0>
 8001a8a:	e077      	b.n	8001b7c <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d145      	bne.n	8001b20 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x698>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7fe fc14 	bl	80002cc <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe fc0f 	bl	80002cc <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e083      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	049b      	lsls	r3, r3, #18
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x69c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0449      	lsls	r1, r1, #17
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe fbe9 	bl	80002cc <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7fe fbe4 	bl	80002cc <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e058      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x624>
 8001b1e:	e050      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001b26:	4913      	ldr	r1, [pc, #76]	; (8001b74 <HAL_RCC_OscConfig+0x698>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7fe fbce 	bl	80002cc <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b36:	f7fe fbc9 	bl	80002cc <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e03d      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	049b      	lsls	r3, r3, #18
 8001b50:	4013      	ands	r3, r2
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x65a>
 8001b54:	e035      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	ffff1fff 	.word	0xffff1fff
 8001b60:	fffffeff 	.word	0xfffffeff
 8001b64:	40007000 	.word	0x40007000
 8001b68:	fffffbff 	.word	0xfffffbff
 8001b6c:	00001388 	.word	0x00001388
 8001b70:	efffffff 	.word	0xefffffff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_RCC_OscConfig+0x6f0>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d10f      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	23f0      	movs	r3, #240	; 0xf0
 8001ba2:	039b      	lsls	r3, r3, #14
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	23c0      	movs	r3, #192	; 0xc0
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b00a      	add	sp, #40	; 0x28
 8001bca:	bdb0      	pop	{r4, r5, r7, pc}
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e10d      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d911      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b85      	ldr	r3, [pc, #532]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0f4      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	22f0      	movs	r2, #240	; 0xf0
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	4b77      	ldr	r3, [pc, #476]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d100      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x70>
 8001c3e:	e089      	b.n	8001d54 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	d120      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0d3      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	049b      	lsls	r3, r3, #18
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d114      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0c7      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c78:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0bc      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0b4      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001caa:	f7fe fb0f 	bl	80002cc <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d111      	bne.n	8001cde <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7fe fb06 	bl	80002cc <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e097      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d1ef      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xec>
 8001cdc:	e03a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d111      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce6:	e009      	b.n	8001cfc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7fe faf0 	bl	80002cc <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x240>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e081      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	220c      	movs	r2, #12
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d1ef      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x118>
 8001d08:	e024      	b.n	8001d54 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d11b      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d12:	e009      	b.n	8001d28 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7fe fada 	bl	80002cc <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <HAL_RCC_ClockConfig+0x240>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e06b      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d1ef      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x144>
 8001d34:	e00e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7fe fac9 	bl	80002cc <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <HAL_RCC_ClockConfig+0x240>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e05a      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	220c      	movs	r2, #12
 8001d50:	4013      	ands	r3, r2
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d211      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x238>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03c      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2208      	movs	r2, #8
 8001daa:	4013      	ands	r3, r2
 8001dac:	d00a      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_RCC_ClockConfig+0x248>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	00da      	lsls	r2, r3, #3
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc4:	f000 f82e 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001dc8:	0001      	movs	r1, r0
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_ClockConfig+0x23c>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_RCC_ClockConfig+0x24c>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	000a      	movs	r2, r1
 8001dda:	40da      	lsrs	r2, r3
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_ClockConfig+0x250>)
 8001dde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001de0:	250b      	movs	r5, #11
 8001de2:	197c      	adds	r4, r7, r5
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7fe fa3b 	bl	8000260 <HAL_InitTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dee:	197b      	adds	r3, r7, r5
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001df6:	230b      	movs	r3, #11
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	00001388 	.word	0x00001388
 8001e14:	fffff8ff 	.word	0xfffff8ff
 8001e18:	ffffc7ff 	.word	0xffffc7ff
 8001e1c:	08003ad8 	.word	0x08003ad8
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	220c      	movs	r2, #12
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d00e      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d00f      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d157      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2210      	movs	r2, #16
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d002      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e4c:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e50:	e05d      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e54:	613b      	str	r3, [r7, #16]
      break;
 8001e56:	e05a      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e5a:	613b      	str	r3, [r7, #16]
      break;
 8001e5c:	e057      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0c9b      	lsrs	r3, r3, #18
 8001e62:	220f      	movs	r2, #15
 8001e64:	4013      	ands	r3, r2
 8001e66:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0d9b      	lsrs	r3, r3, #22
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	3301      	adds	r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	4013      	ands	r3, r2
 8001e82:	d00f      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	000a      	movs	r2, r1
 8001e88:	0152      	lsls	r2, r2, #5
 8001e8a:	1a52      	subs	r2, r2, r1
 8001e8c:	0193      	lsls	r3, r2, #6
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	185b      	adds	r3, r3, r1
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7fe f935 	bl	8000108 <__udivsi3>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e023      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00f      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	000a      	movs	r2, r1
 8001eb2:	0152      	lsls	r2, r2, #5
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	0193      	lsls	r3, r2, #6
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	185b      	adds	r3, r3, r1
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe f920 	bl	8000108 <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00e      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	0152      	lsls	r2, r2, #5
 8001ed4:	1a52      	subs	r2, r2, r1
 8001ed6:	0193      	lsls	r3, r2, #6
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	185b      	adds	r3, r3, r1
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7fe f910 	bl	8000108 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
      break;
 8001ef0:	e00d      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0b5b      	lsrs	r3, r3, #13
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0212      	lsls	r2, r2, #8
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f0e:	693b      	ldr	r3, [r7, #16]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b006      	add	sp, #24
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	003d0900 	.word	0x003d0900
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200
 8001f28:	08003ae8 	.word	0x08003ae8

08001f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e01e      	b.n	8001f7c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2239      	movs	r2, #57	; 0x39
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2238      	movs	r2, #56	; 0x38
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f001 fc67 	bl	8003828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2239      	movs	r2, #57	; 0x39
 8001f5e:	2102      	movs	r1, #2
 8001f60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	f000 fbab 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2239      	movs	r2, #57	; 0x39
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01e      	b.n	8001fd4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2239      	movs	r2, #57	; 0x39
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2238      	movs	r2, #56	; 0x38
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f815 	bl	8001fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2239      	movs	r2, #57	; 0x39
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	f000 fb7f 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2239      	movs	r2, #57	; 0x39
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	1cbb      	adds	r3, r7, #2
 8001ffc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2239      	movs	r2, #57	; 0x39
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_Start_DMA+0x22>
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	e0cc      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2239      	movs	r2, #57	; 0x39
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10c      	bne.n	8002034 <HAL_TIM_PWM_Start_DMA+0x48>
  {
    if ((pData == NULL) && (Length > 0U))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_TIM_PWM_Start_DMA+0x40>
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_TIM_PWM_Start_DMA+0x40>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0bd      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2239      	movs	r2, #57	; 0x39
 8002030:	2102      	movs	r1, #2
 8002032:	5499      	strb	r1, [r3, r2]
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d02e      	beq.n	8002098 <HAL_TIM_PWM_Start_DMA+0xac>
 800203a:	d802      	bhi.n	8002042 <HAL_TIM_PWM_Start_DMA+0x56>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_TIM_PWM_Start_DMA+0x62>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 8002040:	e099      	b.n	8002176 <HAL_TIM_PWM_Start_DMA+0x18a>
  switch (Channel)
 8002042:	2b08      	cmp	r3, #8
 8002044:	d04d      	beq.n	80020e2 <HAL_TIM_PWM_Start_DMA+0xf6>
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d100      	bne.n	800204c <HAL_TIM_PWM_Start_DMA+0x60>
 800204a:	e06f      	b.n	800212c <HAL_TIM_PWM_Start_DMA+0x140>
      break;
 800204c:	e093      	b.n	8002176 <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a56      	ldr	r2, [pc, #344]	; (80021b4 <HAL_TIM_PWM_Start_DMA+0x1c8>)
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a18      	ldr	r0, [r3, #32]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3334      	adds	r3, #52	; 0x34
 8002072:	001a      	movs	r2, r3
 8002074:	1cbb      	adds	r3, r7, #2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f7fe fe2c 	bl	8000cd4 <HAL_DMA_Start_IT>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d001      	beq.n	8002084 <HAL_TIM_PWM_Start_DMA+0x98>
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e091      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0089      	lsls	r1, r1, #2
 8002092:	430a      	orrs	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
      break;
 8002096:	e06e      	b.n	8002176 <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <HAL_TIM_PWM_Start_DMA+0x1c8>)
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3338      	adds	r3, #56	; 0x38
 80020bc:	001a      	movs	r2, r3
 80020be:	1cbb      	adds	r3, r7, #2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f7fe fe07 	bl	8000cd4 <HAL_DMA_Start_IT>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <HAL_TIM_PWM_Start_DMA+0xe2>
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06c      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	00c9      	lsls	r1, r1, #3
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
      break;
 80020e0:	e049      	b.n	8002176 <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	4a32      	ldr	r2, [pc, #200]	; (80021b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_TIM_PWM_Start_DMA+0x1c8>)
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	333c      	adds	r3, #60	; 0x3c
 8002106:	001a      	movs	r2, r3
 8002108:	1cbb      	adds	r3, r7, #2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	f7fe fde2 	bl	8000cd4 <HAL_DMA_Start_IT>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d001      	beq.n	8002118 <HAL_TIM_PWM_Start_DMA+0x12c>
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e047      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0109      	lsls	r1, r1, #4
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
      break;
 800212a:	e024      	b.n	8002176 <HAL_TIM_PWM_Start_DMA+0x18a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_TIM_PWM_Start_DMA+0x1c8>)
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3340      	adds	r3, #64	; 0x40
 8002150:	001a      	movs	r2, r3
 8002152:	1cbb      	adds	r3, r7, #2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f7fe fdbd 	bl	8000cd4 <HAL_DMA_Start_IT>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <HAL_TIM_PWM_Start_DMA+0x176>
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e022      	b.n	80021a8 <HAL_TIM_PWM_Start_DMA+0x1bc>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0149      	lsls	r1, r1, #5
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
      break;
 8002174:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	2201      	movs	r2, #1
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fc94 	bl	8002aac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2207      	movs	r2, #7
 800218c:	4013      	ands	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d007      	beq.n	80021a6 <HAL_TIM_PWM_Start_DMA+0x1ba>
  {
    __HAL_TIM_ENABLE(htim);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	080025e3 	.word	0x080025e3
 80021b4:	08002655 	.word	0x08002655
 80021b8:	080025bd 	.word	0x080025bd

080021bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d016      	beq.n	80021fa <HAL_TIM_PWM_Stop_DMA+0x3e>
 80021cc:	d802      	bhi.n	80021d4 <HAL_TIM_PWM_Stop_DMA+0x18>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_TIM_PWM_Stop_DMA+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 80021d2:	e03c      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0x92>
  switch (Channel)
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d01e      	beq.n	8002216 <HAL_TIM_PWM_Stop_DMA+0x5a>
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d02a      	beq.n	8002232 <HAL_TIM_PWM_Stop_DMA+0x76>
      break;
 80021dc:	e037      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4928      	ldr	r1, [pc, #160]	; (800228c <HAL_TIM_PWM_Stop_DMA+0xd0>)
 80021ea:	400a      	ands	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fe fdd4 	bl	8000da0 <HAL_DMA_Abort_IT>
      break;
 80021f8:	e029      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_TIM_PWM_Stop_DMA+0xd4>)
 8002206:	400a      	ands	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fdc6 	bl	8000da0 <HAL_DMA_Abort_IT>
      break;
 8002214:	e01b      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	491c      	ldr	r1, [pc, #112]	; (8002294 <HAL_TIM_PWM_Stop_DMA+0xd8>)
 8002222:	400a      	ands	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	0018      	movs	r0, r3
 800222c:	f7fe fdb8 	bl	8000da0 <HAL_DMA_Abort_IT>
      break;
 8002230:	e00d      	b.n	800224e <HAL_TIM_PWM_Stop_DMA+0x92>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <HAL_TIM_PWM_Stop_DMA+0xdc>)
 800223e:	400a      	ands	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	0018      	movs	r0, r3
 8002248:	f7fe fdaa 	bl	8000da0 <HAL_DMA_Abort_IT>
      break;
 800224c:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	2200      	movs	r2, #0
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fc28 	bl	8002aac <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_TIM_PWM_Stop_DMA+0xe0>)
 8002264:	4013      	ands	r3, r2
 8002266:	d107      	bne.n	8002278 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2239      	movs	r2, #57	; 0x39
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	fffffdff 	.word	0xfffffdff
 8002290:	fffffbff 	.word	0xfffffbff
 8002294:	fffff7ff 	.word	0xfffff7ff
 8002298:	ffffefff 	.word	0xffffefff
 800229c:	00001111 	.word	0x00001111

080022a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2238      	movs	r2, #56	; 0x38
 80022b0:	5c9b      	ldrb	r3, [r3, r2]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0a4      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x164>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2238      	movs	r2, #56	; 0x38
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2239      	movs	r2, #57	; 0x39
 80022c6:	2102      	movs	r1, #2
 80022c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d029      	beq.n	8002324 <HAL_TIM_PWM_ConfigChannel+0x84>
 80022d0:	d802      	bhi.n	80022d8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80022d6:	e08c      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d046      	beq.n	800236a <HAL_TIM_PWM_ConfigChannel+0xca>
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d065      	beq.n	80023ac <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80022e0:	e087      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fa40 	bl	8002770 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2108      	movs	r1, #8
 80022fc:	430a      	orrs	r2, r1
 80022fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2104      	movs	r1, #4
 800230c:	438a      	bics	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6999      	ldr	r1, [r3, #24]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	619a      	str	r2, [r3, #24]
      break;
 8002322:	e066      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fa5b 	bl	80027e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0109      	lsls	r1, r1, #4
 8002340:	430a      	orrs	r2, r1
 8002342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	492f      	ldr	r1, [pc, #188]	; (800240c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002350:	400a      	ands	r2, r1
 8002352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6999      	ldr	r1, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	021a      	lsls	r2, r3, #8
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	619a      	str	r2, [r3, #24]
      break;
 8002368:	e043      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f000 fa7a 	bl	800286c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2108      	movs	r1, #8
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2104      	movs	r1, #4
 8002394:	438a      	bics	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69d9      	ldr	r1, [r3, #28]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	61da      	str	r2, [r3, #28]
      break;
 80023aa:	e022      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 fa99 	bl	80028ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0109      	lsls	r1, r1, #4
 80023c8:	430a      	orrs	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	490d      	ldr	r1, [pc, #52]	; (800240c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69d9      	ldr	r1, [r3, #28]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
      break;
 80023f0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2239      	movs	r2, #57	; 0x39
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2238      	movs	r2, #56	; 0x38
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	fffffbff 	.word	0xfffffbff

08002410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2238      	movs	r2, #56	; 0x38
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x18>
 8002424:	2302      	movs	r3, #2
 8002426:	e0ab      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x170>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2238      	movs	r2, #56	; 0x38
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2239      	movs	r2, #57	; 0x39
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2277      	movs	r2, #119	; 0x77
 8002444:	4393      	bics	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a4f      	ldr	r2, [pc, #316]	; (8002588 <HAL_TIM_ConfigClockSource+0x178>)
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d100      	bne.n	8002462 <HAL_TIM_ConfigClockSource+0x52>
 8002460:	e06b      	b.n	800253a <HAL_TIM_ConfigClockSource+0x12a>
 8002462:	d80e      	bhi.n	8002482 <HAL_TIM_ConfigClockSource+0x72>
 8002464:	2b10      	cmp	r3, #16
 8002466:	d100      	bne.n	800246a <HAL_TIM_ConfigClockSource+0x5a>
 8002468:	e077      	b.n	800255a <HAL_TIM_ConfigClockSource+0x14a>
 800246a:	d803      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x64>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d100      	bne.n	8002472 <HAL_TIM_ConfigClockSource+0x62>
 8002470:	e073      	b.n	800255a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002472:	e07c      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002474:	2b20      	cmp	r3, #32
 8002476:	d100      	bne.n	800247a <HAL_TIM_ConfigClockSource+0x6a>
 8002478:	e06f      	b.n	800255a <HAL_TIM_ConfigClockSource+0x14a>
 800247a:	2b30      	cmp	r3, #48	; 0x30
 800247c:	d100      	bne.n	8002480 <HAL_TIM_ConfigClockSource+0x70>
 800247e:	e06c      	b.n	800255a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002480:	e075      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002482:	2b70      	cmp	r3, #112	; 0x70
 8002484:	d00e      	beq.n	80024a4 <HAL_TIM_ConfigClockSource+0x94>
 8002486:	d804      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x82>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d036      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xea>
 800248c:	2b60      	cmp	r3, #96	; 0x60
 800248e:	d044      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002490:	e06d      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0152      	lsls	r2, r2, #5
 8002496:	4293      	cmp	r3, r2
 8002498:	d068      	beq.n	800256c <HAL_TIM_ConfigClockSource+0x15c>
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	0192      	lsls	r2, r2, #6
 800249e:	4293      	cmp	r3, r2
 80024a0:	d017      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80024a2:	e064      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f000 fada 	bl	8002a6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2277      	movs	r2, #119	; 0x77
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
      break;
 80024d0:	e04d      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f000 fac3 	bl	8002a6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	01c9      	lsls	r1, r1, #7
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
      break;
 80024f8:	e039      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	001a      	movs	r2, r3
 8002508:	f000 fa36 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2150      	movs	r1, #80	; 0x50
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fa90 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 8002518:	e029      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	001a      	movs	r2, r3
 8002528:	f000 fa54 	bl	80029d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2160      	movs	r1, #96	; 0x60
 8002532:	0018      	movs	r0, r3
 8002534:	f000 fa80 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 8002538:	e019      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	001a      	movs	r2, r3
 8002548:	f000 fa16 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fa70 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 8002558:	e009      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f000 fa67 	bl	8002a38 <TIM_ITRx_SetConfig>
      break;
 800256a:	e000      	b.n	800256e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800256c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2239      	movs	r2, #57	; 0x39
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2238      	movs	r2, #56	; 0x38
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b004      	add	sp, #16
 8002586:	bd80      	pop	{r7, pc}
 8002588:	ffff00ff 	.word	0xffff00ff

0800258c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2239      	movs	r2, #57	; 0x39
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff ffe9 	bl	80025ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b004      	add	sp, #16
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2239      	movs	r2, #57	; 0x39
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d103      	bne.n	800260a <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	761a      	strb	r2, [r3, #24]
 8002608:	e019      	b.n	800263e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d103      	bne.n	800261c <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2202      	movs	r2, #2
 8002618:	761a      	strb	r2, [r3, #24]
 800261a:	e010      	b.n	800263e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d103      	bne.n	800262e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2204      	movs	r2, #4
 800262a:	761a      	strb	r2, [r3, #24]
 800262c:	e007      	b.n	800263e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d102      	bne.n	800263e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2208      	movs	r2, #8
 800263c:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ffa3 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}

08002654 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2239      	movs	r2, #57	; 0x39
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d103      	bne.n	800267c <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	761a      	strb	r2, [r3, #24]
 800267a:	e019      	b.n	80026b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d103      	bne.n	800268e <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	761a      	strb	r2, [r3, #24]
 800268c:	e010      	b.n	80026b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	d103      	bne.n	80026a0 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2204      	movs	r2, #4
 800269c:	761a      	strb	r2, [r3, #24]
 800269e:	e007      	b.n	80026b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d102      	bne.n	80026b0 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2208      	movs	r2, #8
 80026ae:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7ff ff72 	bl	800259c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	761a      	strb	r2, [r3, #24]
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b004      	add	sp, #16
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	05db      	lsls	r3, r3, #23
 80026de:	429a      	cmp	r2, r3
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0x2a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <TIM_Base_SetConfig+0x9c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0x2a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <TIM_Base_SetConfig+0xa0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2270      	movs	r2, #112	; 0x70
 80026f6:	4393      	bics	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	429a      	cmp	r2, r3
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x56>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <TIM_Base_SetConfig+0x9c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x56>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <TIM_Base_SetConfig+0xa0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <TIM_Base_SetConfig+0xa4>)
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	4393      	bics	r3, r2
 8002736:	001a      	movs	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	615a      	str	r2, [r3, #20]
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40010800 	.word	0x40010800
 8002768:	40011400 	.word	0x40011400
 800276c:	fffffcff 	.word	0xfffffcff

08002770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2201      	movs	r2, #1
 8002780:	4393      	bics	r3, r2
 8002782:	001a      	movs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2270      	movs	r2, #112	; 0x70
 800279e:	4393      	bics	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2203      	movs	r2, #3
 80027a6:	4393      	bics	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4393      	bics	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b006      	add	sp, #24
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2210      	movs	r2, #16
 80027f8:	4393      	bics	r3, r2
 80027fa:	001a      	movs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a13      	ldr	r2, [pc, #76]	; (8002864 <TIM_OC2_SetConfig+0x7c>)
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <TIM_OC2_SetConfig+0x80>)
 800281e:	4013      	ands	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2220      	movs	r2, #32
 8002832:	4393      	bics	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	621a      	str	r2, [r3, #32]
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b006      	add	sp, #24
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffff8fff 	.word	0xffff8fff
 8002868:	fffffcff 	.word	0xfffffcff

0800286c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <TIM_OC3_SetConfig+0x78>)
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2270      	movs	r2, #112	; 0x70
 8002898:	4393      	bics	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2203      	movs	r2, #3
 80028a0:	4393      	bics	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <TIM_OC3_SetConfig+0x7c>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b006      	add	sp, #24
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	fffffeff 	.word	0xfffffeff
 80028e8:	fffffdff 	.word	0xfffffdff

080028ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <TIM_OC4_SetConfig+0x7c>)
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <TIM_OC4_SetConfig+0x80>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <TIM_OC4_SetConfig+0x84>)
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <TIM_OC4_SetConfig+0x88>)
 8002934:	4013      	ands	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b006      	add	sp, #24
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	ffffefff 	.word	0xffffefff
 800296c:	ffff8fff 	.word	0xffff8fff
 8002970:	fffffcff 	.word	0xfffffcff
 8002974:	ffffdfff 	.word	0xffffdfff

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2201      	movs	r2, #1
 8002990:	4393      	bics	r3, r2
 8002992:	001a      	movs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	22f0      	movs	r2, #240	; 0xf0
 80029a2:	4393      	bics	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	220a      	movs	r2, #10
 80029b4:	4393      	bics	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4393      	bics	r3, r2
 80029e8:	001a      	movs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <TIM_TI2_ConfigInputStage+0x60>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	22a0      	movs	r2, #160	; 0xa0
 8002a10:	4393      	bics	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b006      	add	sp, #24
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	ffff0fff 	.word	0xffff0fff

08002a38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2270      	movs	r2, #112	; 0x70
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	2207      	movs	r2, #7
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <TIM_ETR_SetConfig+0x3c>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	ffff00ff 	.word	0xffff00ff

08002aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	221f      	movs	r2, #31
 8002abc:	4013      	ands	r3, r2
 8002abe:	2201      	movs	r2, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	43d2      	mvns	r2, r2
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	211f      	movs	r1, #31
 8002adc:	400b      	ands	r3, r1
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4099      	lsls	r1, r3
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b006      	add	sp, #24
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2238      	movs	r2, #56	; 0x38
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e032      	b.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2238      	movs	r2, #56	; 0x38
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2239      	movs	r2, #57	; 0x39
 8002b16:	2102      	movs	r1, #2
 8002b18:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2270      	movs	r2, #112	; 0x70
 8002b2e:	4393      	bics	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	4393      	bics	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2239      	movs	r2, #57	; 0x39
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2238      	movs	r2, #56	; 0x38
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <set_uv_led>:
	ON = 1,
	TOGGLE = 2,
}typedefEnum;

void set_uv_led(typedefEnum state)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	0002      	movs	r2, r0
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002b84:	1dfb      	adds	r3, r7, #7
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <set_uv_led+0x1a>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d008      	beq.n	8002ba2 <set_uv_led+0x2a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002b90:	e00f      	b.n	8002bb2 <set_uv_led+0x3a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_RESET);
 8002b92:	23a0      	movs	r3, #160	; 0xa0
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	2200      	movs	r2, #0
 8002b98:	2110      	movs	r1, #16
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fe fbaf 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002ba0:	e007      	b.n	8002bb2 <set_uv_led+0x3a>
		HAL_GPIO_WritePin(LED_UV_GPIO_Port, LED_UV_Pin, GPIO_PIN_SET);
 8002ba2:	23a0      	movs	r3, #160	; 0xa0
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2110      	movs	r1, #16
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fe fba7 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002bb0:	46c0      	nop			; (mov r8, r8)
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <set_uv_boost>:
void set_uv_boost(typedefEnum state)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <set_uv_boost+0x1a>
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d008      	beq.n	8002be4 <set_uv_boost+0x2a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002bd2:	e00f      	b.n	8002bf4 <set_uv_boost+0x3a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_RESET);
 8002bd4:	23a0      	movs	r3, #160	; 0xa0
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe fb8e 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002be2:	e007      	b.n	8002bf4 <set_uv_boost+0x3a>
		HAL_GPIO_WritePin(BOOST_EN_UV_GPIO_Port, BOOST_EN_UV_Pin, GPIO_PIN_SET);
 8002be4:	23a0      	movs	r3, #160	; 0xa0
 8002be6:	05db      	lsls	r3, r3, #23
 8002be8:	2201      	movs	r2, #1
 8002bea:	2140      	movs	r1, #64	; 0x40
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7fe fb86 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002bf2:	46c0      	nop			; (mov r8, r8)
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <set_neopixel_led>:
void set_neopixel_led(typedefEnum state)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	0002      	movs	r2, r0
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <set_neopixel_led+0x1a>
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d009      	beq.n	8002c28 <set_neopixel_led+0x2c>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002c14:	e011      	b.n	8002c3a <set_neopixel_led+0x3e>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_RESET);
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	0099      	lsls	r1, r3, #2
 8002c1a:	23a0      	movs	r3, #160	; 0xa0
 8002c1c:	05db      	lsls	r3, r3, #23
 8002c1e:	2200      	movs	r2, #0
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fe fb6c 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002c26:	e008      	b.n	8002c3a <set_neopixel_led+0x3e>
		HAL_GPIO_WritePin(LED_NEOPIXEL_GPIO_Port, LED_NEOPIXEL_Pin, GPIO_PIN_SET);
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	05db      	lsls	r3, r3, #23
 8002c30:	2201      	movs	r2, #1
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fe fb63 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002c38:	46c0      	nop			; (mov r8, r8)
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b002      	add	sp, #8
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <set_neopixel_boost>:
void set_neopixel_boost(typedefEnum state)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	0002      	movs	r2, r0
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <set_neopixel_boost+0x1a>
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d009      	beq.n	8002c6e <set_neopixel_boost+0x2c>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_SET);
		break;
	}
	case TOGGLE:
	{}}
}
 8002c5a:	e011      	b.n	8002c80 <set_neopixel_boost+0x3e>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_RESET);
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	00d9      	lsls	r1, r3, #3
 8002c60:	23a0      	movs	r3, #160	; 0xa0
 8002c62:	05db      	lsls	r3, r3, #23
 8002c64:	2200      	movs	r2, #0
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fe fb49 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002c6c:	e008      	b.n	8002c80 <set_neopixel_boost+0x3e>
		HAL_GPIO_WritePin(BOOST_EN_NEOPIXEL_GPIO_Port, BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_SET);
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	00d9      	lsls	r1, r3, #3
 8002c72:	23a0      	movs	r3, #160	; 0xa0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	2201      	movs	r2, #1
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fe fb40 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002c7e:	46c0      	nop			; (mov r8, r8)
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <set_charging_led>:
void set_charging_led(typedefEnum state)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	0002      	movs	r2, r0
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d00b      	beq.n	8002cb4 <set_charging_led+0x2c>
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d010      	beq.n	8002cc2 <set_charging_led+0x3a>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d000      	beq.n	8002ca6 <set_charging_led+0x1e>
	case TOGGLE:
	{
		HAL_GPIO_TogglePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin);
	}
	}
}
 8002ca4:	e013      	b.n	8002cce <set_charging_led+0x46>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <set_charging_led+0x50>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2102      	movs	r1, #2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe fb26 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002cb2:	e00c      	b.n	8002cce <set_charging_led+0x46>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_SET);
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <set_charging_led+0x50>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2102      	movs	r1, #2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7fe fb1f 	bl	80012fe <HAL_GPIO_WritePin>
		break;
 8002cc0:	e005      	b.n	8002cce <set_charging_led+0x46>
		HAL_GPIO_TogglePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin);
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <set_charging_led+0x50>)
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fe fb36 	bl	8001338 <HAL_GPIO_TogglePin>
}
 8002ccc:	e7ff      	b.n	8002cce <set_charging_led+0x46>
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	50000400 	.word	0x50000400

08002cdc <neopixel_init>:
uint8_t led_buf[70+24];
#endif
extern TIM_HandleTypeDef htim2;

void neopixel_init(int cnt)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
//	led_buf = (uint8_t*)malloc(sizeof(uint8_t)*32*cnt+70);
	for(int i = 0; i < 70; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e007      	b.n	8002cfa <neopixel_init+0x1e>
		led_buf[i] = 40;
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <neopixel_init+0x2c>)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	18d3      	adds	r3, r2, r3
 8002cf0:	2228      	movs	r2, #40	; 0x28
 8002cf2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 70; i++)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b45      	cmp	r3, #69	; 0x45
 8002cfe:	ddf4      	ble.n	8002cea <neopixel_init+0xe>

}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000154 	.word	0x20000154

08002d0c <neopixel_pause>:
void neopixel_pause(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <neopixel_pause+0x14>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fa51 	bl	80021bc <HAL_TIM_PWM_Stop_DMA>
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200000bc 	.word	0x200000bc

08002d24 <neopixel_begin>:
void neopixel_begin(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)led_buf, sizeof(led_buf));
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <neopixel_begin+0x18>)
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <neopixel_begin+0x1c>)
 8002d2c:	2366      	movs	r3, #102	; 0x66
 8002d2e:	2104      	movs	r1, #4
 8002d30:	f7ff f95c 	bl	8001fec <HAL_TIM_PWM_Start_DMA>
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	20000154 	.word	0x20000154
 8002d40:	200000bc 	.word	0x200000bc

08002d44 <neopixel_SetColor>:
void neopixel_SetColor(uint32_t cnt, uint8_t red, uint8_t green, uint8_t blue, uint8_t white)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	000c      	movs	r4, r1
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	1cfb      	adds	r3, r7, #3
 8002d54:	1c22      	adds	r2, r4, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	1c02      	adds	r2, r0, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	1c7b      	adds	r3, r7, #1
 8002d60:	1c0a      	adds	r2, r1, #0
 8002d62:	701a      	strb	r2, [r3, #0]
	uint32_t cnt_ = cnt - 1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 8; i ++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e087      	b.n	8002e80 <neopixel_SetColor+0x13c>
	{

#ifdef NEOPIXEL_6061
		uint16_t index_red 		= 69+32*cnt_+8-i;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	015b      	lsls	r3, r3, #5
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	230e      	movs	r3, #14
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	324d      	adds	r2, #77	; 0x4d
 8002d86:	801a      	strh	r2, [r3, #0]
		uint16_t index_green 	= 69+32*cnt_+16-i;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	015b      	lsls	r3, r3, #5
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	230c      	movs	r3, #12
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	3255      	adds	r2, #85	; 0x55
 8002d9e:	801a      	strh	r2, [r3, #0]
		uint16_t index_blue 	= 69+32*cnt_+24-i;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	015b      	lsls	r3, r3, #5
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	230a      	movs	r3, #10
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	325d      	adds	r2, #93	; 0x5d
 8002db6:	801a      	strh	r2, [r3, #0]
		uint16_t index_white 	= 69+32*cnt_+32-i;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	015b      	lsls	r3, r3, #5
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	2308      	movs	r3, #8
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	3265      	adds	r2, #101	; 0x65
 8002dce:	801a      	strh	r2, [r3, #0]
		if(green >> i & 0x01)
 8002dd0:	1cbb      	adds	r3, r7, #2
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	411a      	asrs	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d006      	beq.n	8002dee <neopixel_SetColor+0xaa>
			led_buf[index_red] = BIT_HIGH;
 8002de0:	230e      	movs	r3, #14
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002de8:	210b      	movs	r1, #11
 8002dea:	54d1      	strb	r1, [r2, r3]
 8002dec:	e005      	b.n	8002dfa <neopixel_SetColor+0xb6>
		else
			led_buf[index_red] = BIT_LOW;
 8002dee:	230e      	movs	r3, #14
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002df6:	211e      	movs	r1, #30
 8002df8:	54d1      	strb	r1, [r2, r3]
		if(red >> i & 0x01)
 8002dfa:	1cfb      	adds	r3, r7, #3
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	411a      	asrs	r2, r3
 8002e02:	0013      	movs	r3, r2
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d006      	beq.n	8002e18 <neopixel_SetColor+0xd4>
			led_buf[index_green] = BIT_HIGH;
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e12:	210b      	movs	r1, #11
 8002e14:	54d1      	strb	r1, [r2, r3]
 8002e16:	e005      	b.n	8002e24 <neopixel_SetColor+0xe0>
		else
			led_buf[index_green] = BIT_LOW;
 8002e18:	230c      	movs	r3, #12
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e20:	211e      	movs	r1, #30
 8002e22:	54d1      	strb	r1, [r2, r3]
		if(blue >> i & 0x01)
 8002e24:	1c7b      	adds	r3, r7, #1
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	411a      	asrs	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d006      	beq.n	8002e42 <neopixel_SetColor+0xfe>
			led_buf[index_blue] = BIT_HIGH;
 8002e34:	230a      	movs	r3, #10
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e3c:	210b      	movs	r1, #11
 8002e3e:	54d1      	strb	r1, [r2, r3]
 8002e40:	e005      	b.n	8002e4e <neopixel_SetColor+0x10a>
		else
			led_buf[index_blue] = BIT_LOW;
 8002e42:	230a      	movs	r3, #10
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e4a:	211e      	movs	r1, #30
 8002e4c:	54d1      	strb	r1, [r2, r3]
		if(white >> i & 0x01)
 8002e4e:	2328      	movs	r3, #40	; 0x28
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	411a      	asrs	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d006      	beq.n	8002e6e <neopixel_SetColor+0x12a>
			led_buf[index_white] = BIT_HIGH;
 8002e60:	2308      	movs	r3, #8
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e68:	210b      	movs	r1, #11
 8002e6a:	54d1      	strb	r1, [r2, r3]
 8002e6c:	e005      	b.n	8002e7a <neopixel_SetColor+0x136>
		else
			led_buf[index_white] = BIT_LOW;
 8002e6e:	2308      	movs	r3, #8
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <neopixel_SetColor+0x14c>)
 8002e76:	211e      	movs	r1, #30
 8002e78:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i ++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b07      	cmp	r3, #7
 8002e84:	dc00      	bgt.n	8002e88 <neopixel_SetColor+0x144>
 8002e86:	e773      	b.n	8002d70 <neopixel_SetColor+0x2c>
		else
			led_buf[index_blue] = BIT_LOW;
#endif

	}
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b007      	add	sp, #28
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	20000154 	.word	0x20000154

08002e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e9a:	f7fd f9c1 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e9e:	f000 fa4b 	bl	8003338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea2:	f000 fbc9 	bl	8003638 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ea6:	f000 fba9 	bl	80035fc <MX_DMA_Init>
  MX_TIM2_Init();
 8002eaa:	f000 fb29 	bl	8003500 <MX_TIM2_Init>
  MX_ADC_Init();
 8002eae:	f000 faa1 	bl	80033f4 <MX_ADC_Init>
  MX_IWDG_Init();
 8002eb2:	f000 fb05 	bl	80034c0 <MX_IWDG_Init>


  /*
   * if IWDG?
   * */
  if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == SET)
 8002eb6:	4bcb      	ldr	r3, [pc, #812]	; (80031e4 <main+0x350>)
 8002eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	059b      	lsls	r3, r3, #22
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d00a      	beq.n	8002ed8 <main+0x44>
  {

	  set_charging_led(ON);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7ff fee0 	bl	8002c88 <set_charging_led>
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002ec8:	4bc6      	ldr	r3, [pc, #792]	; (80031e4 <main+0x350>)
 8002eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ecc:	4bc5      	ldr	r3, [pc, #788]	; (80031e4 <main+0x350>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0409      	lsls	r1, r1, #16
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed6:	e002      	b.n	8002ede <main+0x4a>
  }
  else
  {
	  set_charging_led(OFF);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7ff fed5 	bl	8002c88 <set_charging_led>
  }

  HAL_Delay(1000);
 8002ede:	23fa      	movs	r3, #250	; 0xfa
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7fd f9fc 	bl	80002e0 <HAL_Delay>


  HAL_ADC_Start(&hadc);
 8002ee8:	4bbf      	ldr	r3, [pc, #764]	; (80031e8 <main+0x354>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7fd fba6 	bl	800063c <HAL_ADC_Start>


  set_charging_led(OFF);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7ff fec9 	bl	8002c88 <set_charging_led>
  set_neopixel_led(OFF);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7ff fe80 	bl	8002bfc <set_neopixel_led>
  set_uv_led(OFF);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff fe3b 	bl	8002b78 <set_uv_led>
  set_neopixel_boost(OFF);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff fe9d 	bl	8002c42 <set_neopixel_boost>
  set_uv_boost(OFF);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7ff fe56 	bl	8002bba <set_uv_boost>


  neopixel_init(1);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff fee4 	bl	8002cdc <neopixel_init>
  neopixel_begin();
 8002f14:	f7ff ff06 	bl	8002d24 <neopixel_begin>
    /* USER CODE BEGIN 3 */




	  HAL_IWDG_Refresh(&hiwdg);
 8002f18:	4bb4      	ldr	r3, [pc, #720]	; (80031ec <main+0x358>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fe fa84 	bl	8001428 <HAL_IWDG_Refresh>
	  isCharging = HAL_GPIO_ReadPin(CHARGE_GPIO_Port, CHARGE_Pin);
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7fe f9cc 	bl	80012c4 <HAL_GPIO_ReadPin>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	001a      	movs	r2, r3
 8002f30:	4baf      	ldr	r3, [pc, #700]	; (80031f0 <main+0x35c>)
 8002f32:	701a      	strb	r2, [r3, #0]

	  /*
	   * getAdcValue
	   *
	   * */
	  nowBatTick = HAL_GetTick();
 8002f34:	f7fd f9ca 	bl	80002cc <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	4bae      	ldr	r3, [pc, #696]	; (80031f4 <main+0x360>)
 8002f3c:	601a      	str	r2, [r3, #0]
	  if(nowBatTick - pastBatTick > 100)
 8002f3e:	4bad      	ldr	r3, [pc, #692]	; (80031f4 <main+0x360>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4bad      	ldr	r3, [pc, #692]	; (80031f8 <main+0x364>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d911      	bls.n	8002f70 <main+0xdc>
	  {
		  HAL_ADC_PollForConversion(&hadc, 0xFFFF);
 8002f4c:	4aab      	ldr	r2, [pc, #684]	; (80031fc <main+0x368>)
 8002f4e:	4ba6      	ldr	r3, [pc, #664]	; (80031e8 <main+0x354>)
 8002f50:	0011      	movs	r1, r2
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7fd fbc6 	bl	80006e4 <HAL_ADC_PollForConversion>
		  adcValue = HAL_ADC_GetValue(&hadc);
 8002f58:	4ba3      	ldr	r3, [pc, #652]	; (80031e8 <main+0x354>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd fc58 	bl	8000810 <HAL_ADC_GetValue>
 8002f60:	0003      	movs	r3, r0
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4ba6      	ldr	r3, [pc, #664]	; (8003200 <main+0x36c>)
 8002f66:	801a      	strh	r2, [r3, #0]
//		  adc_A = (float)(adcValue - 3368) * 0.1953;
//		  adc_B = adc_A;
		  pastBatTick = nowBatTick;
 8002f68:	4ba2      	ldr	r3, [pc, #648]	; (80031f4 <main+0x360>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4ba2      	ldr	r3, [pc, #648]	; (80031f8 <main+0x364>)
 8002f6e:	601a      	str	r2, [r3, #0]
	  }
	  if(isCharging)
 8002f70:	4b9f      	ldr	r3, [pc, #636]	; (80031f0 <main+0x35c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <main+0x104>
	  {
		  if(adcValue > BAT_MAX_ADC)
 8002f78:	4ba1      	ldr	r3, [pc, #644]	; (8003200 <main+0x36c>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	4aa1      	ldr	r2, [pc, #644]	; (8003204 <main+0x370>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d903      	bls.n	8002f8a <main+0xf6>
			  set_charging_led(OFF);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fe80 	bl	8002c88 <set_charging_led>
 8002f88:	e002      	b.n	8002f90 <main+0xfc>
		  else
			  set_charging_led(ON);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7ff fe7c 	bl	8002c88 <set_charging_led>

		  isLowBat = 0;
 8002f90:	4b9d      	ldr	r3, [pc, #628]	; (8003208 <main+0x374>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e01c      	b.n	8002fd2 <main+0x13e>
	  }
	  else
	  {
		  if(adcValue < BAT_MIN_ADC)
 8002f98:	4b99      	ldr	r3, [pc, #612]	; (8003200 <main+0x36c>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	4a9b      	ldr	r2, [pc, #620]	; (800320c <main+0x378>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d817      	bhi.n	8002fd2 <main+0x13e>
		  {
			  for(uint8_t i = 0; i < 6; i ++)
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e00c      	b.n	8002fc4 <main+0x130>
			  {
				  set_charging_led(TOGGLE);
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7ff fe6c 	bl	8002c88 <set_charging_led>
				  HAL_Delay(500);
 8002fb0:	23fa      	movs	r3, #250	; 0xfa
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd f993 	bl	80002e0 <HAL_Delay>
			  for(uint8_t i = 0; i < 6; i ++)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	1dfb      	adds	r3, r7, #7
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d9ee      	bls.n	8002faa <main+0x116>
			  }
			  isLowBat = 1;
 8002fcc:	4b8e      	ldr	r3, [pc, #568]	; (8003208 <main+0x374>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  nowLedTick = HAL_GetTick();
 8002fd2:	f7fd f97b 	bl	80002cc <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <main+0x37c>)
 8002fda:	601a      	str	r2, [r3, #0]
	  if(nowLedTick - pastLedTick > 300)
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	; (8003210 <main+0x37c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b8c      	ldr	r3, [pc, #560]	; (8003214 <main+0x380>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	2396      	movs	r3, #150	; 0x96
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d96c      	bls.n	80030c8 <main+0x234>
	  {
		  if(isMoodLighting)
 8002fee:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <main+0x384>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02e      	beq.n	8003054 <main+0x1c0>
		  {
			  set_neopixel_boost(ON);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7ff fe23 	bl	8002c42 <set_neopixel_boost>
			  set_neopixel_led(ON);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff fdfd 	bl	8002bfc <set_neopixel_led>
			  neopixel_pause();
 8003002:	f7ff fe83 	bl	8002d0c <neopixel_pause>
			  neopixel_SetColor(1, red_+=2, green_+=3, blue_+=6, white_++);
 8003006:	4b85      	ldr	r3, [pc, #532]	; (800321c <main+0x388>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	3302      	adds	r3, #2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b83      	ldr	r3, [pc, #524]	; (800321c <main+0x388>)
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <main+0x388>)
 8003014:	7819      	ldrb	r1, [r3, #0]
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <main+0x38c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3303      	adds	r3, #3
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b80      	ldr	r3, [pc, #512]	; (8003220 <main+0x38c>)
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <main+0x38c>)
 8003024:	7818      	ldrb	r0, [r3, #0]
 8003026:	4b7f      	ldr	r3, [pc, #508]	; (8003224 <main+0x390>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3306      	adds	r3, #6
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <main+0x390>)
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	4b7c      	ldr	r3, [pc, #496]	; (8003224 <main+0x390>)
 8003034:	781c      	ldrb	r4, [r3, #0]
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <main+0x394>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	b2d5      	uxtb	r5, r2
 800303e:	4a7a      	ldr	r2, [pc, #488]	; (8003228 <main+0x394>)
 8003040:	7015      	strb	r5, [r2, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	0023      	movs	r3, r4
 8003046:	0002      	movs	r2, r0
 8003048:	2001      	movs	r0, #1
 800304a:	f7ff fe7b 	bl	8002d44 <neopixel_SetColor>
			  neopixel_begin();
 800304e:	f7ff fe69 	bl	8002d24 <neopixel_begin>
 8003052:	e024      	b.n	800309e <main+0x20a>
		  }
		  else if(isUVLighting)
 8003054:	4b75      	ldr	r3, [pc, #468]	; (800322c <main+0x398>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <main+0x1ee>
		  {
			  set_neopixel_boost(ON);
 800305c:	2001      	movs	r0, #1
 800305e:	f7ff fdf0 	bl	8002c42 <set_neopixel_boost>
			  set_neopixel_led(ON);
 8003062:	2001      	movs	r0, #1
 8003064:	f7ff fdca 	bl	8002bfc <set_neopixel_led>
			  neopixel_pause();
 8003068:	f7ff fe50 	bl	8002d0c <neopixel_pause>
			  neopixel_SetColor(1, 0, 0, 255, 1);
 800306c:	2301      	movs	r3, #1
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	23ff      	movs	r3, #255	; 0xff
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2001      	movs	r0, #1
 8003078:	f7ff fe64 	bl	8002d44 <neopixel_SetColor>
			  neopixel_begin();
 800307c:	f7ff fe52 	bl	8002d24 <neopixel_begin>
 8003080:	e00d      	b.n	800309e <main+0x20a>
		  }
		  else
		  {
			  set_neopixel_boost(OFF);
 8003082:	2000      	movs	r0, #0
 8003084:	f7ff fddd 	bl	8002c42 <set_neopixel_boost>
			  set_neopixel_led(OFF);
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff fdb7 	bl	8002bfc <set_neopixel_led>
			  neopixel_SetColor(1, 0, 0, 0, 0);
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2001      	movs	r0, #1
 800309a:	f7ff fe53 	bl	8002d44 <neopixel_SetColor>
		  }

		  if(isUVLighting)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <main+0x398>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <main+0x220>
		  {
			  set_uv_boost(ON);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7ff fd87 	bl	8002bba <set_uv_boost>
			  set_uv_led(ON);
 80030ac:	2001      	movs	r0, #1
 80030ae:	f7ff fd63 	bl	8002b78 <set_uv_led>
 80030b2:	e005      	b.n	80030c0 <main+0x22c>
		  }
		  else
		  {
			  set_uv_boost(OFF);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff fd80 	bl	8002bba <set_uv_boost>
			  set_uv_led(OFF);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7ff fd5c 	bl	8002b78 <set_uv_led>
		  }


		  pastLedTick = nowLedTick;
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <main+0x37c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <main+0x380>)
 80030c6:	601a      	str	r2, [r3, #0]
	  }



	  nowTick = HAL_GetTick();
 80030c8:	f7fd f900 	bl	80002cc <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	4b58      	ldr	r3, [pc, #352]	; (8003230 <main+0x39c>)
 80030d0:	601a      	str	r2, [r3, #0]
	  if(isSwitch)
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <main+0x3a0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d015      	beq.n	8003106 <main+0x272>
	  {
		  if(nowTick - pastTick > 800)
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <main+0x39c>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <main+0x3a4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1ad2      	subs	r2, r2, r3
 80030e4:	23c8      	movs	r3, #200	; 0xc8
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d90c      	bls.n	8003106 <main+0x272>
		  {
			  clickCount++;
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <main+0x3a8>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <main+0x3a8>)
 80030f6:	701a      	strb	r2, [r3, #0]
			  isSwitch = 0;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <main+0x3a0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
			  pastTick = nowTick;
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <main+0x39c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <main+0x3a4>)
 8003104:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(nowTick - pastTick > 1000)
 8003106:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <main+0x39c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <main+0x3a4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	23fa      	movs	r3, #250	; 0xfa
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d800      	bhi.n	800311a <main+0x286>
 8003118:	e0aa      	b.n	8003270 <main+0x3dc>
	  {
		  getCount = clickCount;
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <main+0x3a8>)
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <main+0x3ac>)
 8003120:	701a      	strb	r2, [r3, #0]
		  if(getCount != pastCount)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <main+0x3ac>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <main+0x3b0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d005      	beq.n	800313a <main+0x2a6>
		  {
			  step++;
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <main+0x3b4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <main+0x3b4>)
 8003138:	701a      	strb	r2, [r3, #0]
		  }
		  switch(step)
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <main+0x3b4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d02c      	beq.n	800319c <main+0x308>
 8003142:	2b03      	cmp	r3, #3
 8003144:	d034      	beq.n	80031b0 <main+0x31c>
 8003146:	2b01      	cmp	r3, #1
 8003148:	d13f      	bne.n	80031ca <main+0x336>
		  {
		  case 1:
			  if(!isUVLighting)
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <main+0x398>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <main+0x2d2>
			  {
				  nowUvCountTick = HAL_GetTick();
 8003152:	f7fd f8bb 	bl	80002cc <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	4b3c      	ldr	r3, [pc, #240]	; (800324c <main+0x3b8>)
 800315a:	601a      	str	r2, [r3, #0]
				  pastUvCountTick = nowUvCountTick;
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <main+0x3b8>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <main+0x3bc>)
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	e004      	b.n	8003170 <main+0x2dc>
			  }
			  else
			  {
				  nowUvCountTick = HAL_GetTick();
 8003166:	f7fd f8b1 	bl	80002cc <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	4b37      	ldr	r3, [pc, #220]	; (800324c <main+0x3b8>)
 800316e:	601a      	str	r2, [r3, #0]
			  }
			  isRunning = 1;
 8003170:	4b38      	ldr	r3, [pc, #224]	; (8003254 <main+0x3c0>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 8003176:	4b28      	ldr	r3, [pc, #160]	; (8003218 <main+0x384>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 1;
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <main+0x398>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
			  /*
			   * count timing
			   * */

			  if(nowUvCountTick - pastUvCountTick > 8000)
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <main+0x3b8>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b32      	ldr	r3, [pc, #200]	; (8003250 <main+0x3bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	23fa      	movs	r3, #250	; 0xfa
 800318e:	015b      	lsls	r3, r3, #5
 8003190:	429a      	cmp	r2, r3
 8003192:	d961      	bls.n	8003258 <main+0x3c4>
			  {
				  step = 3;
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <main+0x3b4>)
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800319a:	e05d      	b.n	8003258 <main+0x3c4>
		  case 2:
			  isRunning = 1;
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <main+0x3c0>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 1;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <main+0x384>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <main+0x398>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
			  break;
 80031ae:	e054      	b.n	800325a <main+0x3c6>
		  case 3:
			  isRunning = 0;
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <main+0x3c0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <main+0x384>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <main+0x398>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
			  step = 0;
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <main+0x3b4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
			  break;
 80031c8:	e047      	b.n	800325a <main+0x3c6>
		  default:
			  isRunning = 0;
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <main+0x3c0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
			  isMoodLighting = 0;
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <main+0x384>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
			  isUVLighting = 0;
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <main+0x398>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
			  step = 0;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <main+0x3b4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
			  break;
 80031e2:	e03a      	b.n	800325a <main+0x3c6>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	200000f8 	.word	0x200000f8
 80031ec:	20000060 	.word	0x20000060
 80031f0:	20000025 	.word	0x20000025
 80031f4:	20000040 	.word	0x20000040
 80031f8:	20000044 	.word	0x20000044
 80031fc:	0000ffff 	.word	0x0000ffff
 8003200:	20000058 	.word	0x20000058
 8003204:	00000f37 	.word	0x00000f37
 8003208:	20000026 	.word	0x20000026
 800320c:	00000d26 	.word	0x00000d26
 8003210:	20000038 	.word	0x20000038
 8003214:	2000003c 	.word	0x2000003c
 8003218:	20000028 	.word	0x20000028
 800321c:	2000005a 	.word	0x2000005a
 8003220:	20000000 	.word	0x20000000
 8003224:	20000001 	.word	0x20000001
 8003228:	20000002 	.word	0x20000002
 800322c:	20000029 	.word	0x20000029
 8003230:	20000030 	.word	0x20000030
 8003234:	20000024 	.word	0x20000024
 8003238:	20000034 	.word	0x20000034
 800323c:	2000002a 	.word	0x2000002a
 8003240:	2000002b 	.word	0x2000002b
 8003244:	2000002c 	.word	0x2000002c
 8003248:	200000b8 	.word	0x200000b8
 800324c:	20000050 	.word	0x20000050
 8003250:	20000054 	.word	0x20000054
 8003254:	20000027 	.word	0x20000027
			  break;
 8003258:	46c0      	nop			; (mov r8, r8)
		  }
		  isSwitch = 0;
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <main+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
		  pastCount = getCount;
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <main+0x47c>)
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <main+0x480>)
 8003266:	701a      	strb	r2, [r3, #0]
		  pastTick = nowTick;
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <main+0x484>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <main+0x488>)
 800326e:	601a      	str	r2, [r3, #0]
	  }


	  nowSleepTick = HAL_GetTick();
 8003270:	f7fd f82c 	bl	80002cc <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <main+0x48c>)
 8003278:	601a      	str	r2, [r3, #0]

	  if(nowSleepTick - pastSleepTick > 5000)
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <main+0x48c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <main+0x490>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <main+0x494>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d800      	bhi.n	800328c <main+0x3f8>
 800328a:	e645      	b.n	8002f18 <main+0x84>
	  {
		  if(isLowBat)
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <main+0x498>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <main+0x430>
		  {
			  //goToSleep;
			  set_charging_led(OFF);
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fcf7 	bl	8002c88 <set_charging_led>
			  set_neopixel_boost(OFF);
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff fcd1 	bl	8002c42 <set_neopixel_boost>
			  set_neopixel_led(OFF);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff fcab 	bl	8002bfc <set_neopixel_led>
			  set_uv_boost(OFF);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7ff fc87 	bl	8002bba <set_uv_boost>
			  set_uv_led(OFF);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fc63 	bl	8002b78 <set_uv_led>
			  HAL_SuspendTick();
 80032b2:	f7fd f833 	bl	800031c <HAL_SuspendTick>
			  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80032b6:	2101      	movs	r1, #1
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7fe f8c5 	bl	8001448 <HAL_PWR_EnterSLEEPMode>
			  HAL_ResumeTick();
 80032be:	f7fd f83b 	bl	8000338 <HAL_ResumeTick>
 80032c2:	e01e      	b.n	8003302 <main+0x46e>
		  }
		  else
		  {
			  if(isRunning)
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <main+0x49c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11a      	bne.n	8003302 <main+0x46e>
			  {
				  //don't sleep;
			  }
			  else
			  {
				  if(isCharging)
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <main+0x4a0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <main+0x46e>
					  //don't sleep;
				  }
				  else
				  {
					  //goToSleep;
					  set_charging_led(OFF);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7ff fcd7 	bl	8002c88 <set_charging_led>
					  set_neopixel_boost(OFF);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7ff fcb1 	bl	8002c42 <set_neopixel_boost>
					  set_neopixel_led(OFF);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7ff fc8b 	bl	8002bfc <set_neopixel_led>
					  set_uv_boost(OFF);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7ff fc67 	bl	8002bba <set_uv_boost>
					  set_uv_led(OFF);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7ff fc43 	bl	8002b78 <set_uv_led>
					  HAL_SuspendTick();
 80032f2:	f7fd f813 	bl	800031c <HAL_SuspendTick>
					  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fe f8a5 	bl	8001448 <HAL_PWR_EnterSLEEPMode>
					  HAL_ResumeTick();
 80032fe:	f7fd f81b 	bl	8000338 <HAL_ResumeTick>
				  }
			  }
		  }
		  pastSleepTick = nowSleepTick;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <main+0x48c>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <main+0x490>)
 8003308:	601a      	str	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 800330a:	e605      	b.n	8002f18 <main+0x84>
 800330c:	20000024 	.word	0x20000024
 8003310:	2000002b 	.word	0x2000002b
 8003314:	2000002c 	.word	0x2000002c
 8003318:	20000030 	.word	0x20000030
 800331c:	20000034 	.word	0x20000034
 8003320:	20000048 	.word	0x20000048
 8003324:	2000004c 	.word	0x2000004c
 8003328:	00001388 	.word	0x00001388
 800332c:	20000026 	.word	0x20000026
 8003330:	20000027 	.word	0x20000027
 8003334:	20000025 	.word	0x20000025

08003338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b093      	sub	sp, #76	; 0x4c
 800333c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800333e:	2414      	movs	r4, #20
 8003340:	193b      	adds	r3, r7, r4
 8003342:	0018      	movs	r0, r3
 8003344:	2334      	movs	r3, #52	; 0x34
 8003346:	001a      	movs	r2, r3
 8003348:	2100      	movs	r1, #0
 800334a:	f000 fbb1 	bl	8003ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800334e:	003b      	movs	r3, r7
 8003350:	0018      	movs	r0, r3
 8003352:	2314      	movs	r3, #20
 8003354:	001a      	movs	r2, r3
 8003356:	2100      	movs	r1, #0
 8003358:	f000 fbaa 	bl	8003ab0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <SystemClock_Config+0xb4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <SystemClock_Config+0xb8>)
 8003362:	401a      	ands	r2, r3
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <SystemClock_Config+0xb4>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0109      	lsls	r1, r1, #4
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800336e:	0021      	movs	r1, r4
 8003370:	187b      	adds	r3, r7, r1
 8003372:	220a      	movs	r2, #10
 8003374:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2201      	movs	r2, #1
 800337a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2210      	movs	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2201      	movs	r2, #1
 8003386:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2202      	movs	r2, #2
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2200      	movs	r2, #0
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003394:	187b      	adds	r3, r7, r1
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	02d2      	lsls	r2, r2, #11
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	03d2      	lsls	r2, r2, #15
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7fe f898 	bl	80014dc <HAL_RCC_OscConfig>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d001      	beq.n	80033b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80033b0:	f000 f9da 	bl	8003768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b4:	003b      	movs	r3, r7
 80033b6:	220f      	movs	r2, #15
 80033b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033ba:	003b      	movs	r3, r7
 80033bc:	2203      	movs	r2, #3
 80033be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033c0:	003b      	movs	r3, r7
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033c6:	003b      	movs	r3, r7
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033cc:	003b      	movs	r3, r7
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033d2:	003b      	movs	r3, r7
 80033d4:	2101      	movs	r1, #1
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe fbfa 	bl	8001bd0 <HAL_RCC_ClockConfig>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d001      	beq.n	80033e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80033e0:	f000 f9c2 	bl	8003768 <Error_Handler>
  }
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b013      	add	sp, #76	; 0x4c
 80033ea:	bd90      	pop	{r4, r7, pc}
 80033ec:	40007000 	.word	0x40007000
 80033f0:	ffffe7ff 	.word	0xffffe7ff

080033f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033fa:	003b      	movs	r3, r7
 80033fc:	0018      	movs	r0, r3
 80033fe:	2308      	movs	r3, #8
 8003400:	001a      	movs	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f000 fb54 	bl	8003ab0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <MX_ADC_Init+0xc0>)
 800340a:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <MX_ADC_Init+0xc4>)
 800340c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003410:	2200      	movs	r2, #0
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	05d2      	lsls	r2, r2, #23
 800341a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <MX_ADC_Init+0xc0>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003424:	2200      	movs	r2, #0
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <MX_ADC_Init+0xc0>)
 800342a:	2201      	movs	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003436:	2220      	movs	r2, #32
 8003438:	2101      	movs	r1, #1
 800343a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <MX_ADC_Init+0xc0>)
 800343e:	2221      	movs	r2, #33	; 0x21
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <MX_ADC_Init+0xc0>)
 800344c:	22c2      	movs	r2, #194	; 0xc2
 800344e:	32ff      	adds	r2, #255	; 0xff
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003454:	222c      	movs	r2, #44	; 0x2c
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <MX_ADC_Init+0xc0>)
 800345c:	2204      	movs	r2, #4
 800345e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_ADC_Init+0xc0>)
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_ADC_Init+0xc0>)
 8003474:	2200      	movs	r2, #0
 8003476:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_ADC_Init+0xc0>)
 800347a:	0018      	movs	r0, r3
 800347c:	f7fc ff6a 	bl	8000354 <HAL_ADC_Init>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d001      	beq.n	8003488 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003484:	f000 f970 	bl	8003768 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003488:	003b      	movs	r3, r7
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <MX_ADC_Init+0xc8>)
 800348c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800348e:	003b      	movs	r3, r7
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	0152      	lsls	r2, r2, #5
 8003494:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003496:	003a      	movs	r2, r7
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_ADC_Init+0xc0>)
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f7fd f9c3 	bl	8000828 <HAL_ADC_ConfigChannel>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d001      	beq.n	80034aa <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80034a6:	f000 f95f 	bl	8003768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	200000f8 	.word	0x200000f8
 80034b8:	40012400 	.word	0x40012400
 80034bc:	0c000008 	.word	0x0c000008

080034c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <MX_IWDG_Init+0x34>)
 80034c6:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <MX_IWDG_Init+0x38>)
 80034c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <MX_IWDG_Init+0x34>)
 80034cc:	2205      	movs	r2, #5
 80034ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <MX_IWDG_Init+0x34>)
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <MX_IWDG_Init+0x3c>)
 80034d4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80034d6:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <MX_IWDG_Init+0x34>)
 80034d8:	4a08      	ldr	r2, [pc, #32]	; (80034fc <MX_IWDG_Init+0x3c>)
 80034da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <MX_IWDG_Init+0x34>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f7fd ff58 	bl	8001394 <HAL_IWDG_Init>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80034e8:	f000 f93e 	bl	8003768 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000060 	.word	0x20000060
 80034f8:	40003000 	.word	0x40003000
 80034fc:	00000fff 	.word	0x00000fff

08003500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003506:	2318      	movs	r3, #24
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	0018      	movs	r0, r3
 800350c:	2310      	movs	r3, #16
 800350e:	001a      	movs	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f000 facd 	bl	8003ab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003516:	2310      	movs	r3, #16
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	0018      	movs	r0, r3
 800351c:	2308      	movs	r3, #8
 800351e:	001a      	movs	r2, r3
 8003520:	2100      	movs	r1, #0
 8003522:	f000 fac5 	bl	8003ab0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003526:	003b      	movs	r3, r7
 8003528:	0018      	movs	r0, r3
 800352a:	2310      	movs	r3, #16
 800352c:	001a      	movs	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	f000 fabe 	bl	8003ab0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <MX_TIM2_Init+0xf8>)
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	05d2      	lsls	r2, r2, #23
 800353a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800353c:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <MX_TIM2_Init+0xf8>)
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <MX_TIM2_Init+0xf8>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <MX_TIM2_Init+0xf8>)
 800354a:	2227      	movs	r2, #39	; 0x27
 800354c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <MX_TIM2_Init+0xf8>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <MX_TIM2_Init+0xf8>)
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <MX_TIM2_Init+0xf8>)
 800355c:	0018      	movs	r0, r3
 800355e:	f7fe fce5 	bl	8001f2c <HAL_TIM_Base_Init>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d001      	beq.n	800356a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003566:	f000 f8ff 	bl	8003768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800356a:	2118      	movs	r1, #24
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	0152      	lsls	r2, r2, #5
 8003572:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003574:	187a      	adds	r2, r7, r1
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <MX_TIM2_Init+0xf8>)
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f7fe ff48 	bl	8002410 <HAL_TIM_ConfigClockSource>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003584:	f000 f8f0 	bl	8003768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <MX_TIM2_Init+0xf8>)
 800358a:	0018      	movs	r0, r3
 800358c:	f7fe fcfa 	bl	8001f84 <HAL_TIM_PWM_Init>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003594:	f000 f8e8 	bl	8003768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003598:	2110      	movs	r1, #16
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035a6:	187a      	adds	r2, r7, r1
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <MX_TIM2_Init+0xf8>)
 80035aa:	0011      	movs	r1, r2
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7ff faa0 	bl	8002af2 <HAL_TIMEx_MasterConfigSynchronization>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80035b6:	f000 f8d7 	bl	8003768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ba:	003b      	movs	r3, r7
 80035bc:	2260      	movs	r2, #96	; 0x60
 80035be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035c0:	003b      	movs	r3, r7
 80035c2:	2200      	movs	r2, #0
 80035c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035c6:	003b      	movs	r3, r7
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035cc:	003b      	movs	r3, r7
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035d2:	0039      	movs	r1, r7
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <MX_TIM2_Init+0xf8>)
 80035d6:	2204      	movs	r2, #4
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fe fe61 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80035e2:	f000 f8c1 	bl	8003768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <MX_TIM2_Init+0xf8>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f961 	bl	80038b0 <HAL_TIM_MspPostInit>

}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b00a      	add	sp, #40	; 0x28
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	200000bc 	.word	0x200000bc

080035fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <MX_DMA_Init+0x38>)
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <MX_DMA_Init+0x38>)
 8003608:	2101      	movs	r1, #1
 800360a:	430a      	orrs	r2, r1
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <MX_DMA_Init+0x38>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	200a      	movs	r0, #10
 8003620:	f7fd faae 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003624:	200a      	movs	r0, #10
 8003626:	f7fd fac0 	bl	8000baa <HAL_NVIC_EnableIRQ>

}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40021000 	.word	0x40021000

08003638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363e:	240c      	movs	r4, #12
 8003640:	193b      	adds	r3, r7, r4
 8003642:	0018      	movs	r0, r3
 8003644:	2314      	movs	r3, #20
 8003646:	001a      	movs	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f000 fa31 	bl	8003ab0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b34      	ldr	r3, [pc, #208]	; (8003720 <MX_GPIO_Init+0xe8>)
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <MX_GPIO_Init+0xe8>)
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <MX_GPIO_Init+0xe8>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <MX_GPIO_Init+0xe8>)
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <MX_GPIO_Init+0xe8>)
 800366c:	2102      	movs	r1, #2
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <MX_GPIO_Init+0xe8>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2202      	movs	r2, #2
 8003678:	4013      	ands	r3, r2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_UV_Pin|BOOST_EN_UV_Pin|LED_NEOPIXEL_Pin|BOOST_EN_NEOPIXEL_Pin, GPIO_PIN_RESET);
 800367e:	23ca      	movs	r3, #202	; 0xca
 8003680:	00d9      	lsls	r1, r3, #3
 8003682:	23a0      	movs	r3, #160	; 0xa0
 8003684:	05db      	lsls	r3, r3, #23
 8003686:	2200      	movs	r2, #0
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd fe38 	bl	80012fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <MX_GPIO_Init+0xec>)
 8003690:	2200      	movs	r2, #0
 8003692:	2102      	movs	r1, #2
 8003694:	0018      	movs	r0, r3
 8003696:	f7fd fe32 	bl	80012fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_UV_Pin BOOST_EN_UV_Pin LED_NEOPIXEL_Pin BOOST_EN_NEOPIXEL_Pin */
  GPIO_InitStruct.Pin = LED_UV_Pin|BOOST_EN_UV_Pin|LED_NEOPIXEL_Pin|BOOST_EN_NEOPIXEL_Pin;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	22ca      	movs	r2, #202	; 0xca
 800369e:	00d2      	lsls	r2, r2, #3
 80036a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2201      	movs	r2, #1
 80036a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	2200      	movs	r2, #0
 80036b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	193a      	adds	r2, r7, r4
 80036b6:	23a0      	movs	r3, #160	; 0xa0
 80036b8:	05db      	lsls	r3, r3, #23
 80036ba:	0011      	movs	r1, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd fc93 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin CHARGE_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|CHARGE_Pin;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	22a0      	movs	r2, #160	; 0xa0
 80036c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <MX_GPIO_Init+0xf0>)
 80036cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	193a      	adds	r2, r7, r4
 80036d6:	23a0      	movs	r3, #160	; 0xa0
 80036d8:	05db      	lsls	r3, r3, #23
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fd fc83 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CHARGE_Pin */
  GPIO_InitStruct.Pin = LED_CHARGE_Pin;
 80036e2:	0021      	movs	r1, r4
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2202      	movs	r2, #2
 80036e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2201      	movs	r2, #1
 80036ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	187b      	adds	r3, r7, r1
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CHARGE_GPIO_Port, &GPIO_InitStruct);
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <MX_GPIO_Init+0xec>)
 8003700:	0019      	movs	r1, r3
 8003702:	0010      	movs	r0, r2
 8003704:	f7fd fc70 	bl	8000fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2100      	movs	r1, #0
 800370c:	2007      	movs	r0, #7
 800370e:	f7fd fa37 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003712:	2007      	movs	r0, #7
 8003714:	f7fd fa49 	bl	8000baa <HAL_NVIC_EnableIRQ>

}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b009      	add	sp, #36	; 0x24
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	50000400 	.word	0x50000400
 8003728:	10110000 	.word	0x10110000

0800372c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	0002      	movs	r2, r0
 8003734:	1dbb      	adds	r3, r7, #6
 8003736:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == SWITCH_Pin)
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	2b20      	cmp	r3, #32
 800373e:	d103      	bne.n	8003748 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		isSwitch = 1;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_GPIO_EXTI_Callback+0x34>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == CHARGE_Pin)
	{
		isCharging = 1;
	}
}
 8003746:	e006      	b.n	8003756 <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin == CHARGE_Pin)
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d102      	bne.n	8003756 <HAL_GPIO_EXTI_Callback+0x2a>
		isCharging = 1;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_GPIO_EXTI_Callback+0x38>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000024 	.word	0x20000024
 8003764:	20000025 	.word	0x20000025

08003768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_MspInit+0x34>)
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_MspInit+0x34>)
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_MspInit+0x34>)
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_MspInit+0x34>)
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	0549      	lsls	r1, r1, #21
 800378e:	430a      	orrs	r2, r1
 8003790:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	2001      	movs	r0, #1
 8003798:	f7fd f9f2 	bl	8000b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800379c:	2001      	movs	r0, #1
 800379e:	f7fd fa04 	bl	8000baa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	230c      	movs	r3, #12
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	0018      	movs	r0, r3
 80037ba:	2314      	movs	r3, #20
 80037bc:	001a      	movs	r2, r3
 80037be:	2100      	movs	r1, #0
 80037c0:	f000 f976 	bl	8003ab0 <memset>
  if(hadc->Instance==ADC1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_ADC_MspInit+0x74>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d123      	bne.n	8003816 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_ADC_MspInit+0x78>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_ADC_MspInit+0x78>)
 80037d4:	2180      	movs	r1, #128	; 0x80
 80037d6:	0089      	lsls	r1, r1, #2
 80037d8:	430a      	orrs	r2, r1
 80037da:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_ADC_MspInit+0x78>)
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_ADC_MspInit+0x78>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	430a      	orrs	r2, r1
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_ADC_MspInit+0x78>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 80037f4:	210c      	movs	r1, #12
 80037f6:	187b      	adds	r3, r7, r1
 80037f8:	2208      	movs	r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2203      	movs	r2, #3
 8003800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 8003808:	187a      	adds	r2, r7, r1
 800380a:	23a0      	movs	r3, #160	; 0xa0
 800380c:	05db      	lsls	r3, r3, #23
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f7fd fbe9 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b008      	add	sp, #32
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40012400 	.word	0x40012400
 8003824:	40021000 	.word	0x40021000

08003828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	05db      	lsls	r3, r3, #23
 8003838:	429a      	cmp	r2, r3
 800383a:	d12f      	bne.n	800389c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_TIM_Base_MspInit+0x7c>)
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_TIM_Base_MspInit+0x7c>)
 8003842:	2101      	movs	r1, #1
 8003844:	430a      	orrs	r2, r1
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  
    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_TIM_Base_MspInit+0x84>)
 800384c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003850:	2208      	movs	r2, #8
 8003852:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003856:	2210      	movs	r2, #16
 8003858:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	0052      	lsls	r2, r2, #1
 800386c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003882:	0018      	movs	r0, r3
 8003884:	f7fd f9ae 	bl	8000be4 <HAL_DMA_Init>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_MspInit+0x68>
    {
      Error_Handler();
 800388c:	f7ff ff6c 	bl	8003768 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_TIM_Base_MspInit+0x80>)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	20000070 	.word	0x20000070
 80038ac:	40020030 	.word	0x40020030

080038b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	230c      	movs	r3, #12
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	0018      	movs	r0, r3
 80038be:	2314      	movs	r3, #20
 80038c0:	001a      	movs	r2, r3
 80038c2:	2100      	movs	r1, #0
 80038c4:	f000 f8f4 	bl	8003ab0 <memset>
  if(htim->Instance==TIM2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	05db      	lsls	r3, r3, #23
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d122      	bne.n	800391a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_TIM_MspPostInit+0x74>)
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_TIM_MspPostInit+0x74>)
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_TIM_MspPostInit+0x74>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038ec:	210c      	movs	r1, #12
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2202      	movs	r2, #2
 80038f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	187b      	adds	r3, r7, r1
 8003902:	2200      	movs	r2, #0
 8003904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003906:	187b      	adds	r3, r7, r1
 8003908:	2202      	movs	r2, #2
 800390a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	187a      	adds	r2, r7, r1
 800390e:	23a0      	movs	r3, #160	; 0xa0
 8003910:	05db      	lsls	r3, r3, #23
 8003912:	0011      	movs	r1, r2
 8003914:	0018      	movs	r0, r3
 8003916:	f7fd fb67 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b008      	add	sp, #32
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40021000 	.word	0x40021000

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003936:	e7fe      	b.n	8003936 <HardFault_Handler+0x4>

08003938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003950:	f7fc fcb0 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800395e:	f7fd fda3 	bl	80014a8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800396c:	2020      	movs	r0, #32
 800396e:	f7fd fcf5 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003972:	2080      	movs	r0, #128	; 0x80
 8003974:	f7fd fcf2 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003986:	0018      	movs	r0, r3
 8003988:	f7fd fa52 	bl	8000e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000070 	.word	0x20000070

08003998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800399c:	4b17      	ldr	r3, [pc, #92]	; (80039fc <SystemInit+0x64>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <SystemInit+0x64>)
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	0049      	lsls	r1, r1, #1
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <SystemInit+0x64>)
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <SystemInit+0x64>)
 80039b0:	4913      	ldr	r1, [pc, #76]	; (8003a00 <SystemInit+0x68>)
 80039b2:	400a      	ands	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <SystemInit+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <SystemInit+0x64>)
 80039bc:	4911      	ldr	r1, [pc, #68]	; (8003a04 <SystemInit+0x6c>)
 80039be:	400a      	ands	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <SystemInit+0x64>)
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <SystemInit+0x64>)
 80039c8:	2101      	movs	r1, #1
 80039ca:	438a      	bics	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <SystemInit+0x64>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <SystemInit+0x64>)
 80039d4:	490c      	ldr	r1, [pc, #48]	; (8003a08 <SystemInit+0x70>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <SystemInit+0x64>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <SystemInit+0x64>)
 80039e0:	490a      	ldr	r1, [pc, #40]	; (8003a0c <SystemInit+0x74>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <SystemInit+0x64>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <SystemInit+0x78>)
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	0512      	lsls	r2, r2, #20
 80039f2:	609a      	str	r2, [r3, #8]
#endif
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	40021000 	.word	0x40021000
 8003a00:	88ff400c 	.word	0x88ff400c
 8003a04:	fef6fff6 	.word	0xfef6fff6
 8003a08:	fffbffff 	.word	0xfffbffff
 8003a0c:	ff02ffff 	.word	0xff02ffff
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003a14:	480d      	ldr	r0, [pc, #52]	; (8003a4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003a16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003a18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a1a:	e003      	b.n	8003a24 <LoopCopyDataInit>

08003a1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003a1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a22:	3104      	adds	r1, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003a28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a2c:	d3f6      	bcc.n	8003a1c <CopyDataInit>
  ldr  r2, =_sbss
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003a30:	e002      	b.n	8003a38 <LoopFillZerobss>

08003a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003a32:	2300      	movs	r3, #0
  str  r3, [r2]
 8003a34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a36:	3204      	adds	r2, #4

08003a38 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <LoopForever+0x16>)
  cmp  r2, r3
 8003a3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a3c:	d3f9      	bcc.n	8003a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a3e:	f7ff ffab 	bl	8003998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a42:	f000 f811 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a46:	f7ff fa25 	bl	8002e94 <main>

08003a4a <LoopForever>:

LoopForever:
    b LoopForever
 8003a4a:	e7fe      	b.n	8003a4a <LoopForever>
   ldr   r0, =_estack
 8003a4c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003a50:	08003afc 	.word	0x08003afc
  ldr  r0, =_sdata
 8003a54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a58:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8003a5c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8003a60:	200001bc 	.word	0x200001bc

08003a64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a64:	e7fe      	b.n	8003a64 <ADC1_COMP_IRQHandler>
	...

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	4d0c      	ldr	r5, [pc, #48]	; (8003aa0 <__libc_init_array+0x38>)
 8003a6e:	4c0d      	ldr	r4, [pc, #52]	; (8003aa4 <__libc_init_array+0x3c>)
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	2600      	movs	r6, #0
 8003a7a:	f000 f821 	bl	8003ac0 <_init>
 8003a7e:	4d0a      	ldr	r5, [pc, #40]	; (8003aa8 <__libc_init_array+0x40>)
 8003a80:	4c0a      	ldr	r4, [pc, #40]	; (8003aac <__libc_init_array+0x44>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	00b3      	lsls	r3, r6, #2
 8003a8e:	58eb      	ldr	r3, [r5, r3]
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	00b3      	lsls	r3, r6, #2
 8003a98:	58eb      	ldr	r3, [r5, r3]
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08003af4 	.word	0x08003af4
 8003aa4:	08003af4 	.word	0x08003af4
 8003aa8:	08003af4 	.word	0x08003af4
 8003aac:	08003af8 	.word	0x08003af8

08003ab0 <memset>:
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	1812      	adds	r2, r2, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d100      	bne.n	8003aba <memset+0xa>
 8003ab8:	4770      	bx	lr
 8003aba:	7019      	strb	r1, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e7f9      	b.n	8003ab4 <memset+0x4>

08003ac0 <_init>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr

08003acc <_fini>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr
