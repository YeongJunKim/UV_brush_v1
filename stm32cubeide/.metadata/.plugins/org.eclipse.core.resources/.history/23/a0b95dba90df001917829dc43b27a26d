/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "brush.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define BAT_MAX 90
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

uint8_t isSwitch = 0;
uint8_t isCharging = 0;
uint8_t isRunning = 0;

uint8_t moodlighting = 0;
uint8_t uvlighting = 0;

uint8_t step = 0;

uint8_t clickcount = 0;
uint8_t getcount = 0;
uint8_t pastcount = 0;

uint32_t nowtick = 0;
uint32_t pasttick = 0;

uint32_t nowledtick = 0;
uint32_t pastledtick = 0;

uint32_t nowadctick = 0;
uint32_t pastadctick = 0;

uint32_t nowbattick = 0;
uint32_t pastbattick = 0;


uint16_t adcValue = 0;
float a = 0;
uint8_t b = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_RTC_Init(void);
static void MX_ADC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_RTC_Init();
  MX_ADC_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

  HAL_ADC_Start(&hadc);



  htim2.Instance->CCR1 = 0;
  htim2.Instance->CCR2 = 0;
  htim2.Instance->CCR3 = 0;


  set_charging_led(OFF);
  set_uv_led(OFF);
  set_boost(OFF);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //htim2.Instance->CCR2+=2;
	  //htim2.Instance->CCR3+=10;

	  isCharging = HAL_GPIO_ReadPin(CHARGE_GPIO_Port, CHARGE_Pin);


	  nowbattick = HAL_GetTick();
	  if(nowbattick - pastbattick > 1000)
	  {
		  a = (float)(adcValue - 3368) * 0.1953;
		  b = a;

		  if(b < BAT_MAX)
		  {
			  set_charging_led(TOGGLE);
		  }
		  else
		  {
			  set_charging_led(OFF);
		  }
	  pastbattick = nowbattick;
	  }


	  /*
	   * ADC conversion
	   * every 100ms
	   * */
	  nowadctick = HAL_GetTick();
	  if(nowadctick - pastadctick > 100)
	  {
		  //HAL_ADC_Start(&hadc);
		  HAL_ADC_PollForConversion(&hadc, 0xFFFF);
		  adcValue = HAL_ADC_GetValue(&hadc);

		  pastadctick = nowadctick;
	  }
	  /*
	   * LED testing
	   * pwm control
	   * */
	  nowledtick = HAL_GetTick();
	  if(nowledtick - pastledtick > 5)
	  {
		  if(uvlighting && moodlighting)
		  {
			  htim2.Instance->CCR1++;
			  htim2.Instance->CCR2+=2;
			  htim2.Instance->CCR3+=10;
			  if(htim2.Instance->CCR1 > 9998)
				  htim2.Instance->CCR1 = 0;
			  if(htim2.Instance->CCR2 > 9998)
				  htim2.Instance->CCR2 = 0;
			  if(htim2.Instance->CCR3 > 9998)
				  htim2.Instance->CCR3 = 0;
		  }
		  else if(!uvlighting && !moodlighting)
		  {
			  htim2.Instance->CCR1 = 0;
			  htim2.Instance->CCR2 = 0;
			  htim2.Instance->CCR3 = 0;
			  htim2.Instance->CCR4 = 0;
		  }
		  else if(uvlighting && !moodlighting)
		  {
			  htim2.Instance->CCR1 = 0;
			  htim2.Instance->CCR2 = 0;
			  htim2.Instance->CCR3 = 9000;
		  }
		  else if(!uvlighting && moodlighting)
		  {
			  htim2.Instance->CCR1++;
			  htim2.Instance->CCR2+=2;
			  htim2.Instance->CCR3+=10;
			  if(htim2.Instance->CCR1 > 9998)
				  htim2.Instance->CCR1 = 0;
			  if(htim2.Instance->CCR2 > 9998)
				  htim2.Instance->CCR2 = 0;
			  if(htim2.Instance->CCR3 > 9998)
				  htim2.Instance->CCR3 = 0;
		  }
		  else
		  {
			  htim2.Instance->CCR1 = 0;
			  htim2.Instance->CCR2 = 0;
			  htim2.Instance->CCR3 = 0;
			  htim2.Instance->CCR4 = 0;
		  }
		  pastledtick = nowledtick;
	  }

	  if(uvlighting)
	  {
		  set_boost(ON);
		  set_uv_led(ON);
	  }
	  else
	  {
		  set_boost(OFF);
		  set_uv_led(OFF);
	  }



	  /*
	   * main task
	   * switch control
	   * double or triple click maximum waiting is 300ms.
	   * if weighing time is over 500ms select task.
	   * 1 click
	   * UV LED lighting and few second later, shut down UV led power.
	   * 2 clicks
	   * 3color LED lighting & shut down UV led power.
	   * 3 clicks
	   * all shutdown. go to sleep mode.
	   * */
	  nowtick = HAL_GetTick();
	  if(isSwitch)
	  {
		  if(nowtick - pasttick > 800)
		  {

			  clickcount++;
			  isSwitch = 0;

			  pasttick = nowtick;
		  }
	  }
	  if(nowtick - pasttick > 1000)		//1sec
	  {
		  getcount = clickcount;

		  if(getcount != pastcount)
		  {
			  step ++;
			  //end

		  }
		  switch(step)
		  {
			  //task cases
			  case 0:
				  break;
			  case 1:
				  uvlighting = 1;
				  moodlighting = 0;
				  break;
			  case 2:
				  uvlighting = 0;
				  moodlighting = 1;
				  break;
			  case 3:
				  uvlighting = 0;
				  moodlighting = 0;
				  step = 0;
				  break;
			  default:
				  uvlighting = 0;
				  moodlighting = 0;
				  step = 0;
				  break;
		  }
		  //reset
		  isRunning = 0;
		  isSwitch = 0;

		  pastcount = getcount;
		  pasttick = nowtick;
	  }
//	  if(nowtick - pasttick > 800)		//500ms
//	  {
//		  getcount = clickcount;
//
//		  if(getcount == pastcount)
//		  {
//			  //end
//			  switch(getcount)
//			  {
//			  	  //task cases
//				  case 0:
//					  break;
//				  case 1:
//					  uvlighting = 1;
//					  break;
//				  case 2:
//					  uvlighting = 0;
//					  moodlighting = 1;
//					  break;
//				  case 3:
//					  uvlighting = 0;
//					  moodlighting = 0;
//					  break;
//				  default:
//					  uvlighting = 0;
//					  moodlighting = 0;
//					  break;
//			  }
//			  //reset
//			  isRunning = 0;
//			  clickcount = 0;
//			  isSwitch = 0;
//		  }
//		  if(getcount != pastcount)
//		  {
//			  //continue
//			  if(getcount > 3)
//			  {
//				  //reset
//				  isRunning = 0;
//				  clickcount = 0;
//				  isSwitch = 0;
//			  }
//		  }
//
//		  pastcount = getcount;
//		  pasttick = nowtick;
//	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_UV_Pin|BOOST_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_UV_Pin BOOST_EN_Pin */
  GPIO_InitStruct.Pin = LED_UV_Pin|BOOST_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SWITCH_Pin CHARGE_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|CHARGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_CHARGE_Pin */
  GPIO_InitStruct.Pin = LED_CHARGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_CHARGE_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == SWITCH_Pin)
	{
		isSwitch = 1;
	}
	else if(GPIO_Pin == CHARGE_Pin)
	{
		isCharging = 1;
	}
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
