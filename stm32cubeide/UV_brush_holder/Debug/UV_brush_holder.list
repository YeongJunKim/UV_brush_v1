
UV_brush_holder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003438  08003438  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000004  08003444  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003444  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ede  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019cd  00000000  00000000  00029f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000118ea  00000000  00000000  0002ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091a2  00000000  00000000  0003e79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fe37  00000000  00000000  0004793c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000b77f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033ac 	.word	0x080033ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080033ac 	.word	0x080033ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f002 fde1 	bl	8003028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 faf8 	bl	8000a8e <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fac5 	bl	8000a44 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000020 	.word	0x20000020

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000020 	.word	0x20000020

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_GetREVID>:
/**
  * @brief Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <HAL_GetREVID+0x10>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	0c1b      	lsrs	r3, r3, #16
}
 800053e:	0018      	movs	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40015800 	.word	0x40015800

08000548 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_GetDEVID+0x14>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	051b      	lsls	r3, r3, #20
 8000552:	0d1b      	lsrs	r3, r3, #20
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40015800 	.word	0x40015800

08000560 <HAL_COMP_Init>:
            and LPTIM_IN2(PB7, PC2) should not be configured in alternate function.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  uint32_t exti_line = 0U;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  uint32_t comp_voltage_scaler_not_initialized = 0U;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  __IO uint32_t wait_loop_index = 0U;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8000578:	231b      	movs	r3, #27
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || (__HAL_COMP_IS_LOCKED(hcomp)))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d008      	beq.n	8000598 <HAL_COMP_Init+0x38>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	0fdb      	lsrs	r3, r3, #31
 800058e:	07da      	lsls	r2, r3, #31
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	429a      	cmp	r2, r3
 8000596:	d104      	bne.n	80005a2 <HAL_COMP_Init+0x42>
  {
    status = HAL_ERROR;
 8000598:	231b      	movs	r3, #27
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	e14d      	b.n	800083e <HAL_COMP_Init+0x2de>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_POWERMODE(hcomp->Init.Mode));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2221      	movs	r2, #33	; 0x21
 80005a6:	5c9b      	ldrb	r3, [r3, r2]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10d      	bne.n	80005ca <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2220      	movs	r2, #32
 80005b2:	2100      	movs	r1, #0
 80005b4:	5499      	strb	r1, [r3, r2]
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4ba5      	ldr	r3, [pc, #660]	; (800084c <HAL_COMP_Init+0x2ec>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ba:	4ba4      	ldr	r3, [pc, #656]	; (800084c <HAL_COMP_Init+0x2ec>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fd43 	bl	8003050 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    
    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InvertingInput   |
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691a      	ldr	r2, [r3, #16]
               hcomp->Init.OutputPol         );
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	695b      	ldr	r3, [r3, #20]
    tmp_csr = (hcomp->Init.InvertingInput   |
 80005d2:	4313      	orrs	r3, r2
 80005d4:	61fb      	str	r3, [r7, #28]
    
    /* Configuration specific to comparator instance: COMP2 */
    if ((hcomp->Instance) == COMP2)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a9d      	ldr	r2, [pc, #628]	; (8000850 <HAL_COMP_Init+0x2f0>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d13b      	bne.n	8000658 <HAL_COMP_Init+0xf8>
    {
      /* Comparator input plus configuration is available on COMP2 only */
      /* Comparator power mode configuration is available on COMP2 only */
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68da      	ldr	r2, [r3, #12]
                  hcomp->Init.Mode               );
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 80005e8:	4313      	orrs	r3, r2
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	61fb      	str	r3, [r7, #28]
      
      /* COMP2 specificity: when using VrefInt or subdivision of VrefInt,     */
      /* specific path must be enabled.                                       */
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	691b      	ldr	r3, [r3, #16]
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 80005fc:	2b40      	cmp	r3, #64	; 0x40
 80005fe:	d007      	beq.n	8000610 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 8000604:	2b50      	cmp	r3, #80	; 0x50
 8000606:	d003      	beq.n	8000610 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_3_4VREFINT)   )
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 800060c:	2b60      	cmp	r3, #96	; 0x60
 800060e:	d123      	bne.n	8000658 <HAL_COMP_Init+0xf8>
      {
        /* Memorize voltage scaler state before initialization */
        comp_voltage_scaler_not_initialized = (READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP) == 0U);
 8000610:	4b90      	ldr	r3, [pc, #576]	; (8000854 <HAL_COMP_Init+0x2f4>)
 8000612:	6a1a      	ldr	r2, [r3, #32]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	015b      	lsls	r3, r3, #5
 8000618:	4013      	ands	r3, r2
 800061a:	425a      	negs	r2, r3
 800061c:	4153      	adcs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	613b      	str	r3, [r7, #16]
        
        SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT           |
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <HAL_COMP_Init+0x2f4>)
 8000624:	6a1a      	ldr	r2, [r3, #32]
 8000626:	4b8b      	ldr	r3, [pc, #556]	; (8000854 <HAL_COMP_Init+0x2f4>)
 8000628:	498b      	ldr	r1, [pc, #556]	; (8000858 <HAL_COMP_Init+0x2f8>)
 800062a:	430a      	orrs	r2, r1
 800062c:	621a      	str	r2, [r3, #32]
                               SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP  );
        
        /* Delay for COMP scaler bridge voltage stabilization */
        /* Apply the delay if voltage scaler bridge is enabled for the first time */
        if (comp_voltage_scaler_not_initialized != 0U)
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d011      	beq.n	8000658 <HAL_COMP_Init+0xf8>
        {
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles.                                     */
          wait_loop_index = (COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000U * 2U)));
 8000634:	4b89      	ldr	r3, [pc, #548]	; (800085c <HAL_COMP_Init+0x2fc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4989      	ldr	r1, [pc, #548]	; (8000860 <HAL_COMP_Init+0x300>)
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fd64 	bl	8000108 <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	001a      	movs	r2, r3
 8000644:	4b87      	ldr	r3, [pc, #540]	; (8000864 <HAL_COMP_Init+0x304>)
 8000646:	4353      	muls	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800064a:	e002      	b.n	8000652 <HAL_COMP_Init+0xf2>
          {
            wait_loop_index--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f9      	bne.n	800064c <HAL_COMP_Init+0xec>
        }
      }
    }
    
    /* Set comparator output connection to LPTIM */
    if (hcomp->Init.LPTIMConnection != COMP_LPTIMCONNECTION_DISABLED)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d045      	beq.n	80006ec <HAL_COMP_Init+0x18c>
    {
      /* LPTIM connexion requested on COMP1 */
      if ((hcomp->Instance) == COMP1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a80      	ldr	r2, [pc, #512]	; (8000868 <HAL_COMP_Init+0x308>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d105      	bne.n	8000676 <HAL_COMP_Init+0x116>
        assert_param(IS_COMP1_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        /* Note: Compatibility with previous driver version using             */
        /* generic literal COMP_LPTIMCONNECTION_ENABLED corresponding         */
        /* to LPTIM input 1 for COMP1.                                        */
          tmp_csr |= (COMP_CSR_COMP1LPTIM1IN1);
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0152      	lsls	r2, r2, #5
 8000670:	4313      	orrs	r3, r2
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	e03b      	b.n	80006ee <HAL_COMP_Init+0x18e>
      else
      {
        /* Note : COMP2 can be connected to input 1 or input 2 of LPTIM if requested */
        assert_param(IS_COMP2_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        switch (hcomp->Init.LPTIMConnection)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d105      	bne.n	800068a <HAL_COMP_Init+0x12a>
        {
        case  COMP_LPTIMCONNECTION_IN1_ENABLED :
          tmp_csr |= (COMP_CSR_COMP2LPTIM1IN1);
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0192      	lsls	r2, r2, #6
 8000684:	4313      	orrs	r3, r2
 8000686:	61fb      	str	r3, [r7, #28]
          break;
 8000688:	e031      	b.n	80006ee <HAL_COMP_Init+0x18e>
          /* Note: Default case for compatibility with previous driver version*/
          /* using generic literal COMP_LPTIMCONNECTION_ENABLED corresponding */
          /* to LPTIM input 2 for COMP2.                                      */
          
          /* Check the MCU_ID in order to allow or not the COMP2 connection to LPTIM input 2 */
          if (((HAL_GetDEVID() == C_DEV_ID_L073) && (HAL_GetREVID() == C_REV_ID_A))
 800068a:	f7ff ff5d 	bl	8000548 <HAL_GetDEVID>
 800068e:	0002      	movs	r2, r0
 8000690:	4b76      	ldr	r3, [pc, #472]	; (800086c <HAL_COMP_Init+0x30c>)
 8000692:	429a      	cmp	r2, r3
 8000694:	d106      	bne.n	80006a4 <HAL_COMP_Init+0x144>
 8000696:	f7ff ff4d 	bl	8000534 <HAL_GetREVID>
 800069a:	0002      	movs	r2, r0
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	015b      	lsls	r3, r3, #5
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d018      	beq.n	80006d6 <HAL_COMP_Init+0x176>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 80006a4:	f7ff ff50 	bl	8000548 <HAL_GetDEVID>
 80006a8:	0002      	movs	r2, r0
                            ||
 80006aa:	4b71      	ldr	r3, [pc, #452]	; (8000870 <HAL_COMP_Init+0x310>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d106      	bne.n	80006be <HAL_COMP_Init+0x15e>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 80006b0:	f7ff ff40 	bl	8000534 <HAL_GetREVID>
 80006b4:	0002      	movs	r2, r0
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d00b      	beq.n	80006d6 <HAL_COMP_Init+0x176>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 80006be:	f7ff ff43 	bl	8000548 <HAL_GetDEVID>
 80006c2:	0002      	movs	r2, r0
                            ||
 80006c4:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <HAL_COMP_Init+0x310>)
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d10a      	bne.n	80006e0 <HAL_COMP_Init+0x180>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 80006ca:	f7ff ff33 	bl	8000534 <HAL_GetREVID>
 80006ce:	0002      	movs	r2, r0
 80006d0:	4b68      	ldr	r3, [pc, #416]	; (8000874 <HAL_COMP_Init+0x314>)
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d104      	bne.n	80006e0 <HAL_COMP_Init+0x180>
          {
            assert_param(IS_COMP2_LPTIMCONNECTION_RESTRICTED(hcomp->Init.LPTIMConnection));
            
            /* Error: On the selected device, COMP2 cannot be connected to LPTIM input 2 */
            status = HAL_ERROR;
 80006d6:	231b      	movs	r3, #27
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
          }
          else
          {
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
          }
          break;
 80006de:	e006      	b.n	80006ee <HAL_COMP_Init+0x18e>
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	0152      	lsls	r2, r2, #5
 80006e6:	4313      	orrs	r3, r2
 80006e8:	61fb      	str	r3, [r7, #28]
          break;
 80006ea:	e000      	b.n	80006ee <HAL_COMP_Init+0x18e>
        }
      }
 80006ec:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Update comparator register */
    if ((hcomp->Instance) == COMP1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a5d      	ldr	r2, [pc, #372]	; (8000868 <HAL_COMP_Init+0x308>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d10b      	bne.n	8000710 <HAL_COMP_Init+0x1b0>
    {
      MODIFY_REG(hcomp->Instance->CSR,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a5e      	ldr	r2, [pc, #376]	; (8000878 <HAL_COMP_Init+0x318>)
 8000700:	4013      	ands	r3, r2
 8000702:	0019      	movs	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	69fa      	ldr	r2, [r7, #28]
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e00a      	b.n	8000726 <HAL_COMP_Init+0x1c6>
                 tmp_csr
                );
    }
    else /* Instance == COMP2 */
    {
      MODIFY_REG(hcomp->Instance->CSR,
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a59      	ldr	r2, [pc, #356]	; (800087c <HAL_COMP_Init+0x31c>)
 8000718:	4013      	ands	r3, r2
 800071a:	0019      	movs	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	69fa      	ldr	r2, [r7, #28]
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
    
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	429a      	cmp	r2, r3
 8000730:	d107      	bne.n	8000742 <HAL_COMP_Init+0x1e2>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8000732:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <HAL_COMP_Init+0x308>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <HAL_COMP_Init+0x308>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0049      	lsls	r1, r1, #1
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e005      	b.n	800074e <HAL_COMP_Init+0x1ee>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <HAL_COMP_Init+0x308>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b48      	ldr	r3, [pc, #288]	; (8000868 <HAL_COMP_Init+0x308>)
 8000748:	494d      	ldr	r1, [pc, #308]	; (8000880 <HAL_COMP_Init+0x320>)
 800074a:	400a      	ands	r2, r1
 800074c:	601a      	str	r2, [r3, #0]
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a45      	ldr	r2, [pc, #276]	; (8000868 <HAL_COMP_Init+0x308>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d102      	bne.n	800075e <HAL_COMP_Init+0x1fe>
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	039b      	lsls	r3, r3, #14
 800075c:	e001      	b.n	8000762 <HAL_COMP_Init+0x202>
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	617b      	str	r3, [r7, #20]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != RESET)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	2203      	movs	r2, #3
 800076a:	4013      	ands	r3, r2
 800076c:	d04f      	beq.n	800080e <HAL_COMP_Init+0x2ae>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != RESET)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	2210      	movs	r2, #16
 8000774:	4013      	ands	r3, r2
 8000776:	d006      	beq.n	8000786 <HAL_COMP_Init+0x226>
      {
        SET_BIT(EXTI->RTSR, exti_line);
 8000778:	4b42      	ldr	r3, [pc, #264]	; (8000884 <HAL_COMP_Init+0x324>)
 800077a:	6899      	ldr	r1, [r3, #8]
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <HAL_COMP_Init+0x324>)
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	430a      	orrs	r2, r1
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	e006      	b.n	8000794 <HAL_COMP_Init+0x234>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR, exti_line);
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <HAL_COMP_Init+0x324>)
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	43d9      	mvns	r1, r3
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <HAL_COMP_Init+0x324>)
 8000790:	400a      	ands	r2, r1
 8000792:	609a      	str	r2, [r3, #8]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	2220      	movs	r2, #32
 800079a:	4013      	ands	r3, r2
 800079c:	d006      	beq.n	80007ac <HAL_COMP_Init+0x24c>
      {
        SET_BIT(EXTI->FTSR, exti_line);
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <HAL_COMP_Init+0x324>)
 80007a0:	68d9      	ldr	r1, [r3, #12]
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_COMP_Init+0x324>)
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	e006      	b.n	80007ba <HAL_COMP_Init+0x25a>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR, exti_line);
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <HAL_COMP_Init+0x324>)
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <HAL_COMP_Init+0x324>)
 80007b6:	400a      	ands	r2, r1
 80007b8:	60da      	str	r2, [r3, #12]
      }
      
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR, exti_line);
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <HAL_COMP_Init+0x324>)
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	615a      	str	r2, [r3, #20]
      
      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != RESET)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	2202      	movs	r2, #2
 80007c6:	4013      	ands	r3, r2
 80007c8:	d006      	beq.n	80007d8 <HAL_COMP_Init+0x278>
      {
        SET_BIT(EXTI->EMR, exti_line);
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <HAL_COMP_Init+0x324>)
 80007cc:	6859      	ldr	r1, [r3, #4]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HAL_COMP_Init+0x324>)
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	e006      	b.n	80007e6 <HAL_COMP_Init+0x286>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR, exti_line);
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <HAL_COMP_Init+0x324>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	43d9      	mvns	r1, r3
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <HAL_COMP_Init+0x324>)
 80007e2:	400a      	ands	r2, r1
 80007e4:	605a      	str	r2, [r3, #4]
      }
      
      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != RESET)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	d006      	beq.n	80007fe <HAL_COMP_Init+0x29e>
      {
        SET_BIT(EXTI->IMR, exti_line);
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <HAL_COMP_Init+0x324>)
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <HAL_COMP_Init+0x324>)
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e015      	b.n	800082a <HAL_COMP_Init+0x2ca>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR, exti_line);
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <HAL_COMP_Init+0x324>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	43d9      	mvns	r1, r3
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <HAL_COMP_Init+0x324>)
 8000808:	400a      	ands	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e00d      	b.n	800082a <HAL_COMP_Init+0x2ca>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR, exti_line);
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_COMP_Init+0x324>)
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	43d9      	mvns	r1, r3
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_COMP_Init+0x324>)
 8000818:	400a      	ands	r2, r1
 800081a:	605a      	str	r2, [r3, #4]
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR, exti_line);
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_COMP_Init+0x324>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	43d9      	mvns	r1, r3
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_COMP_Init+0x324>)
 8000826:	400a      	ands	r2, r1
 8000828:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2221      	movs	r2, #33	; 0x21
 800082e:	5c9b      	ldrb	r3, [r3, r2]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <HAL_COMP_Init+0x2de>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2221      	movs	r2, #33	; 0x21
 800083a:	2101      	movs	r1, #1
 800083c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  return status;
 800083e:	231b      	movs	r3, #27
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b008      	add	sp, #32
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	4001001c 	.word	0x4001001c
 8000854:	40010000 	.word	0x40010000
 8000858:	00001001 	.word	0x00001001
 800085c:	20000000 	.word	0x20000000
 8000860:	001e8480 	.word	0x001e8480
 8000864:	00000bb8 	.word	0x00000bb8
 8000868:	40010018 	.word	0x40010018
 800086c:	00000447 	.word	0x00000447
 8000870:	00000417 	.word	0x00000417
 8000874:	00001008 	.word	0x00001008
 8000878:	ffff6ecf 	.word	0xffff6ecf
 800087c:	ffff4887 	.word	0xffff4887
 8000880:	fffffeff 	.word	0xfffffeff
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <HAL_COMP_IRQHandler+0x54>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d102      	bne.n	80008a0 <HAL_COMP_IRQHandler+0x18>
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	039b      	lsls	r3, r3, #14
 800089e:	e001      	b.n	80008a4 <HAL_COMP_IRQHandler+0x1c>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
  
  /* Check COMP EXTI flag */
  if(READ_BIT(EXTI->PR, exti_line) != RESET)
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_COMP_IRQHandler+0x58>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4013      	ands	r3, r2
 80008ae:	d011      	beq.n	80008d4 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0)
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_COMP_IRQHandler+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4013      	ands	r3, r2
 80008ba:	d004      	beq.n	80008c6 <HAL_COMP_IRQHandler+0x3e>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      WRITE_REG(EXTI->PR, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_COMP_IRQHandler+0x58>)
 80008be:	22c0      	movs	r2, #192	; 0xc0
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	e002      	b.n	80008cc <HAL_COMP_IRQHandler+0x44>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      WRITE_REG(EXTI->PR, exti_line);
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_COMP_IRQHandler+0x58>)
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	615a      	str	r2, [r3, #20]
    
    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f808 	bl	80008e4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b004      	add	sp, #16
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40010018 	.word	0x40010018
 80008e0:	40010400 	.word	0x40010400

080008e4 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	231f      	movs	r3, #31
 8000908:	401a      	ands	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <NVIC_EnableIRQ+0x28>)
 800090c:	2101      	movs	r1, #1
 800090e:	4091      	lsls	r1, r2
 8000910:	000a      	movs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	e000e100 	.word	0xe000e100

08000920 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	d932      	bls.n	800099c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <NVIC_SetPriority+0xd4>)
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	0019      	movs	r1, r3
 800093e:	230f      	movs	r3, #15
 8000940:	400b      	ands	r3, r1
 8000942:	3b08      	subs	r3, #8
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	3306      	adds	r3, #6
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	3304      	adds	r3, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1dfa      	adds	r2, r7, #7
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	0011      	movs	r1, r2
 8000956:	2203      	movs	r2, #3
 8000958:	400a      	ands	r2, r1
 800095a:	00d2      	lsls	r2, r2, #3
 800095c:	21ff      	movs	r1, #255	; 0xff
 800095e:	4091      	lsls	r1, r2
 8000960:	000a      	movs	r2, r1
 8000962:	43d2      	mvns	r2, r2
 8000964:	401a      	ands	r2, r3
 8000966:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	019b      	lsls	r3, r3, #6
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	401a      	ands	r2, r3
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0018      	movs	r0, r3
 8000976:	2303      	movs	r3, #3
 8000978:	4003      	ands	r3, r0
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	481d      	ldr	r0, [pc, #116]	; (80009f4 <NVIC_SetPriority+0xd4>)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	001c      	movs	r4, r3
 8000986:	230f      	movs	r3, #15
 8000988:	4023      	ands	r3, r4
 800098a:	3b08      	subs	r3, #8
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	3306      	adds	r3, #6
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	18c3      	adds	r3, r0, r3
 8000996:	3304      	adds	r3, #4
 8000998:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800099a:	e027      	b.n	80009ec <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099c:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <NVIC_SetPriority+0xd8>)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	33c0      	adds	r3, #192	; 0xc0
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	589b      	ldr	r3, [r3, r2]
 80009ac:	1dfa      	adds	r2, r7, #7
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	0011      	movs	r1, r2
 80009b2:	2203      	movs	r2, #3
 80009b4:	400a      	ands	r2, r1
 80009b6:	00d2      	lsls	r2, r2, #3
 80009b8:	21ff      	movs	r1, #255	; 0xff
 80009ba:	4091      	lsls	r1, r2
 80009bc:	000a      	movs	r2, r1
 80009be:	43d2      	mvns	r2, r2
 80009c0:	401a      	ands	r2, r3
 80009c2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	019b      	lsls	r3, r3, #6
 80009c8:	22ff      	movs	r2, #255	; 0xff
 80009ca:	401a      	ands	r2, r3
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	0018      	movs	r0, r3
 80009d2:	2303      	movs	r3, #3
 80009d4:	4003      	ands	r3, r0
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <NVIC_SetPriority+0xd8>)
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	33c0      	adds	r3, #192	; 0xc0
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	501a      	str	r2, [r3, r0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	e000e100 	.word	0xe000e100

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <SysTick_Config+0x40>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d901      	bls.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e010      	b.n	8000a34 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SysTick_Config+0x44>)
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	3a01      	subs	r2, #1
 8000a18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	2103      	movs	r1, #3
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff ff7d 	bl	8000920 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SysTick_Config+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x44>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	00ffffff 	.word	0x00ffffff
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <NVIC_SetPriority>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	0002      	movs	r2, r0
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff37 	bl	80008f4 <NVIC_EnableIRQ>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ffaf 	bl	80009fc <SysTick_Config>
 8000a9e:	0003      	movs	r3, r0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000abe:	e149      	b.n	8000d54 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x30>
 8000ad6:	e13a      	b.n	8000d4e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x40>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d123      	bne.n	8000b30 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	58d3      	ldr	r3, [r2, r3]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2207      	movs	r2, #7
 8000afa:	4013      	ands	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2107      	movs	r1, #7
 8000b14:	400b      	ands	r3, r1
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d00b      	beq.n	8000b50 <HAL_GPIO_Init+0xa8>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b44:	2b11      	cmp	r3, #17
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b12      	cmp	r3, #18
 8000b4e:	d130      	bne.n	8000bb2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	43da      	mvns	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	409a      	lsls	r2, r3
 8000b72:	0013      	movs	r3, r2
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b86:	2201      	movs	r2, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	055b      	lsls	r3, r3, #21
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d100      	bne.n	8000c24 <HAL_GPIO_Init+0x17c>
 8000c22:	e094      	b.n	8000d4e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	589b      	ldr	r3, [r3, r2]
 8000c3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x1de>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x1da>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x1d6>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a42      	ldr	r2, [pc, #264]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x1d2>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c98:	4935      	ldr	r1, [pc, #212]	; (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	035b      	lsls	r3, r3, #13
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	039b      	lsls	r3, r3, #14
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	1e13      	subs	r3, r2, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_GPIO_Init+0x2ba>
 8000d60:	e6ae      	b.n	8000ac0 <HAL_GPIO_Init+0x18>
  }
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b006      	add	sp, #24
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	50000400 	.word	0x50000400
 8000d78:	50000800 	.word	0x50000800
 8000d7c:	50001c00 	.word	0x50001c00
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	1c0a      	adds	r2, r1, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695a      	ldr	r2, [r3, #20]
 8000dd0:	1cbb      	adds	r3, r7, #2
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	405a      	eors	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	615a      	str	r2, [r3, #20]
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	1dbb      	adds	r3, r7, #6
 8000dee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	1dba      	adds	r2, r7, #6
 8000df6:	8812      	ldrh	r2, [r2, #0]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d008      	beq.n	8000e0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000dfe:	1dba      	adds	r2, r7, #6
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e04:	1dbb      	adds	r3, r7, #6
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f002 f8fb 	bl	8003004 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f000 fb6a 	bl	8001504 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e30:	4bc7      	ldr	r3, [pc, #796]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	220c      	movs	r2, #12
 8000e36:	4013      	ands	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e3a:	4bc5      	ldr	r3, [pc, #788]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <HAL_RCC_OscConfig+0x36>
 8000e50:	e07d      	b.n	8000f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d007      	beq.n	8000e68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b0c      	cmp	r3, #12
 8000e5c:	d112      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d10d      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e68:	4bb9      	ldr	r3, [pc, #740]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	4013      	ands	r3, r2
 8000e72:	d100      	bne.n	8000e76 <HAL_RCC_OscConfig+0x5a>
 8000e74:	e06a      	b.n	8000f4c <HAL_RCC_OscConfig+0x130>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d166      	bne.n	8000f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f000 fb40 	bl	8001504 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d107      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x84>
 8000e90:	4baf      	ldr	r3, [pc, #700]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4bae      	ldr	r3, [pc, #696]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0249      	lsls	r1, r1, #9
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e027      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	23a0      	movs	r3, #160	; 0xa0
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d10e      	bne.n	8000eca <HAL_RCC_OscConfig+0xae>
 8000eac:	4ba8      	ldr	r3, [pc, #672]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4ba7      	ldr	r3, [pc, #668]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	02c9      	lsls	r1, r1, #11
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	4ba5      	ldr	r3, [pc, #660]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4ba4      	ldr	r3, [pc, #656]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0249      	lsls	r1, r1, #9
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e012      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000eca:	4ba1      	ldr	r3, [pc, #644]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4ba0      	ldr	r3, [pc, #640]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ed0:	49a0      	ldr	r1, [pc, #640]	; (8001154 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	4b9e      	ldr	r3, [pc, #632]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4b9a      	ldr	r3, [pc, #616]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b99      	ldr	r3, [pc, #612]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000eea:	499b      	ldr	r1, [pc, #620]	; (8001158 <HAL_RCC_OscConfig+0x33c>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d014      	beq.n	8000f22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff faf4 	bl	80004e4 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f02:	f7ff faef 	bl	80004e4 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b64      	cmp	r3, #100	; 0x64
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e2f7      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f14:	4b8e      	ldr	r3, [pc, #568]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	029b      	lsls	r3, r3, #10
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0xe6>
 8000f20:	e015      	b.n	8000f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fadf 	bl	80004e4 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fada 	bl	80004e4 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e2e2      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3e:	4b84      	ldr	r3, [pc, #528]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	029b      	lsls	r3, r3, #10
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x110>
 8000f4a:	e000      	b.n	8000f4e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x13e>
 8000f58:	e098      	b.n	800108c <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	2220      	movs	r2, #32
 8000f64:	4013      	ands	r3, r2
 8000f66:	d009      	beq.n	8000f7c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f68:	4b79      	ldr	r3, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b78      	ldr	r3, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f6e:	2120      	movs	r1, #32
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2220      	movs	r2, #32
 8000f78:	4393      	bics	r3, r2
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d13d      	bne.n	8001004 <HAL_RCC_OscConfig+0x1e8>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d13a      	bne.n	8001004 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f8e:	4b70      	ldr	r3, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d004      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x186>
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e2b0      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a6d      	ldr	r2, [pc, #436]	; (800115c <HAL_RCC_OscConfig+0x340>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	021a      	lsls	r2, r3, #8
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fb8:	4b65      	ldr	r3, [pc, #404]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	4393      	bics	r3, r2
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	4b63      	ldr	r3, [pc, #396]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fca:	f000 fbcb 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8000fce:	0001      	movs	r1, r0
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	4013      	ands	r3, r2
 8000fda:	4a61      	ldr	r2, [pc, #388]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	000a      	movs	r2, r1
 8000fe0:	40da      	lsrs	r2, r3
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HAL_RCC_OscConfig+0x348>)
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000fe6:	2513      	movs	r5, #19
 8000fe8:	197c      	adds	r4, r7, r5
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fa44 	bl	8000478 <HAL_InitTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d047      	beq.n	800108c <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8000ffc:	2313      	movs	r3, #19
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	e27f      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	2b00      	cmp	r3, #0
 8001008:	d027      	beq.n	800105a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2209      	movs	r2, #9
 8001010:	4393      	bics	r3, r2
 8001012:	0019      	movs	r1, r3
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fa62 	bl	80004e4 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fa5d 	bl	80004e4 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e265      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2204      	movs	r2, #4
 800103e:	4013      	ands	r3, r2
 8001040:	d0f1      	beq.n	8001026 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a45      	ldr	r2, [pc, #276]	; (800115c <HAL_RCC_OscConfig+0x340>)
 8001048:	4013      	ands	r3, r2
 800104a:	0019      	movs	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	021a      	lsls	r2, r3, #8
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001054:	430a      	orrs	r2, r1
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	e018      	b.n	800108c <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001060:	2101      	movs	r1, #1
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fa3d 	bl	80004e4 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fa38 	bl	80004e4 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e240      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
 800108a:	d1f1      	bne.n	8001070 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2210      	movs	r2, #16
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x27c>
 8001096:	e09e      	b.n	80011d6 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d13f      	bne.n	800111e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d005      	beq.n	80010b6 <HAL_RCC_OscConfig+0x29a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e226      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <HAL_RCC_OscConfig+0x34c>)
 80010bc:	4013      	ands	r3, r2
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	0a19      	lsrs	r1, r3, #8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	061a      	lsls	r2, r3, #24
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	0b5b      	lsrs	r3, r3, #13
 80010e4:	3301      	adds	r3, #1
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0212      	lsls	r2, r2, #8
 80010ea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	210f      	movs	r1, #15
 80010f4:	400b      	ands	r3, r1
 80010f6:	491a      	ldr	r1, [pc, #104]	; (8001160 <HAL_RCC_OscConfig+0x344>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_RCC_OscConfig+0x348>)
 80010fe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001100:	2513      	movs	r5, #19
 8001102:	197c      	adds	r4, r7, r5
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff f9b7 	bl	8000478 <HAL_InitTick>
 800110a:	0003      	movs	r3, r0
 800110c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800110e:	197b      	adds	r3, r7, r5
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d05f      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001116:	2313      	movs	r3, #19
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	e1f2      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03d      	beq.n	80011a2 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0049      	lsls	r1, r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff f9d6 	bl	80004e4 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800113c:	e016      	b.n	800116c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800113e:	f7ff f9d1 	bl	80004e4 <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d90f      	bls.n	800116c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e1d9      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
 8001150:	40021000 	.word	0x40021000
 8001154:	fffeffff 	.word	0xfffeffff
 8001158:	fffbffff 	.word	0xfffbffff
 800115c:	ffffe0ff 	.word	0xffffe0ff
 8001160:	0800340c 	.word	0x0800340c
 8001164:	20000000 	.word	0x20000000
 8001168:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800116c:	4bca      	ldr	r3, [pc, #808]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d0e2      	beq.n	800113e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4bc7      	ldr	r3, [pc, #796]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4ac7      	ldr	r2, [pc, #796]	; (800149c <HAL_RCC_OscConfig+0x680>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	4bc4      	ldr	r3, [pc, #784]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001188:	430a      	orrs	r2, r1
 800118a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118c:	4bc2      	ldr	r3, [pc, #776]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	0a19      	lsrs	r1, r3, #8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	061a      	lsls	r2, r3, #24
 800119a:	4bbf      	ldr	r3, [pc, #764]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	e019      	b.n	80011d6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011a2:	4bbd      	ldr	r3, [pc, #756]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4bbc      	ldr	r3, [pc, #752]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011a8:	49bd      	ldr	r1, [pc, #756]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff f999 	bl	80004e4 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b8:	f7ff f994 	bl	80004e4 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e19c      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011ca:	4bb3      	ldr	r3, [pc, #716]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	4013      	ands	r3, r2
 80011de:	d036      	beq.n	800124e <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e8:	4bab      	ldr	r3, [pc, #684]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ec:	4baa      	ldr	r3, [pc, #680]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff f976 	bl	80004e4 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff f971 	bl	80004e4 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e179      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001210:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d0f1      	beq.n	80011fe <HAL_RCC_OscConfig+0x3e2>
 800121a:	e018      	b.n	800124e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121c:	4b9e      	ldr	r3, [pc, #632]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800121e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001220:	4b9d      	ldr	r3, [pc, #628]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff f95c 	bl	80004e4 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff f957 	bl	80004e4 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e15f      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001244:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d1f1      	bne.n	8001232 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x43e>
 8001258:	e0af      	b.n	80013ba <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2323      	movs	r3, #35	; 0x23
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001262:	4b8d      	ldr	r3, [pc, #564]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	055b      	lsls	r3, r3, #21
 800126a:	4013      	ands	r3, r2
 800126c:	d10a      	bne.n	8001284 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b8a      	ldr	r3, [pc, #552]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001272:	4b89      	ldr	r3, [pc, #548]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0549      	lsls	r1, r1, #21
 8001278:	430a      	orrs	r2, r1
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800127c:	2323      	movs	r3, #35	; 0x23
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	4b87      	ldr	r3, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4013      	ands	r3, r2
 800128e:	d11a      	bne.n	80012c6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001290:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b83      	ldr	r3, [pc, #524]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0049      	lsls	r1, r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff f921 	bl	80004e4 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a8:	f7ff f91c 	bl	80004e4 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e124      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d107      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4c6>
 80012d2:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b70      	ldr	r3, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0049      	lsls	r1, r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	651a      	str	r2, [r3, #80]	; 0x50
 80012e0:	e031      	b.n	8001346 <HAL_RCC_OscConfig+0x52a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x4e8>
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	496b      	ldr	r1, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	496a      	ldr	r1, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x68c>)
 80012fe:	400a      	ands	r2, r1
 8001300:	651a      	str	r2, [r3, #80]	; 0x50
 8001302:	e020      	b.n	8001346 <HAL_RCC_OscConfig+0x52a>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	429a      	cmp	r2, r3
 800130e:	d10e      	bne.n	800132e <HAL_RCC_OscConfig+0x512>
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001314:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	00c9      	lsls	r1, r1, #3
 800131a:	430a      	orrs	r2, r1
 800131c:	651a      	str	r2, [r3, #80]	; 0x50
 800131e:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0049      	lsls	r1, r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	651a      	str	r2, [r3, #80]	; 0x50
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0x52a>
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001334:	495a      	ldr	r1, [pc, #360]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 8001336:	400a      	ands	r2, r1
 8001338:	651a      	str	r2, [r3, #80]	; 0x50
 800133a:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800133c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001340:	4959      	ldr	r1, [pc, #356]	; (80014a8 <HAL_RCC_OscConfig+0x68c>)
 8001342:	400a      	ands	r2, r1
 8001344:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d015      	beq.n	800137a <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff f8c9 	bl	80004e4 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001356:	e009      	b.n	800136c <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff f8c4 	bl	80004e4 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x690>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0cb      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800136c:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800136e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d0ef      	beq.n	8001358 <HAL_RCC_OscConfig+0x53c>
 8001378:	e014      	b.n	80013a4 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff f8b3 	bl	80004e4 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001382:	e009      	b.n	8001398 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff f8ae 	bl	80004e4 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_RCC_OscConfig+0x690>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0b5      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800139a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1ef      	bne.n	8001384 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013a4:	2323      	movs	r3, #35	; 0x23
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	493e      	ldr	r1, [pc, #248]	; (80014b0 <HAL_RCC_OscConfig+0x694>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5a8>
 80013c2:	e09e      	b.n	8001502 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d100      	bne.n	80013cc <HAL_RCC_OscConfig+0x5b0>
 80013ca:	e077      	b.n	80014bc <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d145      	bne.n	8001460 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013da:	4936      	ldr	r1, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x698>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff f880 	bl	80004e4 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f87b 	bl	80004e4 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e083      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	049b      	lsls	r3, r3, #18
 8001404:	4013      	ands	r3, r2
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x69c>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	431a      	orrs	r2, r3
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0449      	lsls	r1, r1, #17
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff f855 	bl	80004e4 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff f850 	bl	80004e4 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e058      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x624>
 800145e:	e050      	b.n	8001502 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001466:	4913      	ldr	r1, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x698>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff f83a 	bl	80004e4 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff f835 	bl	80004e4 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e03d      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	049b      	lsls	r3, r3, #18
 8001490:	4013      	ands	r3, r2
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x65a>
 8001494:	e035      	b.n	8001502 <HAL_RCC_OscConfig+0x6e6>
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	ffff1fff 	.word	0xffff1fff
 80014a0:	fffffeff 	.word	0xfffffeff
 80014a4:	40007000 	.word	0x40007000
 80014a8:	fffffbff 	.word	0xfffffbff
 80014ac:	00001388 	.word	0x00001388
 80014b0:	efffffff 	.word	0xefffffff
 80014b4:	feffffff 	.word	0xfeffffff
 80014b8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RCC_OscConfig+0x6f0>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10f      	bne.n	80014fe <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	23f0      	movs	r3, #240	; 0xf0
 80014e2:	039b      	lsls	r3, r3, #14
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b00a      	add	sp, #40	; 0x28
 800150a:	bdb0      	pop	{r4, r5, r7, pc}
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e10d      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001524:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d911      	bls.n	8001556 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4393      	bics	r3, r2
 800153a:	0019      	movs	r1, r3
 800153c:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001544:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4013      	ands	r3, r2
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0f4      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d009      	beq.n	8001574 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b7a      	ldr	r3, [pc, #488]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	22f0      	movs	r2, #240	; 0xf0
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	4b77      	ldr	r3, [pc, #476]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	4013      	ands	r3, r2
 800157c:	d100      	bne.n	8001580 <HAL_RCC_ClockConfig+0x70>
 800157e:	e089      	b.n	8001694 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d107      	bne.n	8001598 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001588:	4b70      	ldr	r3, [pc, #448]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d120      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d3      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d107      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	049b      	lsls	r3, r3, #18
 80015a8:	4013      	ands	r3, r2
 80015aa:	d114      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0c7      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b8:	4b64      	ldr	r3, [pc, #400]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2204      	movs	r2, #4
 80015be:	4013      	ands	r3, r2
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0bc      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015c6:	4b61      	ldr	r3, [pc, #388]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4013      	ands	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0b4      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2203      	movs	r2, #3
 80015dc:	4393      	bics	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ea:	f7fe ff7b 	bl	80004e4 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d111      	bne.n	800161e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015fa:	e009      	b.n	8001610 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7fe ff72 	bl	80004e4 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x240>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e097      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001610:	4b4e      	ldr	r3, [pc, #312]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	220c      	movs	r2, #12
 8001616:	4013      	ands	r3, r2
 8001618:	2b08      	cmp	r3, #8
 800161a:	d1ef      	bne.n	80015fc <HAL_RCC_ClockConfig+0xec>
 800161c:	e03a      	b.n	8001694 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d111      	bne.n	800164a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001626:	e009      	b.n	800163c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7fe ff5c 	bl	80004e4 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_RCC_ClockConfig+0x240>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e081      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d1ef      	bne.n	8001628 <HAL_RCC_ClockConfig+0x118>
 8001648:	e024      	b.n	8001694 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11b      	bne.n	800168a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	e009      	b.n	8001668 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7fe ff46 	bl	80004e4 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4a3c      	ldr	r2, [pc, #240]	; (8001750 <HAL_RCC_ClockConfig+0x240>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e06b      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	220c      	movs	r2, #12
 800166e:	4013      	ands	r3, r2
 8001670:	2b04      	cmp	r3, #4
 8001672:	d1ef      	bne.n	8001654 <HAL_RCC_ClockConfig+0x144>
 8001674:	e00e      	b.n	8001694 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001676:	f7fe ff35 	bl	80004e4 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_RCC_ClockConfig+0x240>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e05a      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	220c      	movs	r2, #12
 8001690:	4013      	ands	r3, r2
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d211      	bcs.n	80016c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4393      	bics	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_ClockConfig+0x238>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e03c      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d009      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_RCC_ClockConfig+0x244>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2208      	movs	r2, #8
 80016ea:	4013      	ands	r3, r2
 80016ec:	d00a      	beq.n	8001704 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_RCC_ClockConfig+0x248>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	00da      	lsls	r2, r3, #3
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001704:	f000 f82e 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001708:	0001      	movs	r1, r0
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_ClockConfig+0x23c>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	220f      	movs	r2, #15
 8001712:	4013      	ands	r3, r2
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_RCC_ClockConfig+0x24c>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	000a      	movs	r2, r1
 800171a:	40da      	lsrs	r2, r3
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_ClockConfig+0x250>)
 800171e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001720:	250b      	movs	r5, #11
 8001722:	197c      	adds	r4, r7, r5
 8001724:	2000      	movs	r0, #0
 8001726:	f7fe fea7 	bl	8000478 <HAL_InitTick>
 800172a:	0003      	movs	r3, r0
 800172c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800172e:	197b      	adds	r3, r7, r5
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001736:	230b      	movs	r3, #11
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	e000      	b.n	8001740 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bdb0      	pop	{r4, r5, r7, pc}
 8001748:	40022000 	.word	0x40022000
 800174c:	40021000 	.word	0x40021000
 8001750:	00001388 	.word	0x00001388
 8001754:	fffff8ff 	.word	0xfffff8ff
 8001758:	ffffc7ff 	.word	0xffffc7ff
 800175c:	0800340c 	.word	0x0800340c
 8001760:	20000000 	.word	0x20000000

08001764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_RCC_GetSysClockFreq+0xf4>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b08      	cmp	r3, #8
 8001778:	d00e      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d00f      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x3a>
 800177e:	2b04      	cmp	r3, #4
 8001780:	d157      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001782:	4b35      	ldr	r3, [pc, #212]	; (8001858 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2210      	movs	r2, #16
 8001788:	4013      	ands	r3, r2
 800178a:	d002      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 800178e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001790:	e05d      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001794:	613b      	str	r3, [r7, #16]
      break;
 8001796:	e05a      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_RCC_GetSysClockFreq+0x100>)
 800179a:	613b      	str	r3, [r7, #16]
      break;
 800179c:	e057      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	220f      	movs	r2, #15
 80017a4:	4013      	ands	r3, r2
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_RCC_GetSysClockFreq+0x104>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	0d9b      	lsrs	r3, r3, #22
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	3301      	adds	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	4013      	ands	r3, r2
 80017c2:	d00f      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	000a      	movs	r2, r1
 80017c8:	0152      	lsls	r2, r2, #5
 80017ca:	1a52      	subs	r2, r2, r1
 80017cc:	0193      	lsls	r3, r2, #6
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	185b      	adds	r3, r3, r1
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7fe fc95 	bl	8000108 <__udivsi3>
 80017de:	0003      	movs	r3, r0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e023      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2210      	movs	r2, #16
 80017ea:	4013      	ands	r3, r2
 80017ec:	d00f      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	000a      	movs	r2, r1
 80017f2:	0152      	lsls	r2, r2, #5
 80017f4:	1a52      	subs	r2, r2, r1
 80017f6:	0193      	lsls	r3, r2, #6
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	185b      	adds	r3, r3, r1
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	0018      	movs	r0, r3
 8001804:	f7fe fc80 	bl	8000108 <__udivsi3>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00e      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	000a      	movs	r2, r1
 8001812:	0152      	lsls	r2, r2, #5
 8001814:	1a52      	subs	r2, r2, r1
 8001816:	0193      	lsls	r3, r2, #6
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	185b      	adds	r3, r3, r1
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe fc70 	bl	8000108 <__udivsi3>
 8001828:	0003      	movs	r3, r0
 800182a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	e00d      	b.n	800184e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0b5b      	lsrs	r3, r3, #13
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0212      	lsls	r2, r2, #8
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      break;
 800184c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800184e:	693b      	ldr	r3, [r7, #16]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b006      	add	sp, #24
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	003d0900 	.word	0x003d0900
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200
 8001868:	08003424 	.word	0x08003424

0800186c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_RCC_GetHCLKFreq+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20000000 	.word	0x20000000

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff2 	bl	800186c <HAL_RCC_GetHCLKFreq>
 8001888:	0001      	movs	r1, r0
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	2207      	movs	r2, #7
 8001892:	4013      	ands	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	40d9      	lsrs	r1, r3
 800189a:	000b      	movs	r3, r1
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	40021000 	.word	0x40021000
 80018a8:	0800341c 	.word	0x0800341c

080018ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b0:	f7ff ffdc 	bl	800186c <HAL_RCC_GetHCLKFreq>
 80018b4:	0001      	movs	r1, r0
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	0adb      	lsrs	r3, r3, #11
 80018bc:	2207      	movs	r2, #7
 80018be:	4013      	ands	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	40d9      	lsrs	r1, r3
 80018c6:	000b      	movs	r3, r1
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000
 80018d4:	0800341c 	.word	0x0800341c

080018d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2220      	movs	r2, #32
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x14>
 80018ea:	e0c7      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2317      	movs	r3, #23
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f4:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80018f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	055b      	lsls	r3, r3, #21
 80018fc:	4013      	ands	r3, r2
 80018fe:	d10a      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	4b7f      	ldr	r3, [pc, #508]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001904:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0549      	lsls	r1, r1, #21
 800190a:	430a      	orrs	r2, r1
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800190e:	2317      	movs	r3, #23
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4013      	ands	r3, r2
 8001920:	d11a      	bne.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0049      	lsls	r1, r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001930:	f7fe fdd8 	bl	80004e4 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7fe fdd3 	bl	80004e4 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0d4      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001958:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	039b      	lsls	r3, r3, #14
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	039b      	lsls	r3, r3, #14
 800196c:	4013      	ands	r3, r2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d013      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	401a      	ands	r2, r3
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	429a      	cmp	r2, r3
 8001984:	d10a      	bne.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001986:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	401a      	ands	r2, r3
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	429a      	cmp	r2, r3
 8001996:	d101      	bne.n	800199c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0ac      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800199e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a0:	23c0      	movs	r3, #192	; 0xc0
 80019a2:	029b      	lsls	r3, r3, #10
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03b      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	029b      	lsls	r3, r3, #10
 80019b6:	4013      	ands	r3, r2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d033      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	4013      	ands	r3, r2
 80019c6:	d02e      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d2:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0309      	lsls	r1, r1, #12
 80019dc:	430a      	orrs	r2, r1
 80019de:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019e6:	4949      	ldr	r1, [pc, #292]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80019ec:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d014      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe fd72 	bl	80004e4 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a04:	e009      	b.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe fd6d 	bl	80004e4 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e06d      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0ef      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	401a      	ands	r2, r3
 8001a30:	23c0      	movs	r3, #192	; 0xc0
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	23c0      	movs	r3, #192	; 0xc0
 8001a48:	039b      	lsls	r3, r3, #14
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	401a      	ands	r2, r3
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a66:	2317      	movs	r3, #23
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a76:	4928      	ldr	r1, [pc, #160]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d009      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2208      	movs	r2, #8
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b006      	add	sp, #24
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	fffcffff 	.word	0xfffcffff
 8001b0c:	fff7ffff 	.word	0xfff7ffff
 8001b10:	00001388 	.word	0x00001388
 8001b14:	ffcfffff 	.word	0xffcfffff
 8001b18:	efffffff 	.word	0xefffffff
 8001b1c:	fffff3ff 	.word	0xfffff3ff
 8001b20:	ffffcfff 	.word	0xffffcfff
 8001b24:	fff3ffff 	.word	0xfff3ffff

08001b28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e08e      	b.n	8001c58 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2221      	movs	r2, #33	; 0x21
 8001b3e:	5c9b      	ldrb	r3, [r3, r2]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f001 fabb 	bl	80030cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2221      	movs	r2, #33	; 0x21
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	22ca      	movs	r2, #202	; 0xca
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2253      	movs	r2, #83	; 0x53
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f89e 	bl	8001cb2 <RTC_EnterInitMode>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	22ff      	movs	r2, #255	; 0xff
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2221      	movs	r2, #33	; 0x21
 8001b86:	2104      	movs	r1, #4
 8001b88:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e064      	b.n	8001c58 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4931      	ldr	r1, [pc, #196]	; (8001c60 <HAL_RTC_Init+0x138>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68d2      	ldr	r2, [r2, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	438a      	bics	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d113      	bne.n	8001c46 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 f81f 	bl	8001c64 <HAL_RTC_WaitForSynchro>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d00d      	beq.n	8001c46 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	2104      	movs	r1, #4
 8001c38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	2100      	movs	r1, #0
 8001c40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e008      	b.n	8001c58 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2221      	movs	r2, #33	; 0x21
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c56:	2300      	movs	r3, #0
  }
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	ff8fffbf 	.word	0xff8fffbf

08001c64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	21a0      	movs	r1, #160	; 0xa0
 8001c78:	438a      	bics	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001c7c:	f7fe fc32 	bl	80004e4 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c86:	f7fe fc2d 	bl	80004e4 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	23fa      	movs	r3, #250	; 0xfa
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d901      	bls.n	8001c9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e006      	b.n	8001caa <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d11a      	bne.n	8001cfc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4252      	negs	r2, r2
 8001cce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001cd0:	f7fe fc08 	bl	80004e4 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001cd8:	e00a      	b.n	8001cf0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001cda:	f7fe fc03 	bl	80004e4 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad2      	subs	r2, r2, r3
 8001ce4:	23fa      	movs	r3, #250	; 0xfa
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d901      	bls.n	8001cf0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e006      	b.n	8001cfe <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0ee      	beq.n	8001cda <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e01e      	b.n	8001d56 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2239      	movs	r2, #57	; 0x39
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2238      	movs	r2, #56	; 0x38
 8001d28:	2100      	movs	r1, #0
 8001d2a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f001 f9e4 	bl	80030fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2239      	movs	r2, #57	; 0x39
 8001d38:	2102      	movs	r1, #2
 8001d3a:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	0019      	movs	r1, r3
 8001d46:	0010      	movs	r0, r2
 8001d48:	f000 f8e4 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2239      	movs	r2, #57	; 0x39
 8001d50:	2101      	movs	r1, #1
 8001d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fa27 	bl	80021c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d007      	beq.n	8001d98 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2238      	movs	r2, #56	; 0x38
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e0a4      	b.n	8001f08 <HAL_TIM_PWM_ConfigChannel+0x164>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2238      	movs	r2, #56	; 0x38
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2239      	movs	r2, #57	; 0x39
 8001dca:	2102      	movs	r1, #2
 8001dcc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d029      	beq.n	8001e28 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001dd4:	d802      	bhi.n	8001ddc <HAL_TIM_PWM_ConfigChannel+0x38>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001dda:	e08c      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d046      	beq.n	8001e6e <HAL_TIM_PWM_ConfigChannel+0xca>
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d065      	beq.n	8001eb0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8001de4:	e087      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f8e4 	bl	8001fbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2108      	movs	r1, #8
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2104      	movs	r1, #4
 8001e10:	438a      	bics	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6999      	ldr	r1, [r3, #24]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	619a      	str	r2, [r3, #24]
      break;
 8001e26:	e066      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f8ff 	bl	8002034 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0109      	lsls	r1, r1, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	492f      	ldr	r1, [pc, #188]	; (8001f10 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6999      	ldr	r1, [r3, #24]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
      break;
 8001e6c:	e043      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f91e 	bl	80020b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2108      	movs	r1, #8
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2104      	movs	r1, #4
 8001e98:	438a      	bics	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69d9      	ldr	r1, [r3, #28]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	61da      	str	r2, [r3, #28]
      break;
 8001eae:	e022      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f93d 	bl	8002138 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	0109      	lsls	r1, r1, #4
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	490d      	ldr	r1, [pc, #52]	; (8001f10 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69d9      	ldr	r1, [r3, #28]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	021a      	lsls	r2, r3, #8
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      break;
 8001ef4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2239      	movs	r2, #57	; 0x39
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2238      	movs	r2, #56	; 0x38
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	fffffbff 	.word	0xfffffbff

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d007      	beq.n	8001f3e <TIM_Base_SetConfig+0x2a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <TIM_Base_SetConfig+0x9c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <TIM_Base_SetConfig+0x2a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <TIM_Base_SetConfig+0xa0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2270      	movs	r2, #112	; 0x70
 8001f42:	4393      	bics	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	05db      	lsls	r3, r3, #23
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0x56>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <TIM_Base_SetConfig+0x9c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x56>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <TIM_Base_SetConfig+0xa0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <TIM_Base_SetConfig+0xa4>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	4393      	bics	r3, r2
 8001f82:	001a      	movs	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	615a      	str	r2, [r3, #20]
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	fffffcff 	.word	0xfffffcff

08001fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4393      	bics	r3, r2
 8001fce:	001a      	movs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2270      	movs	r2, #112	; 0x70
 8001fea:	4393      	bics	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2202      	movs	r2, #2
 8002004:	4393      	bics	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	621a      	str	r2, [r3, #32]
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b006      	add	sp, #24
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2210      	movs	r2, #16
 8002044:	4393      	bics	r3, r2
 8002046:	001a      	movs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <TIM_OC2_SetConfig+0x7c>)
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <TIM_OC2_SetConfig+0x80>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2220      	movs	r2, #32
 800207e:	4393      	bics	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	621a      	str	r2, [r3, #32]
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	ffff8fff 	.word	0xffff8fff
 80020b4:	fffffcff 	.word	0xfffffcff

080020b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <TIM_OC3_SetConfig+0x78>)
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2270      	movs	r2, #112	; 0x70
 80020e4:	4393      	bics	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4393      	bics	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <TIM_OC3_SetConfig+0x7c>)
 80020fe:	4013      	ands	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b006      	add	sp, #24
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fffffeff 	.word	0xfffffeff
 8002134:	fffffdff 	.word	0xfffffdff

08002138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <TIM_OC4_SetConfig+0x7c>)
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <TIM_OC4_SetConfig+0x80>)
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <TIM_OC4_SetConfig+0x84>)
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <TIM_OC4_SetConfig+0x88>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	031b      	lsls	r3, r3, #12
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b006      	add	sp, #24
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	ffffefff 	.word	0xffffefff
 80021b8:	ffff8fff 	.word	0xffff8fff
 80021bc:	fffffcff 	.word	0xfffffcff
 80021c0:	ffffdfff 	.word	0xffffdfff

080021c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	221f      	movs	r2, #31
 80021d4:	4013      	ands	r3, r2
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	43d2      	mvns	r2, r2
 80021e6:	401a      	ands	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	211f      	movs	r1, #31
 80021f4:	400b      	ands	r3, r1
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4099      	lsls	r1, r3
 80021fa:	000b      	movs	r3, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2238      	movs	r2, #56	; 0x38
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800221e:	2302      	movs	r3, #2
 8002220:	e032      	b.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2238      	movs	r2, #56	; 0x38
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2239      	movs	r2, #57	; 0x39
 800222e:	2102      	movs	r1, #2
 8002230:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2270      	movs	r2, #112	; 0x70
 8002246:	4393      	bics	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	4393      	bics	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4313      	orrs	r3, r2
 8002264:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2239      	movs	r2, #57	; 0x39
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e044      	b.n	800232c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2270      	movs	r2, #112	; 0x70
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 ff73 	bl	80031a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2224      	movs	r2, #36	; 0x24
 80022be:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f830 	bl	8002338 <UART_SetConfig>
 80022d8:	0003      	movs	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e024      	b.n	800232c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fafd 	bl	80028ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	490d      	ldr	r1, [pc, #52]	; (8002334 <HAL_UART_Init+0xa4>)
 80022fe:	400a      	ands	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	212a      	movs	r1, #42	; 0x2a
 800230e:	438a      	bics	r2, r1
 8002310:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fb95 	bl	8002a54 <UART_CheckIdleState>
 800232a:	0003      	movs	r3, r0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}
 8002334:	ffffb7ff 	.word	0xffffb7ff

08002338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002340:	231b      	movs	r3, #27
 8002342:	2218      	movs	r2, #24
 8002344:	4694      	mov	ip, r2
 8002346:	44bc      	add	ip, r7
 8002348:	4463      	add	r3, ip
 800234a:	2210      	movs	r2, #16
 800234c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002352:	2313      	movs	r3, #19
 8002354:	2218      	movs	r2, #24
 8002356:	4694      	mov	ip, r2
 8002358:	44bc      	add	ip, r7
 800235a:	4463      	add	r3, ip
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	431a      	orrs	r2, r3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4313      	orrs	r3, r2
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4ace      	ldr	r2, [pc, #824]	; (80026bc <UART_SetConfig+0x384>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4ac9      	ldr	r2, [pc, #804]	; (80026c0 <UART_SetConfig+0x388>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4ac3      	ldr	r2, [pc, #780]	; (80026c4 <UART_SetConfig+0x38c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c0:	4313      	orrs	r3, r2
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4abf      	ldr	r2, [pc, #764]	; (80026c8 <UART_SetConfig+0x390>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4abb      	ldr	r2, [pc, #748]	; (80026cc <UART_SetConfig+0x394>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d137      	bne.n	8002454 <UART_SetConfig+0x11c>
 80023e4:	4bba      	ldr	r3, [pc, #744]	; (80026d0 <UART_SetConfig+0x398>)
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	220c      	movs	r2, #12
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d018      	beq.n	8002422 <UART_SetConfig+0xea>
 80023f0:	d802      	bhi.n	80023f8 <UART_SetConfig+0xc0>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <UART_SetConfig+0xca>
 80023f6:	e024      	b.n	8002442 <UART_SetConfig+0x10a>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d00a      	beq.n	8002412 <UART_SetConfig+0xda>
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d018      	beq.n	8002432 <UART_SetConfig+0xfa>
 8002400:	e01f      	b.n	8002442 <UART_SetConfig+0x10a>
 8002402:	231b      	movs	r3, #27
 8002404:	2218      	movs	r2, #24
 8002406:	4694      	mov	ip, r2
 8002408:	44bc      	add	ip, r7
 800240a:	4463      	add	r3, ip
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e06e      	b.n	80024f0 <UART_SetConfig+0x1b8>
 8002412:	231b      	movs	r3, #27
 8002414:	2218      	movs	r2, #24
 8002416:	4694      	mov	ip, r2
 8002418:	44bc      	add	ip, r7
 800241a:	4463      	add	r3, ip
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e066      	b.n	80024f0 <UART_SetConfig+0x1b8>
 8002422:	231b      	movs	r3, #27
 8002424:	2218      	movs	r2, #24
 8002426:	4694      	mov	ip, r2
 8002428:	44bc      	add	ip, r7
 800242a:	4463      	add	r3, ip
 800242c:	2204      	movs	r2, #4
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e05e      	b.n	80024f0 <UART_SetConfig+0x1b8>
 8002432:	231b      	movs	r3, #27
 8002434:	2218      	movs	r2, #24
 8002436:	4694      	mov	ip, r2
 8002438:	44bc      	add	ip, r7
 800243a:	4463      	add	r3, ip
 800243c:	2208      	movs	r2, #8
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e056      	b.n	80024f0 <UART_SetConfig+0x1b8>
 8002442:	231b      	movs	r3, #27
 8002444:	2218      	movs	r2, #24
 8002446:	4694      	mov	ip, r2
 8002448:	44bc      	add	ip, r7
 800244a:	4463      	add	r3, ip
 800244c:	2210      	movs	r2, #16
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	e04d      	b.n	80024f0 <UART_SetConfig+0x1b8>
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a9a      	ldr	r2, [pc, #616]	; (80026c4 <UART_SetConfig+0x38c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d141      	bne.n	80024e2 <UART_SetConfig+0x1aa>
 800245e:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <UART_SetConfig+0x398>)
 8002460:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002462:	23c0      	movs	r3, #192	; 0xc0
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4013      	ands	r3, r2
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	4293      	cmp	r3, r2
 800246e:	d01f      	beq.n	80024b0 <UART_SetConfig+0x178>
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	00d2      	lsls	r2, r2, #3
 8002474:	4293      	cmp	r3, r2
 8002476:	d802      	bhi.n	800247e <UART_SetConfig+0x146>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <UART_SetConfig+0x158>
 800247c:	e028      	b.n	80024d0 <UART_SetConfig+0x198>
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	4293      	cmp	r3, r2
 8002484:	d00c      	beq.n	80024a0 <UART_SetConfig+0x168>
 8002486:	22c0      	movs	r2, #192	; 0xc0
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4293      	cmp	r3, r2
 800248c:	d018      	beq.n	80024c0 <UART_SetConfig+0x188>
 800248e:	e01f      	b.n	80024d0 <UART_SetConfig+0x198>
 8002490:	231b      	movs	r3, #27
 8002492:	2218      	movs	r2, #24
 8002494:	4694      	mov	ip, r2
 8002496:	44bc      	add	ip, r7
 8002498:	4463      	add	r3, ip
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e027      	b.n	80024f0 <UART_SetConfig+0x1b8>
 80024a0:	231b      	movs	r3, #27
 80024a2:	2218      	movs	r2, #24
 80024a4:	4694      	mov	ip, r2
 80024a6:	44bc      	add	ip, r7
 80024a8:	4463      	add	r3, ip
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e01f      	b.n	80024f0 <UART_SetConfig+0x1b8>
 80024b0:	231b      	movs	r3, #27
 80024b2:	2218      	movs	r2, #24
 80024b4:	4694      	mov	ip, r2
 80024b6:	44bc      	add	ip, r7
 80024b8:	4463      	add	r3, ip
 80024ba:	2204      	movs	r2, #4
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e017      	b.n	80024f0 <UART_SetConfig+0x1b8>
 80024c0:	231b      	movs	r3, #27
 80024c2:	2218      	movs	r2, #24
 80024c4:	4694      	mov	ip, r2
 80024c6:	44bc      	add	ip, r7
 80024c8:	4463      	add	r3, ip
 80024ca:	2208      	movs	r2, #8
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e00f      	b.n	80024f0 <UART_SetConfig+0x1b8>
 80024d0:	231b      	movs	r3, #27
 80024d2:	2218      	movs	r2, #24
 80024d4:	4694      	mov	ip, r2
 80024d6:	44bc      	add	ip, r7
 80024d8:	4463      	add	r3, ip
 80024da:	2210      	movs	r2, #16
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	e006      	b.n	80024f0 <UART_SetConfig+0x1b8>
 80024e2:	231b      	movs	r3, #27
 80024e4:	2218      	movs	r2, #24
 80024e6:	4694      	mov	ip, r2
 80024e8:	44bc      	add	ip, r7
 80024ea:	4463      	add	r3, ip
 80024ec:	2210      	movs	r2, #16
 80024ee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a73      	ldr	r2, [pc, #460]	; (80026c4 <UART_SetConfig+0x38c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d000      	beq.n	80024fc <UART_SetConfig+0x1c4>
 80024fa:	e083      	b.n	8002604 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024fc:	231b      	movs	r3, #27
 80024fe:	2218      	movs	r2, #24
 8002500:	4694      	mov	ip, r2
 8002502:	44bc      	add	ip, r7
 8002504:	4463      	add	r3, ip
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d00d      	beq.n	8002528 <UART_SetConfig+0x1f0>
 800250c:	dc02      	bgt.n	8002514 <UART_SetConfig+0x1dc>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <UART_SetConfig+0x1e6>
 8002512:	e01d      	b.n	8002550 <UART_SetConfig+0x218>
 8002514:	2b04      	cmp	r3, #4
 8002516:	d012      	beq.n	800253e <UART_SetConfig+0x206>
 8002518:	2b08      	cmp	r3, #8
 800251a:	d015      	beq.n	8002548 <UART_SetConfig+0x210>
 800251c:	e018      	b.n	8002550 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800251e:	f7ff f9af 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8002522:	0003      	movs	r3, r0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002526:	e01b      	b.n	8002560 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002528:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <UART_SetConfig+0x398>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2210      	movs	r2, #16
 800252e:	4013      	ands	r3, r2
 8002530:	d002      	beq.n	8002538 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002532:	4b68      	ldr	r3, [pc, #416]	; (80026d4 <UART_SetConfig+0x39c>)
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002536:	e013      	b.n	8002560 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002538:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <UART_SetConfig+0x3a0>)
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800253c:	e010      	b.n	8002560 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800253e:	f7ff f911 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8002542:	0003      	movs	r3, r0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002546:	e00b      	b.n	8002560 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800254e:	e007      	b.n	8002560 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002550:	2313      	movs	r3, #19
 8002552:	2218      	movs	r2, #24
 8002554:	4694      	mov	ip, r2
 8002556:	44bc      	add	ip, r7
 8002558:	4463      	add	r3, ip
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
        break;
 800255e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d100      	bne.n	8002568 <UART_SetConfig+0x230>
 8002566:	e1a7      	b.n	80028b8 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	0013      	movs	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	189b      	adds	r3, r3, r2
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	429a      	cmp	r2, r3
 8002576:	d305      	bcc.n	8002584 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	429a      	cmp	r2, r3
 8002582:	d907      	bls.n	8002594 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8002584:	2313      	movs	r3, #19
 8002586:	2218      	movs	r2, #24
 8002588:	4694      	mov	ip, r2
 800258a:	44bc      	add	ip, r7
 800258c:	4463      	add	r3, ip
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e191      	b.n	80028b8 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	000b      	movs	r3, r1
 80025a2:	0e1b      	lsrs	r3, r3, #24
 80025a4:	0010      	movs	r0, r2
 80025a6:	0205      	lsls	r5, r0, #8
 80025a8:	431d      	orrs	r5, r3
 80025aa:	000b      	movs	r3, r1
 80025ac:	021c      	lsls	r4, r3, #8
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	1900      	adds	r0, r0, r4
 80025c0:	4169      	adcs	r1, r5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f7fd fe26 	bl	8000220 <__aeabi_uldivmod>
 80025d4:	0003      	movs	r3, r0
 80025d6:	000c      	movs	r4, r1
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	4a3f      	ldr	r2, [pc, #252]	; (80026dc <UART_SetConfig+0x3a4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d908      	bls.n	80025f4 <UART_SetConfig+0x2bc>
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	4a3e      	ldr	r2, [pc, #248]	; (80026e0 <UART_SetConfig+0x3a8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d804      	bhi.n	80025f4 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	e161      	b.n	80028b8 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80025f4:	2313      	movs	r3, #19
 80025f6:	2218      	movs	r2, #24
 80025f8:	4694      	mov	ip, r2
 80025fa:	44bc      	add	ip, r7
 80025fc:	4463      	add	r3, ip
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e159      	b.n	80028b8 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	429a      	cmp	r2, r3
 800260e:	d000      	beq.n	8002612 <UART_SetConfig+0x2da>
 8002610:	e0c4      	b.n	800279c <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8002612:	231b      	movs	r3, #27
 8002614:	2218      	movs	r2, #24
 8002616:	4694      	mov	ip, r2
 8002618:	44bc      	add	ip, r7
 800261a:	4463      	add	r3, ip
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d900      	bls.n	8002624 <UART_SetConfig+0x2ec>
 8002622:	e087      	b.n	8002734 <UART_SetConfig+0x3fc>
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <UART_SetConfig+0x3ac>)
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800262e:	f7ff f927 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8002632:	0003      	movs	r3, r0
 8002634:	005a      	lsls	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	18d2      	adds	r2, r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f7fd fd5f 	bl	8000108 <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	b29b      	uxth	r3, r3
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002650:	e078      	b.n	8002744 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002652:	f7ff f92b 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002656:	0003      	movs	r3, r0
 8002658:	005a      	lsls	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	18d2      	adds	r2, r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f7fd fd4d 	bl	8000108 <__udivsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	b29b      	uxth	r3, r3
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002674:	e066      	b.n	8002744 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <UART_SetConfig+0x398>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2210      	movs	r2, #16
 800267c:	4013      	ands	r3, r2
 800267e:	d00e      	beq.n	800269e <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <UART_SetConfig+0x3b0>)
 8002688:	189a      	adds	r2, r3, r2
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0019      	movs	r1, r3
 8002690:	0010      	movs	r0, r2
 8002692:	f7fd fd39 	bl	8000108 <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	b29b      	uxth	r3, r3
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800269c:	e052      	b.n	8002744 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <UART_SetConfig+0x3b4>)
 80026a6:	189a      	adds	r2, r3, r2
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0019      	movs	r1, r3
 80026ae:	0010      	movs	r0, r2
 80026b0:	f7fd fd2a 	bl	8000108 <__udivsi3>
 80026b4:	0003      	movs	r3, r0
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ba:	e043      	b.n	8002744 <UART_SetConfig+0x40c>
 80026bc:	efff69f3 	.word	0xefff69f3
 80026c0:	ffffcfff 	.word	0xffffcfff
 80026c4:	40004800 	.word	0x40004800
 80026c8:	fffff4ff 	.word	0xfffff4ff
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40021000 	.word	0x40021000
 80026d4:	003d0900 	.word	0x003d0900
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	000002ff 	.word	0x000002ff
 80026e0:	000fffff 	.word	0x000fffff
 80026e4:	080033c4 	.word	0x080033c4
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026f0:	f7ff f838 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 80026f4:	0003      	movs	r3, r0
 80026f6:	005a      	lsls	r2, r3, #1
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	18d2      	adds	r2, r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0019      	movs	r1, r3
 8002706:	0010      	movs	r0, r2
 8002708:	f7fd fcfe 	bl	8000108 <__udivsi3>
 800270c:	0003      	movs	r3, r0
 800270e:	b29b      	uxth	r3, r3
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002712:	e017      	b.n	8002744 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0252      	lsls	r2, r2, #9
 800271e:	189a      	adds	r2, r3, r2
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0019      	movs	r1, r3
 8002726:	0010      	movs	r0, r2
 8002728:	f7fd fcee 	bl	8000108 <__udivsi3>
 800272c:	0003      	movs	r3, r0
 800272e:	b29b      	uxth	r3, r3
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002732:	e007      	b.n	8002744 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002734:	2313      	movs	r3, #19
 8002736:	2218      	movs	r2, #24
 8002738:	4694      	mov	ip, r2
 800273a:	44bc      	add	ip, r7
 800273c:	4463      	add	r3, ip
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
        break;
 8002742:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d920      	bls.n	800278c <UART_SetConfig+0x454>
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <UART_SetConfig+0x5a0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d81c      	bhi.n	800278c <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	b29a      	uxth	r2, r3
 8002756:	200a      	movs	r0, #10
 8002758:	2418      	movs	r4, #24
 800275a:	193b      	adds	r3, r7, r4
 800275c:	181b      	adds	r3, r3, r0
 800275e:	210f      	movs	r1, #15
 8002760:	438a      	bics	r2, r1
 8002762:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	b299      	uxth	r1, r3
 8002770:	193b      	adds	r3, r7, r4
 8002772:	181b      	adds	r3, r3, r0
 8002774:	193a      	adds	r2, r7, r4
 8002776:	1812      	adds	r2, r2, r0
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	193a      	adds	r2, r7, r4
 8002784:	1812      	adds	r2, r2, r0
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	e095      	b.n	80028b8 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 800278c:	2313      	movs	r3, #19
 800278e:	2218      	movs	r2, #24
 8002790:	4694      	mov	ip, r2
 8002792:	44bc      	add	ip, r7
 8002794:	4463      	add	r3, ip
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e08d      	b.n	80028b8 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	4694      	mov	ip, r2
 80027a2:	44bc      	add	ip, r7
 80027a4:	4463      	add	r3, ip
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d86a      	bhi.n	8002882 <UART_SetConfig+0x54a>
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <UART_SetConfig+0x5a4>)
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027b6:	f7ff f863 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 80027ba:	0002      	movs	r2, r0
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027d6:	e05c      	b.n	8002892 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027d8:	f7ff f868 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80027dc:	0002      	movs	r2, r0
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	18d2      	adds	r2, r2, r3
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0019      	movs	r1, r3
 80027ec:	0010      	movs	r0, r2
 80027ee:	f7fd fc8b 	bl	8000108 <__udivsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027f8:	e04b      	b.n	8002892 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027fa:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <UART_SetConfig+0x5a8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2210      	movs	r2, #16
 8002800:	4013      	ands	r3, r2
 8002802:	d00e      	beq.n	8002822 <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	4a36      	ldr	r2, [pc, #216]	; (80028e4 <UART_SetConfig+0x5ac>)
 800280c:	189a      	adds	r2, r3, r2
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0019      	movs	r1, r3
 8002814:	0010      	movs	r0, r2
 8002816:	f7fd fc77 	bl	8000108 <__udivsi3>
 800281a:	0003      	movs	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002820:	e037      	b.n	8002892 <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <UART_SetConfig+0x5b0>)
 800282a:	189a      	adds	r2, r3, r2
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0019      	movs	r1, r3
 8002832:	0010      	movs	r0, r2
 8002834:	f7fd fc68 	bl	8000108 <__udivsi3>
 8002838:	0003      	movs	r3, r0
 800283a:	b29b      	uxth	r3, r3
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800283e:	e028      	b.n	8002892 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002840:	f7fe ff90 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8002844:	0002      	movs	r2, r0
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	18d2      	adds	r2, r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0019      	movs	r1, r3
 8002854:	0010      	movs	r0, r2
 8002856:	f7fd fc57 	bl	8000108 <__udivsi3>
 800285a:	0003      	movs	r3, r0
 800285c:	b29b      	uxth	r3, r3
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002860:	e017      	b.n	8002892 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0212      	lsls	r2, r2, #8
 800286c:	189a      	adds	r2, r3, r2
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0019      	movs	r1, r3
 8002874:	0010      	movs	r0, r2
 8002876:	f7fd fc47 	bl	8000108 <__udivsi3>
 800287a:	0003      	movs	r3, r0
 800287c:	b29b      	uxth	r3, r3
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002880:	e007      	b.n	8002892 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002882:	2313      	movs	r3, #19
 8002884:	2218      	movs	r2, #24
 8002886:	4694      	mov	ip, r2
 8002888:	44bc      	add	ip, r7
 800288a:	4463      	add	r3, ip
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
        break;
 8002890:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d908      	bls.n	80028aa <UART_SetConfig+0x572>
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <UART_SetConfig+0x5a0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d804      	bhi.n	80028aa <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e006      	b.n	80028b8 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 80028aa:	2313      	movs	r3, #19
 80028ac:	2218      	movs	r2, #24
 80028ae:	4694      	mov	ip, r2
 80028b0:	44bc      	add	ip, r7
 80028b2:	4463      	add	r3, ip
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2200      	movs	r2, #0
 80028bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2200      	movs	r2, #0
 80028c2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80028c4:	2313      	movs	r3, #19
 80028c6:	2218      	movs	r2, #24
 80028c8:	4694      	mov	ip, r2
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	781b      	ldrb	r3, [r3, #0]
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b00e      	add	sp, #56	; 0x38
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	0000ffff 	.word	0x0000ffff
 80028dc:	080033e8 	.word	0x080033e8
 80028e0:	40021000 	.word	0x40021000
 80028e4:	003d0900 	.word	0x003d0900
 80028e8:	00f42400 	.word	0x00f42400

080028ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <UART_AdvFeatureConfig+0x144>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	d00b      	beq.n	8002938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <UART_AdvFeatureConfig+0x148>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d00b      	beq.n	800295a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <UART_AdvFeatureConfig+0x14c>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2208      	movs	r2, #8
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <UART_AdvFeatureConfig+0x150>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2210      	movs	r2, #16
 8002982:	4013      	ands	r3, r2
 8002984:	d00b      	beq.n	800299e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <UART_AdvFeatureConfig+0x154>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <UART_AdvFeatureConfig+0x158>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	4013      	ands	r3, r2
 80029c8:	d01d      	beq.n	8002a06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <UART_AdvFeatureConfig+0x15c>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	035b      	lsls	r3, r3, #13
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10b      	bne.n	8002a06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <UART_AdvFeatureConfig+0x160>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <UART_AdvFeatureConfig+0x164>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fffdffff 	.word	0xfffdffff
 8002a34:	fffeffff 	.word	0xfffeffff
 8002a38:	fffbffff 	.word	0xfffbffff
 8002a3c:	ffff7fff 	.word	0xffff7fff
 8002a40:	ffffefff 	.word	0xffffefff
 8002a44:	ffffdfff 	.word	0xffffdfff
 8002a48:	ffefffff 	.word	0xffefffff
 8002a4c:	ff9fffff 	.word	0xff9fffff
 8002a50:	fff7ffff 	.word	0xfff7ffff

08002a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a62:	f7fd fd3f 	bl	80004e4 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d10d      	bne.n	8002a94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	0399      	lsls	r1, r3, #14
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <UART_CheckIdleState+0x88>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	0013      	movs	r3, r2
 8002a86:	2200      	movs	r2, #0
 8002a88:	f000 f82a 	bl	8002ae0 <UART_WaitOnFlagUntilTimeout>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d001      	beq.n	8002a94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e01f      	b.n	8002ad4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d10d      	bne.n	8002abe <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	03d9      	lsls	r1, r3, #15
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <UART_CheckIdleState+0x88>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	0013      	movs	r3, r2
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f000 f815 	bl	8002ae0 <UART_WaitOnFlagUntilTimeout>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e00a      	b.n	8002ad4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2270      	movs	r2, #112	; 0x70
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	01ffffff 	.word	0x01ffffff

08002ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af0:	e029      	b.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3301      	adds	r3, #1
 8002af6:	d026      	beq.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	f7fd fcf4 	bl	80004e4 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11b      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4915      	ldr	r1, [pc, #84]	; (8002b70 <UART_WaitOnFlagUntilTimeout+0x90>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	438a      	bics	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2270      	movs	r2, #112	; 0x70
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e00f      	b.n	8002b66 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	425a      	negs	r2, r3
 8002b56:	4153      	adcs	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d0c6      	beq.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b004      	add	sp, #16
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	fffffe5f 	.word	0xfffffe5f

08002b74 <set_charging_led>:
	{
		HAL_GPIO_WritePin(BOOST_EN_GPIO_Port, BOOST_EN_Pin, GPIO_PIN_SET);
	}}
}
void set_charging_led(typedefEnum state)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
	switch(state){
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <set_charging_led+0x1a>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d006      	beq.n	8002b9a <set_charging_led+0x26>
	}
	case ON:
	{
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_SET);
	}}
}
 8002b8c:	e00b      	b.n	8002ba6 <set_charging_led+0x32>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <set_charging_led+0x3c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	2102      	movs	r1, #2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7fe f8f5 	bl	8000d84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_SET);
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <set_charging_led+0x3c>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fe f8ef 	bl	8000d84 <HAL_GPIO_WritePin>
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	50000400 	.word	0x50000400

08002bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb8:	f7fd fc3e 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bbc:	f000 f838 	bl	8002c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc0:	f000 f9a8 	bl	8002f14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002bc4:	f000 f900 	bl	8002dc8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002bc8:	f000 f974 	bl	8002eb4 <MX_USART2_UART_Init>
  MX_COMP2_Init();
 8002bcc:	f000 f8a8 	bl	8002d20 <MX_COMP2_Init>
  MX_RTC_Init();
 8002bd0:	f000 f8d0 	bl	8002d74 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <main+0x74>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff f8c0 	bl	8001d5e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <main+0x74>)
 8002be0:	2104      	movs	r1, #4
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff f8bb 	bl	8001d5e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <main+0x74>)
 8002bea:	2108      	movs	r1, #8
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff f8b6 	bl	8001d5e <HAL_TIM_PWM_Start>

  htim2.Instance->CCR1 = 500;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <main+0x74>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	22fa      	movs	r2, #250	; 0xfa
 8002bf8:	0052      	lsls	r2, r2, #1
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->CCR2 = 500;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <main+0x74>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	22fa      	movs	r2, #250	; 0xfa
 8002c02:	0052      	lsls	r2, r2, #1
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 500;
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <main+0x74>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	22fa      	movs	r2, #250	; 0xfa
 8002c0c:	0052      	lsls	r2, r2, #1
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8002c10:	23fa      	movs	r3, #250	; 0xfa
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fd fc6f 	bl	80004f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <main+0x78>)
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fe f8cd 	bl	8000dbe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8002c24:	e7f4      	b.n	8002c10 <main+0x5c>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	20000070 	.word	0x20000070
 8002c2c:	50000400 	.word	0x50000400

08002c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b099      	sub	sp, #100	; 0x64
 8002c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c36:	242c      	movs	r4, #44	; 0x2c
 8002c38:	193b      	adds	r3, r7, r4
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	2334      	movs	r3, #52	; 0x34
 8002c3e:	001a      	movs	r2, r3
 8002c40:	2100      	movs	r1, #0
 8002c42:	f000 fbab 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c46:	2318      	movs	r3, #24
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	2314      	movs	r3, #20
 8002c4e:	001a      	movs	r2, r3
 8002c50:	2100      	movs	r1, #0
 8002c52:	f000 fba3 	bl	800339c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c56:	003b      	movs	r3, r7
 8002c58:	0018      	movs	r0, r3
 8002c5a:	2318      	movs	r3, #24
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f000 fb9c 	bl	800339c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c64:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <SystemClock_Config+0xe8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <SystemClock_Config+0xec>)
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <SystemClock_Config+0xe8>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0109      	lsls	r1, r1, #4
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c76:	0021      	movs	r1, r4
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	220a      	movs	r2, #10
 8002c7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2201      	movs	r2, #1
 8002c82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	2210      	movs	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2202      	movs	r2, #2
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0412      	lsls	r2, r2, #16
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002caa:	187b      	adds	r3, r7, r1
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fe f8b5 	bl	8000e1c <HAL_RCC_OscConfig>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002cb6:	f000 f9b2 	bl	800301e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cba:	2118      	movs	r1, #24
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2100      	movs	r1, #0
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7fe fc16 	bl	8001510 <HAL_RCC_ClockConfig>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002ce8:	f000 f999 	bl	800301e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8002cec:	003b      	movs	r3, r7
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cf2:	003b      	movs	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cf8:	003b      	movs	r3, r7
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	0292      	lsls	r2, r2, #10
 8002cfe:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d00:	003b      	movs	r3, r7
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fe fde8 	bl	80018d8 <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002d0c:	f000 f987 	bl	800301e <Error_Handler>
  }
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b019      	add	sp, #100	; 0x64
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	ffffe7ff 	.word	0xffffe7ff

08002d20 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <MX_COMP2_Init+0x50>)
 8002d28:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_1_2VREFINT;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d2c:	2250      	movs	r2, #80	; 0x50
 8002d2e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  hcomp2.Init.LPTIMConnection = COMP_LPTIMCONNECTION_DISABLED;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  hcomp2.Init.Mode = COMP_POWERMODE_MEDIUMSPEED;
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d44:	2208      	movs	r2, #8
 8002d46:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d50:	2211      	movs	r2, #17
 8002d52:	61da      	str	r2, [r3, #28]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <MX_COMP2_Init+0x4c>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fd fc02 	bl	8000560 <HAL_COMP_Init>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_COMP2_Init+0x44>
  {
    Error_Handler();
 8002d60:	f000 f95d 	bl	800301e <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000048 	.word	0x20000048
 8002d70:	4001001c 	.word	0x4001001c

08002d74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <MX_RTC_Init+0x50>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d86:	227f      	movs	r2, #127	; 0x7f
 8002d88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <MX_RTC_Init+0x4c>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7fe febc 	bl	8001b28 <HAL_RTC_Init>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002db4:	f000 f933 	bl	800301e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000024 	.word	0x20000024
 8002dc4:	40002800 	.word	0x40002800

08002dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dce:	2310      	movs	r3, #16
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	2100      	movs	r1, #0
 8002dda:	f000 fadf 	bl	800339c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dde:	003b      	movs	r3, r7
 8002de0:	0018      	movs	r0, r3
 8002de2:	2310      	movs	r3, #16
 8002de4:	001a      	movs	r2, r3
 8002de6:	2100      	movs	r1, #0
 8002de8:	f000 fad8 	bl	800339c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dec:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	05d2      	lsls	r2, r2, #23
 8002df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002df6:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <MX_TIM2_Init+0xe8>)
 8002df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e02:	22fa      	movs	r2, #250	; 0xfa
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fe ff75 	bl	8001d06 <HAL_TIM_PWM_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002e20:	f000 f8fd 	bl	800301e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e24:	2110      	movs	r1, #16
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	2200      	movs	r2, #0
 8002e30:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e32:	187a      	adds	r2, r7, r1
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff f9e6 	bl	800220a <HAL_TIMEx_MasterConfigSynchronization>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002e42:	f000 f8ec 	bl	800301e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e46:	003b      	movs	r3, r7
 8002e48:	2260      	movs	r2, #96	; 0x60
 8002e4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e4c:	003b      	movs	r3, r7
 8002e4e:	2200      	movs	r2, #0
 8002e50:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	003b      	movs	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e58:	003b      	movs	r3, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5e:	0039      	movs	r1, r7
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7fe ff9d 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002e6e:	f000 f8d6 	bl	800301e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e72:	0039      	movs	r1, r7
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e76:	2204      	movs	r2, #4
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fe ff93 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8002e82:	f000 f8cc 	bl	800301e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e86:	0039      	movs	r1, r7
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fe ff89 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002e96:	f000 f8c2 	bl	800301e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <MX_TIM2_Init+0xe4>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f943 	bl	8003128 <HAL_TIM_MspPostInit>

}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b006      	add	sp, #24
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000070 	.word	0x20000070
 8002eb0:	0000031f 	.word	0x0000031f

08002eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <MX_USART2_UART_Init+0x5c>)
 8002ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ec0:	22e1      	movs	r2, #225	; 0xe1
 8002ec2:	0252      	lsls	r2, r2, #9
 8002ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002eda:	220c      	movs	r2, #12
 8002edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <MX_USART2_UART_Init+0x58>)
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff f9c9 	bl	8002290 <HAL_UART_Init>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f02:	f000 f88c 	bl	800301e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200000ac 	.word	0x200000ac
 8002f10:	40004400 	.word	0x40004400

08002f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	240c      	movs	r4, #12
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	0018      	movs	r0, r3
 8002f20:	2314      	movs	r3, #20
 8002f22:	001a      	movs	r2, r3
 8002f24:	2100      	movs	r1, #0
 8002f26:	f000 fa39 	bl	800339c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f46:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f48:	2102      	movs	r1, #2
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <MX_GPIO_Init+0xe4>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	2202      	movs	r2, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_UV_Pin|BOOST_EN_Pin, GPIO_PIN_RESET);
 8002f5a:	23a0      	movs	r3, #160	; 0xa0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2150      	movs	r1, #80	; 0x50
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7fd ff0e 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, GPIO_PIN_RESET);
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <MX_GPIO_Init+0xe8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7fd ff08 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_UV_Pin BOOST_EN_Pin */
  GPIO_InitStruct.Pin = LED_UV_Pin|BOOST_EN_Pin;
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	2250      	movs	r2, #80	; 0x50
 8002f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	193a      	adds	r2, r7, r4
 8002f8e:	23a0      	movs	r3, #160	; 0xa0
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7fd fd87 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8002f9a:	193b      	adds	r3, r7, r4
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <MX_GPIO_Init+0xec>)
 8002fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8002fac:	193a      	adds	r2, r7, r4
 8002fae:	23a0      	movs	r3, #160	; 0xa0
 8002fb0:	05db      	lsls	r3, r3, #23
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd fd77 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CHARGE_Pin */
  GPIO_InitStruct.Pin = LED_CHARGE_Pin;
 8002fba:	0021      	movs	r1, r4
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CHARGE_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <MX_GPIO_Init+0xe8>)
 8002fd8:	0019      	movs	r1, r3
 8002fda:	0010      	movs	r0, r2
 8002fdc:	f7fd fd64 	bl	8000aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2007      	movs	r0, #7
 8002fe6:	f7fd fd2d 	bl	8000a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002fea:	2007      	movs	r0, #7
 8002fec:	f7fd fd3f 	bl	8000a6e <HAL_NVIC_EnableIRQ>

}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b009      	add	sp, #36	; 0x24
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	50000400 	.word	0x50000400
 8003000:	10110000 	.word	0x10110000

08003004 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	801a      	strh	r2, [r3, #0]
	set_charging_led(ON);
 8003010:	2001      	movs	r0, #1
 8003012:	f7ff fdaf 	bl	8002b74 <set_charging_led>
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}

0800301e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_MspInit+0x24>)
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_MspInit+0x24>)
 8003032:	2101      	movs	r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_MspInit+0x24>)
 800303a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_MspInit+0x24>)
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0549      	lsls	r1, r1, #21
 8003042:	430a      	orrs	r2, r1
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	230c      	movs	r3, #12
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	0018      	movs	r0, r3
 800305e:	2314      	movs	r3, #20
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f000 f99a 	bl	800339c <memset>
  if(hcomp->Instance==COMP2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_COMP_MspInit+0x74>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d124      	bne.n	80030bc <HAL_COMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_COMP_MspInit+0x78>)
 8003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_COMP_MspInit+0x78>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_COMP_MspInit+0x78>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800308a:	210c      	movs	r1, #12
 800308c:	187b      	adds	r3, r7, r1
 800308e:	2208      	movs	r2, #8
 8003090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003092:	187b      	adds	r3, r7, r1
 8003094:	2203      	movs	r2, #3
 8003096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	187b      	adds	r3, r7, r1
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	187a      	adds	r2, r7, r1
 80030a0:	23a0      	movs	r3, #160	; 0xa0
 80030a2:	05db      	lsls	r3, r3, #23
 80030a4:	0011      	movs	r1, r2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7fd fcfe 	bl	8000aa8 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	200c      	movs	r0, #12
 80030b2:	f7fd fcc7 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80030b6:	200c      	movs	r0, #12
 80030b8:	f7fd fcd9 	bl	8000a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b008      	add	sp, #32
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	4001001c 	.word	0x4001001c
 80030c8:	40021000 	.word	0x40021000

080030cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <HAL_RTC_MspInit+0x28>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d106      	bne.n	80030ec <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RTC_MspInit+0x2c>)
 80030e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RTC_MspInit+0x2c>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	02c9      	lsls	r1, r1, #11
 80030e8:	430a      	orrs	r2, r1
 80030ea:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40002800 	.word	0x40002800
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	429a      	cmp	r2, r3
 800310e:	d105      	bne.n	800311c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_TIM_PWM_MspInit+0x28>)
 8003112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_TIM_PWM_MspInit+0x28>)
 8003116:	2101      	movs	r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	230c      	movs	r3, #12
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	0018      	movs	r0, r3
 8003136:	2314      	movs	r3, #20
 8003138:	001a      	movs	r2, r3
 800313a:	2100      	movs	r1, #0
 800313c:	f000 f92e 	bl	800339c <memset>
  if(htim->Instance==TIM2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	05db      	lsls	r3, r3, #23
 8003148:	429a      	cmp	r2, r3
 800314a:	d122      	bne.n	8003192 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_TIM_MspPostInit+0x74>)
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_TIM_MspPostInit+0x74>)
 8003152:	2101      	movs	r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <HAL_TIM_MspPostInit+0x74>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8003164:	210c      	movs	r1, #12
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	187b      	adds	r3, r7, r1
 800316e:	2202      	movs	r2, #2
 8003170:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	187b      	adds	r3, r7, r1
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	187b      	adds	r3, r7, r1
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2202      	movs	r2, #2
 8003182:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	187a      	adds	r2, r7, r1
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f7fd fc8b 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b008      	add	sp, #32
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40021000 	.word	0x40021000

080031a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	230c      	movs	r3, #12
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	0018      	movs	r0, r3
 80031ae:	2314      	movs	r3, #20
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f000 f8f2 	bl	800339c <memset>
  if(huart->Instance==USART2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_UART_MspInit+0x80>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12a      	bne.n	8003218 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_UART_MspInit+0x84>)
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <HAL_UART_MspInit+0x84>)
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	0289      	lsls	r1, r1, #10
 80031cc:	430a      	orrs	r2, r1
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_UART_MspInit+0x84>)
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_UART_MspInit+0x84>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_UART_MspInit+0x84>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031e8:	210c      	movs	r1, #12
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	22c0      	movs	r2, #192	; 0xc0
 80031ee:	00d2      	lsls	r2, r2, #3
 80031f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2202      	movs	r2, #2
 80031f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2203      	movs	r2, #3
 8003202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003204:	187b      	adds	r3, r7, r1
 8003206:	2204      	movs	r2, #4
 8003208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	187a      	adds	r2, r7, r1
 800320c:	23a0      	movs	r3, #160	; 0xa0
 800320e:	05db      	lsls	r3, r3, #23
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f7fd fc48 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b008      	add	sp, #32
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40004400 	.word	0x40004400
 8003224:	40021000 	.word	0x40021000

08003228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <HardFault_Handler+0x4>

08003238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003250:	f7fd f93c 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800325e:	2020      	movs	r0, #32
 8003260:	f7fd fdc0 	bl	8000de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <ADC1_COMP_IRQHandler+0x14>)
 8003272:	0018      	movs	r0, r3
 8003274:	f7fd fb08 	bl	8000888 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000048 	.word	0x20000048

08003284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <SystemInit+0x64>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <SystemInit+0x64>)
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	0049      	lsls	r1, r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <SystemInit+0x64>)
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <SystemInit+0x64>)
 800329c:	4913      	ldr	r1, [pc, #76]	; (80032ec <SystemInit+0x68>)
 800329e:	400a      	ands	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <SystemInit+0x64>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <SystemInit+0x64>)
 80032a8:	4911      	ldr	r1, [pc, #68]	; (80032f0 <SystemInit+0x6c>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <SystemInit+0x64>)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <SystemInit+0x64>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	438a      	bics	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <SystemInit+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <SystemInit+0x64>)
 80032c0:	490c      	ldr	r1, [pc, #48]	; (80032f4 <SystemInit+0x70>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <SystemInit+0x64>)
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <SystemInit+0x64>)
 80032cc:	490a      	ldr	r1, [pc, #40]	; (80032f8 <SystemInit+0x74>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <SystemInit+0x64>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <SystemInit+0x78>)
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	0512      	lsls	r2, r2, #20
 80032de:	609a      	str	r2, [r3, #8]
#endif
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000
 80032ec:	88ff400c 	.word	0x88ff400c
 80032f0:	fef6fff6 	.word	0xfef6fff6
 80032f4:	fffbffff 	.word	0xfffbffff
 80032f8:	ff02ffff 	.word	0xff02ffff
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003300:	480d      	ldr	r0, [pc, #52]	; (8003338 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003302:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003306:	e003      	b.n	8003310 <LoopCopyDataInit>

08003308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800330a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800330c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800330e:	3104      	adds	r1, #4

08003310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003310:	480b      	ldr	r0, [pc, #44]	; (8003340 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003318:	d3f6      	bcc.n	8003308 <CopyDataInit>
  ldr  r2, =_sbss
 800331a:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <LoopForever+0x12>)
  b  LoopFillZerobss
 800331c:	e002      	b.n	8003324 <LoopFillZerobss>

0800331e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800331e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003320:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003322:	3204      	adds	r2, #4

08003324 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <LoopForever+0x16>)
  cmp  r2, r3
 8003326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003328:	d3f9      	bcc.n	800331e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800332a:	f7ff ffab 	bl	8003284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800332e:	f000 f811 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003332:	f7ff fc3f 	bl	8002bb4 <main>

08003336 <LoopForever>:

LoopForever:
    b LoopForever
 8003336:	e7fe      	b.n	8003336 <LoopForever>
   ldr   r0, =_estack
 8003338:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800333c:	08003440 	.word	0x08003440
  ldr  r0, =_sdata
 8003340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003344:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8003348:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800334c:	2000012c 	.word	0x2000012c

08003350 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003350:	e7fe      	b.n	8003350 <DMA1_Channel1_IRQHandler>
	...

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4d0c      	ldr	r5, [pc, #48]	; (800338c <__libc_init_array+0x38>)
 800335a:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	2600      	movs	r6, #0
 8003366:	f000 f821 	bl	80033ac <_init>
 800336a:	4d0a      	ldr	r5, [pc, #40]	; (8003394 <__libc_init_array+0x40>)
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	00b3      	lsls	r3, r6, #2
 800337a:	58eb      	ldr	r3, [r5, r3]
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	00b3      	lsls	r3, r6, #2
 8003384:	58eb      	ldr	r3, [r5, r3]
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	08003438 	.word	0x08003438
 8003390:	08003438 	.word	0x08003438
 8003394:	08003438 	.word	0x08003438
 8003398:	0800343c 	.word	0x0800343c

0800339c <memset>:
 800339c:	0003      	movs	r3, r0
 800339e:	1812      	adds	r2, r2, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
